<Project>
<!--
    MSBuild script for automating codegen of Lottie animations and inclusion of the results into an app build.

    Usage:
        1. Include this targets file in your project:

            <Import Project="path/to/LottieGen.cpp.targets"

        2. Add an ItemGroup to your project with elements like this:

            <LottieAnimation Include="path/to/myAnimation.json" Name="Id to use in JS" />

        The name field is optional and will default to the filename.

        3. In your native React Native Windows setup code, register the native animation provider:

            PackageProviders().Append(winrt::LottieReactNative::ReactPackageProvider(winrt::AnimatedVisuals::LottieCodegenSourceProvider()));
-->
    <PropertyGroup>
        <EnableLottieCodegen Condition="'$(EnableLottieCodegen)' == ''">true</EnableLottieCodegen>
        <LottieGenPath Condition="'$(LottieGenPath)' == ''">C:\dev\ms\Lottie-Windows\LottieGen\bin\AnyCPU\Debug\netcoreapp3.1\lottiegen.exe</LottieGenPath>
        <LottieOutputFolder Condition="'$(LottieOutputFolder)' == ''">$(IntDir)Generated Files\Animations\</LottieOutputFolder>
        <LottieOutputFolder>$(LottieOutputFolder.TrimEnd('\'))</LottieOutputFolder>
        <LottieMinimumUapVersion Condition="'$(LottieMinimumUapVersion)' == ''">10</LottieMinimumUapVersion>
        <LottieTargetUAPVersion Condition="'$(LottieTargetUAPVersion)' == ''">10</LottieTargetUAPVersion>
        <LottieAnimationNamespace>AnimatedVisuals</LottieAnimationNamespace>
        <LottieVerbosity>normal</LottieVerbosity>

        <_LottieProviderIdlFilePath>$(LottieOutputFolder)\LottieCodegenSourceProvider.idl</_LottieProviderIdlFilePath>
        <_LottieProviderHeaderFilePath>$(LottieOutputFolder)\LottieCodegenSourceProvider.h</_LottieProviderHeaderFilePath>
        <_LottieProviderCppFilePath>$(LottieOutputFolder)\LottieCodegenSourceProvider.cpp</_LottieProviderCppFilePath>
    </PropertyGroup>

    <!-- Hook up our targets to run before any CppWinRT/MIDL processing happens -->
    <PropertyGroup>
        <BeforeMidlCompileTargets>LottieGen_IncludeBuiltFiles;$(BeforeMidlCompileTargets)</BeforeMidlCompileTargets>
    </PropertyGroup>

    <!-- Helper for doing find/replace on a text file -->
    <UsingTask TaskName="ReplaceFileText" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Filename ParameterType="System.String" Required="true" />
            <MatchExpression ParameterType="System.String" Required="true" />
            <ReplacementText ParameterType="System.String" Required="false" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Core" />
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment" Language="cs">
            <![CDATA[
                    File.WriteAllText(
                        Filename,
                        Regex.Replace(File.ReadAllText(Filename), MatchExpression, ReplacementText ?? "")
                    );
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- 
        Add metadata to LottieAnimation items. The generated name needs to match what LottieGen outputs.
    
        This is a little goofy because we want to use Regex and we can't do that directly with Item Metadata.
        So instead, we use Target batching (via the %() Outputs attribute) with 1 item per run of the task, and use a Property to run the Regex. -->
    <Target Name="LottieGen_UpdateMetadata"
        Outputs="%(LottieAnimation.Identity)">

        <PropertyGroup>
            <_LottieAnimationIdentity>%(LottieAnimation.Identity)</_LottieAnimationIdentity>
            <_LottieAnimationGeneratedName>$([System.Text.RegularExpressions.Regex]::Replace(%(LottieAnimation.Filename), "^\d", "_$0" ).Replace("-", "_"))</_LottieAnimationGeneratedName>
            <_LottieAnimationName>$(_LottieAnimationGeneratedName)</_LottieAnimationName>
            <_LottieAnimationName Condition="'%(LottieAnimation.Name)' != ''">%(LottieAnimation.Name)</_LottieAnimationName>            
        </PropertyGroup>

        <ItemGroup>
            <LottieAnimation Condition="'%(LottieAnimation.Identity)' == '$(_LottieAnimationIdentity)'">
                <Name>$(_LottieAnimationName)</Name>
                <GeneratedName>$(_LottieAnimationGeneratedName)</GeneratedName>
                <GeneratedFileName>$(LottieAnimationNamespace).$(_LottieAnimationGeneratedName)</GeneratedFileName>
            </LottieAnimation>
        </ItemGroup>

        <Message Importance="$(LottieVerbosity)" Text="Processing metadata for %(LottieAnimation.Identity) -> %(LottieAnimation.Name)" />
    </Target>

    <Target Name="LottieGen_CreateOutputPath">        
        <MakeDir Directories="$(LottieOutputFolder)" />
    </Target>

    <!-- 
        Create a provider component that maps names to native animation implementations. 
    
        We're not using incremental build here because changes to item metadata (like the Name attribute) wouldn't trigger rebuild.
        Instead, we can use WriteOnlyWhenDifferent to avoid changing the output file if our code is the same.
    -->
    <Target Name="LottieGen_CreateProvider" 
        DependsOnTargets="LottieGen_CreateOutputPath;LottieGen_UpdateMetadata"
        Outputs="$(_LottieProviderIdlFilePath);$(_LottieProviderHeaderFilePath);$(_LottieProviderCppFilePath)">
        <PropertyGroup>
            <_LottieProviderIdlContent>
<![CDATA[
namespace $(LottieAnimationNamespace)
{
    runtimeclass LottieCodegenSourceProvider : [default]LottieReactNative.ILottieSourceProvider
    {
        LottieCodegenSourceProvider()%3B
    }
}
]]>
            </_LottieProviderIdlContent>
            <_LottieProviderHeaderContent>
<![CDATA[
#pragma once
#include "$(LottieAnimationNamespace).LottieCodegenSourceProvider.g.h"

namespace winrt::$(LottieAnimationNamespace)::implementation
{
    struct LottieCodegenSourceProvider : LottieCodegenSourceProviderT<LottieCodegenSourceProvider>
    {
        LottieCodegenSourceProvider() = default%3B

        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource GetSourceFromName(winrt::hstring name)%3B
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource GetSourceFromJson(winrt::hstring json)%3B
    }%3B
}
namespace winrt::$(LottieAnimationNamespace)::factory_implementation
{
    struct LottieCodegenSourceProvider : LottieCodegenSourceProviderT<LottieCodegenSourceProvider, implementation::LottieCodegenSourceProvider> {}%3B
}
]]>
            </_LottieProviderHeaderContent>
            <_LottieProviderCppContent>
<![CDATA[
#include "pch.h"
#include "LottieCodegenSourceProvider.h"
#include "$(LottieAnimationNamespace).LottieCodegenSourceProvider.g.cpp"

namespace winrt::$(LottieAnimationNamespace)::implementation
{
    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource LottieCodegenSourceProvider::GetSourceFromName(winrt::hstring name) {
        @(LottieAnimation->'
            if(name == L"%(Name)") {
                return winrt::$(LottieAnimationNamespace)::%(GeneratedName)()%3B
            }
        ')
        return nullptr%3B
    }
    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisualSource LottieCodegenSourceProvider::GetSourceFromJson(winrt::hstring json) {
        return nullptr%3B
    }
}
]]>
            </_LottieProviderCppContent>
        </PropertyGroup>

        <Message Importance="$(LottieVerbosity)" Text="Creating Lottie React Native provider" />
        <WriteLinesToFile
            File="$(_LottieProviderIdlFilePath)"
            Overwrite="true"
            Lines="$(_LottieProviderIdlContent)"
            WriteOnlyWhenDifferent="true" />

        <WriteLinesToFile
            File="$(_LottieProviderHeaderFilePath)"
            Overwrite="true"
            Lines="$(_LottieProviderHeaderContent)"
            WriteOnlyWhenDifferent="true" />

        <WriteLinesToFile
            File="$(_LottieProviderCppFilePath)"
            Overwrite="true"
            Lines="$(_LottieProviderCppContent)"
            WriteOnlyWhenDifferent="true" />
    </Target>

    <!--
        Runs LottieGen on JSON files to generate native animations.

        We use Target batching (via %() in Outputs) to run this target for each animation.
        We specify Inputs and Outputs to support incremental builds. Only changes to the input JSON timestamps will trigger rebuild.
    -->
    <Target Name="LottieGen_Build"
        Condition="'$(EnableLottieCodegen)' == 'true'"
        DependsOnTargets="LottieGen_CreateOutputPath;LottieGen_UpdateMetadata"
        Inputs="@(LottieAnimation)"
        Outputs="$(LottieOutputFolder)\%(LottieAnimation.GeneratedFileName).idl">

        <Message Importance="$(LottieVerbosity)" Text="Generating Lottie animation files" />
        <Exec WorkingDirectory="$(LottieOutputFolder)" Command='"$(LottieGenPath)" -L cppwinrt -AdditionalInterface LottieReactNative.ILottieCodegenSource -Namespace "$(LottieAnimationNamespace)" -MinimumUapVersion $(LottieMinimumUapVersion) -TargetUapVersion $(LottieTargetUapVersion)  -inp "%(LottieAnimation.FullPath)" -o "$(LottieOutputFolder)"' />

        <!-- Hack to remove unncessary import statement -->
        <ReplaceFileText 
            Filename="$(LottieOutputFolder)\%(LottieAnimation.GeneratedFileName).idl" 
            MatchExpression='import "LottieReactNative.ILottieCodegenSource.idl";' 
            ReplacementText="" />
    </Target>

    <!-- 
        Add generated files to the build. 
        
        Done as a separate step to make sure the Items are always created even if codegen was skipped due to no changes. 
    -->
    <Target Name="LottieGen_IncludeBuiltFiles"
        Condition="'$(EnableLottieCodegen)' == 'true'"
        DependsOnTargets="LottieGen_Build;LottieGen_CreateProvider">
        <ItemGroup>
            <Midl Include="$(LottieOutputFolder)\%(LottieAnimation.GeneratedFileName).idl" />
            <ClInclude Include="$(LottieOutputFolder)\%(LottieAnimation.GeneratedFileName).h" />
            <ClCompile Include="$(LottieOutputFolder)\%(LottieAnimation.GeneratedFileName).cpp" />            

            <Midl Include="$(_LottieProviderIdlFilePath)" />
            <ClInclude Include="$(_LottieProviderHeaderFilePath)" />
            <ClCompile Include="$(_LottieProviderCppFilePath)" />
        </ItemGroup>
    </Target>
</Project>