//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.90+ga9eb6fa111
//       
//       Command:
//           LottieGen -InterfaceBaseName Microsoft.UI.Xaml.Controls.IAnimatedVisual -Language Cppwinrt -WinUIVersion 2.4 -InputFile PinJump.json
//       
//       Input file:
//           PinJump.json (36815 bytes created 20:50-08:00 Dec 28 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |           152 |          134 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            16 |           14 |
// | KeyFrame animators       |            16 |           14 |
// | Reference parameters     |            16 |           14 |
// | Expression operations    |             0 |            0 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             5 |            5 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |             5 |            5 |
// | PathKeyFrameAnimations   |             2 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             4 |            4 |
// | CompositionSpriteShapes  |             8 |            8 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             8 |            8 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
#include "pch.h"
#include "AnimatedVisuals.PinJump.h"
#include "AnimatedVisuals.PinJump.g.cpp"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::AnimatedVisuals::implementation
{
    class CanvasGeometry : public winrt::implements<CanvasGeometry,
        IGeometrySource2D,
        ::ABI::Windows::Graphics::IGeometrySource2DInterop>
    {
        winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

    public:
        CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
            : _geometry{ geometry }
        { }

        // IGeometrySource2D.
        winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
        {
            _geometry.copy_to(value);
            return S_OK;
        }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
        {
            return E_NOTIMPL;
        }
    };
    class PinJump_AnimatedVisual_UAPv11 : public winrt::implements<PinJump_AnimatedVisual_UAPv11,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 31000000L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionEllipseGeometry _ellipse_4p447{ nullptr };
        CompositionPath _path_00{ nullptr };
        CompositionPath _path_01{ nullptr };
        CompositionPath _path_02{ nullptr };
        CompositionPath _path_03{ nullptr };
        CompositionPath _path_04{ nullptr };
        CompositionPath _path_05{ nullptr };
        CompositionPath _path_06{ nullptr };
        CompositionPath _path_07{ nullptr };
        CompositionPath _path_08{ nullptr };
        CompositionPath _path_09{ nullptr };
        CompositionPath _path_10{ nullptr };
        CompositionPath _path_11{ nullptr };
        CompositionPath _path_12{ nullptr };
        CompositionPath _path_13{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_3{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_4{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_5{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_6{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_7{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_8{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_9{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateColorKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InterpolationColorSpace(CompositionColorSpace::Rgb);
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreatePathKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, float2 initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateVector2KeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix, CompositionBrush fillBrush)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            result.FillBrush(fillBrush);
            return result;
        }

        // - - - Layer aggregator
        // - -  Scale:0.5,0.5, Offset:<75, 75>
        winrt::com_ptr<CanvasGeometry> Geometry_00()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -109.5F, 54.75F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 119.5F, 54.75F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_01()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -1.83599997F, 87.6880035F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -17.7840004F, 62.0849991F }, { -32.5169983F, 36.8030014F }, { -44.0F, 9.79100037F } });
            sink->AddBezier({ { -47.5639992F, 1.40699995F }, { -50.8660011F, -7.26399994F }, { -52.8190002F, -16.1270008F } });
            sink->AddBezier({ { -59.2159996F, -45.1629982F }, { -39.1769981F, -74.9150009F }, { -10.0380001F, -80.5540009F } });
            sink->AddBezier({ { 26.823F, -87.6880035F }, { 59.2159996F, -60.1520004F }, { 57.3470001F, -22.6940002F } });
            sink->AddBezier({ { 57.0F, -15.7469997F }, { 54.5929985F, -8.62199974F }, { 51.848999F, -2.12299991F } });
            sink->AddBezier({ { 38.2890015F, 29.9979992F }, { 18.5440006F, 58.4690018F }, { -1.83599997F, 87.6880035F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_02()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -1.83599997F, 87.6880035F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -17.7840004F, 72.8949966F }, { -32.5169983F, 58.2859993F }, { -44.0F, 42.6790009F } });
            sink->AddBezier({ { -47.5639992F, 37.8339996F }, { -50.8660011F, 32.8240013F }, { -52.8190002F, 27.7029991F } });
            sink->AddBezier({ { -59.2159996F, 10.9259996F }, { -39.1769981F, -6.26499987F }, { -10.0380001F, -9.52299976F } });
            sink->AddBezier({ { 26.823F, -13.6450005F }, { 59.2159996F, 2.2650001F }, { 57.3470001F, 23.9090004F } });
            sink->AddBezier({ { 57.0F, 27.9230003F }, { 54.5929985F, 32.0400009F }, { 51.848999F, 35.7949982F } });
            sink->AddBezier({ { 38.2890015F, 54.3549995F }, { 18.5440006F, 70.8050003F }, { -1.83599997F, 87.6880035F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_03()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -1.83599997F, 87.6880035F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -17.7840004F, 58.8079987F }, { -32.5169983F, 30.2889996F }, { -44.0F, -0.180000007F } });
            sink->AddBezier({ { -47.5639992F, -9.63799953F }, { -50.8660011F, -19.4169998F }, { -52.8190002F, -29.4150009F } });
            sink->AddBezier({ { -59.2159996F, -62.1679993F }, { -39.1769981F, -95.7289963F }, { -10.0380001F, -102.089996F } });
            sink->AddBezier({ { 26.823F, -110.137001F }, { 59.2159996F, -79.0759964F }, { 57.3470001F, -36.8230019F } });
            sink->AddBezier({ { 57.0F, -28.9869995F }, { 54.5929985F, -20.9500008F }, { 51.848999F, -13.6190004F } });
            sink->AddBezier({ { 38.2890015F, 22.6140003F }, { 18.5440006F, 54.7290001F }, { -1.83599997F, 87.6880035F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_04()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -66.4380035F, 54.6189995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -48.993F, 28.3950005F }, { -53.2960014F, 12.6029997F }, { -57.7869987F, -17.7859993F } });
            sink->AddBezier({ { -59.1809998F, -27.2189999F }, { -60.2490005F, -36.8860016F }, { -59.9550018F, -46.4480019F } });
            sink->AddBezier({ { -58.9910011F, -77.7730026F }, { -32.1030006F, -103.870003F }, { -2.32599998F, -103.098F } });
            sink->AddBezier({ { 35.3409996F, -102.122002F }, { 60.0670013F, -66.473999F }, { 48.9659996F, -28.3470001F } });
            sink->AddBezier({ { 46.9070015F, -21.2759991F }, { 42.7970009F, -14.4870005F }, { 38.5149994F, -8.41800022F } });
            sink->AddBezier({ { 17.3500004F, 21.5790005F }, { -32.6189995F, 45.2890015F }, { -66.4380035F, 54.6189995F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_05()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 1.26600003F, 100.478996F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -20.4680004F, 58.2639999F }, { -32.1139984F, 26.2789993F }, { -47.6580009F, -3.80200005F } });
            sink->AddBezier({ { -52.4830017F, -13.1389999F }, { -57.0919991F, -22.8449993F }, { -60.3930016F, -32.9519997F } });
            sink->AddBezier({ { -71.2060013F, -66.0650024F }, { -55.9199982F, -103.466003F }, { -27.8990002F, -113.863998F } });
            sink->AddBezier({ { 7.54799986F, -127.017998F }, { 43.9020004F, -99.0540009F }, { 47.8180008F, -55.0159988F } });
            sink->AddBezier({ { 48.5439987F, -46.848999F }, { 47.2540016F, -38.2039986F }, { 45.5349998F, -30.2469997F } });
            sink->AddBezier({ { 37.0379982F, 9.07800007F }, { 11.6960001F, 54.3650017F }, { 1.26600003F, 100.478996F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_06()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -1.83599997F, 87.6880035F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -17.7840004F, 60.9420013F }, { -36.7820015F, 30.3330002F }, { -49.7610016F, 2.77200007F } });
            sink->AddBezier({ { -53.7900009F, -5.78299999F }, { -57.5730019F, -14.6499996F }, { -60.019001F, -23.7910004F } });
            sink->AddBezier({ { -68.0329971F, -53.7369995F }, { -49.6879997F, -85.8460007F }, { -20.9069996F, -93.2910004F } });
            sink->AddBezier({ { 15.5010004F, -102.709F }, { 49.3889999F, -75.7220001F }, { 49.6209984F, -36.5480003F } });
            sink->AddBezier({ { 49.6640015F, -29.2830009F }, { 47.6590004F, -21.7220001F }, { 45.2830009F, -14.7950001F } });
            sink->AddBezier({ { 33.5419998F, 19.4389992F }, { 18.5440006F, 57.1650009F }, { -1.83599997F, 87.6880035F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_07()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -1.83599997F, 87.6880035F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -17.7840004F, 67.3450012F }, { -32.5169983F, 47.257F }, { -44.0F, 25.7950001F } });
            sink->AddBezier({ { -47.5639992F, 19.1329994F }, { -50.8660011F, 12.2440004F }, { -52.8190002F, 5.20200014F } });
            sink->AddBezier({ { -59.2159996F, -17.8689995F }, { -39.1769981F, -41.5079994F }, { -10.0380001F, -45.9889984F } });
            sink->AddBezier({ { 26.823F, -51.6570015F }, { 59.2159996F, -29.7779999F }, { 57.3470001F, -0.0160000008F } });
            sink->AddBezier({ { 57.0F, 5.50400019F }, { 54.5929985F, 11.165F }, { 51.848999F, 16.3290005F } });
            sink->AddBezier({ { 38.2890015F, 41.8510017F }, { 18.5440006F, 64.4720001F }, { -1.83599997F, 87.6880035F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_08()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 1.58700001F, 3.51999998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 18.3010006F, 3.50300002F }, { 31.5319996F, -9.63899994F }, { 31.4389992F, -26.1289997F } });
            sink->AddBezier({ { 31.3460007F, -42.6640015F }, { 17.9470005F, -56.0779991F }, { 1.59599996F, -56.0060005F } });
            sink->AddBezier({ { -14.6429996F, -55.9350014F }, { -28.2859993F, -42.1209984F }, { -28.1490002F, -25.8889999F } });
            sink->AddBezier({ { -28.0119991F, -9.68000031F }, { -14.6490002F, 3.53699994F }, { 1.58700001F, 3.51999998F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_09()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 1.58700001F, 39.0550003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 18.3010006F, 39.0449982F }, { 31.5319996F, 31.4519997F }, { 31.4389992F, 21.9239998F } });
            sink->AddBezier({ { 31.3460007F, 12.3699999F }, { 17.9470005F, 4.61899996F }, { 1.59599996F, 4.66099977F } });
            sink->AddBezier({ { -14.6429996F, 4.70200014F }, { -28.2859993F, 12.684F }, { -28.1490002F, 22.0629997F } });
            sink->AddBezier({ { -28.0119991F, 31.4290009F }, { -14.6490002F, 39.0649986F }, { 1.58700001F, 39.0550003F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_10()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 1.58700001F, -7.25400019F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 18.3010006F, -7.27400017F }, { 31.5319996F, -22.0960007F }, { 31.4389992F, -40.6969986F } });
            sink->AddBezier({ { 31.3460007F, -59.3479996F }, { 17.9470005F, -74.4800034F }, { 1.59599996F, -74.3990021F } });
            sink->AddBezier({ { -14.6429996F, -74.3180008F }, { -28.2859993F, -58.7369995F }, { -28.1490002F, -40.4269981F } });
            sink->AddBezier({ { -28.0119991F, -22.1429996F }, { -14.6490002F, -7.23500013F }, { 1.58700001F, -7.25400019F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_11()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -11.835F, -13.9519997F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 4.44700003F, -10.1990004F }, { 20.5890007F, -20.7369995F }, { 24.5839996F, -37.7280006F } });
            sink->AddBezier({ { 28.5900002F, -54.7649994F }, { 18.8640003F, -71.5950012F }, { 2.92199993F, -75.2099991F } });
            sink->AddBezier({ { -12.9119997F, -78.8010025F }, { -29.6219997F, -67.6620026F }, { -33.5099983F, -50.9269981F } });
            sink->AddBezier({ { -37.3930016F, -34.2150002F }, { -27.6520004F, -17.5979996F }, { -11.835F, -13.9519997F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_12()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -3.42700005F, -17.0860004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 13.1409998F, -19.2889996F }, { 24.2339993F, -36.3810005F }, { 21.6030006F, -55.6479988F } });
            sink->AddBezier({ { 18.9640007F, -74.9680023F }, { 3.61400008F, -88.9020004F }, { -12.585F, -86.6829987F } });
            sink->AddBezier({ { -28.6739998F, -84.4789963F }, { -40.0740013F, -66.5469971F }, { -37.4379997F, -47.5870018F } });
            sink->AddBezier({ { -34.8059998F, -28.6539993F }, { -19.5209999F, -14.9460001F }, { -3.42700005F, -17.0860004F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_13()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -4.59000015F, -6.21400023F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 12.0979996F, -7.12799978F }, { 24.5739994F, -21.5450001F }, { 23.5580006F, -38.7420006F } });
            sink->AddBezier({ { 22.5389996F, -55.9850006F }, { 8.40799999F, -69.2600021F }, { -7.91499996F, -68.3079987F } });
            sink->AddBezier({ { -24.1270008F, -67.362999F }, { -36.9770012F, -52.2220001F }, { -35.9309998F, -35.2970009F } });
            sink->AddBezier({ { -34.8860016F, -18.3959999F }, { -20.8010006F, -5.32600021F }, { -4.59000015F, -6.21400023F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_14()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 1.58700001F, 20.8120003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 18.3010006F, 20.7980003F }, { 31.5319996F, 10.3570004F }, { 31.4389992F, -2.74499989F } });
            sink->AddBezier({ { 31.3460007F, -15.8830004F }, { 17.9470005F, -26.5410004F }, { 1.59599996F, -26.4839993F } });
            sink->AddBezier({ { -14.6429996F, -26.427F }, { -28.2859993F, -15.4510002F }, { -28.1490002F, -2.5539999F } });
            sink->AddBezier({ { -28.0119991F, 10.3249998F }, { -14.6490002F, 20.8250008F }, { 1.58700001F, 20.8120003F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Layer aggregator
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostGainsboro_FFE2E2E2_to_White()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xE2, 0xE2, 0xE2 }, _stepThenHoldEasingFunction);
            // AlmostGainsboro_FFE2E2E2
            result.InsertKeyFrame(0.408602148F, { 0xFF, 0xE2, 0xE2, 0xE2 }, _holdThenStepEasingFunction);
            // White
            result.InsertKeyFrame(0.45161289F, { 0xFF, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - Layer aggregator
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_SemiTransparentAlmostGainsboro_F9E2E2E2_to_SemiTransparentWhite()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xF9, 0xE2, 0xE2, 0xE2 }, StepThenHoldEasingFunction());
            // SemiTransparentAlmostGainsboro_F9E2E2E2
            result.InsertKeyFrame(0.0967741907F, { 0xF9, 0xE2, 0xE2, 0xE2 }, HoldThenStepEasingFunction());
            // SemiTransparentWhite
            result.InsertKeyFrame(0.139784947F, { 0xF9, 0xFF, 0xFF, 0xFF }, CubicBezierEasingFunction_0());
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: C4
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_White_to_AlmostGainsboro_FFE2E2E2_0()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // White
            result.InsertKeyFrame(0.54838711F, { 0xFF, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // AlmostGainsboro_FFE2E2E2
            result.InsertKeyFrame(0.602150559F, { 0xFF, 0xE2, 0xE2, 0xE2 }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: C5
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_White_to_AlmostGainsboro_FFE2E2E2_1()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // White
            result.InsertKeyFrame(0.860215068F, { 0xFF, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // AlmostGainsboro_FFE2E2E2
            result.InsertKeyFrame(0.913978517F, { 0xFF, 0xE2, 0xE2, 0xE2 }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: C3
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_White_to_White()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // White
            result.InsertKeyFrame(0.193548381F, { 0xFF, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // AlmostTomato_FFF73D3D
            result.InsertKeyFrame(0.236559138F, { 0xFF, 0xF7, 0x3D, 0x3D }, _cubicBezierEasingFunction_0);
            // AlmostTomato_FFF73D3D
            result.InsertKeyFrame(0.720430136F, { 0xFF, 0xF7, 0x3D, 0x3D }, _cubicBezierEasingFunction_0);
            // White
            result.InsertKeyFrame(0.774193525F, { 0xFF, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_AlmostGainsboro_FFE2E2E2_to_White()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostGainsboro_FFE2E2E2_to_White(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_SemiTransparentAlmostGainsboro_F9E2E2E2_to_SemiTransparentWhite()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_SemiTransparentAlmostGainsboro_F9E2E2E2_to_SemiTransparentWhite(), RootProgress());
            return result;
        }

        // - - Layer aggregator
        // - Layer: C4
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_White_to_AlmostGainsboro_FFE2E2E2_0()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_White_to_AlmostGainsboro_FFE2E2E2_0(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C5
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_White_to_AlmostGainsboro_FFE2E2E2_1()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_White_to_AlmostGainsboro_FFE2E2E2_1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C3
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_White_to_White()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_White_to_White(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Scale:0.5,0.5, Offset:<75, 75>
        CompositionColorBrush ColorBrush_AlmostGainsboro_FFE2E2E2()
        {
            return _c.CreateColorBrush({ 0xFF, 0xE2, 0xE2, 0xE2 });
        }

        // - - Layer aggregator
        // Transforms: Pin 1 Offset:<61.385, -27.617>
        CompositionColorBrush ColorBrush_AlmostTomato_FFF73D3D()
        {
            return _c.CreateColorBrush({ 0xFF, 0xF7, 0x3D, 0x3D });
        }

        // - - Layer aggregator
        // Transforms: Pin 2 Offset:<61.385, -27.617>
        CompositionColorBrush ColorBrush_White()
        {
            return _c.CreateColorBrush({ 0xFF, 0xFF, 0xFF, 0xFF });
        }

        // Layer aggregator
        // Layer: C3
        CompositionContainerShape ContainerShape_0()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Ellipse 1
            result.Shapes().Append(SpriteShape_3());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_0(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: C4
        CompositionContainerShape ContainerShape_1()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Ellipse 1
            result.Shapes().Append(SpriteShape_4());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_1(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: C5
        CompositionContainerShape ContainerShape_2()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Ellipse 1
            result.Shapes().Append(SpriteShape_5());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_2(), _rootProgress);
            return result;
        }

        // Layer aggregator
        CompositionContainerShape ContainerShape_3()
        {
            const auto result = _c.CreateContainerShape();
            result.CenterPoint({ 60.0F, 60.0F });
            result.Scale({ 0.256500006F, 0.256500006F });
            const auto shapes = result.Shapes();
            // Transforms: Pin 1 Offset:<61.385, -27.617>
            shapes.Append(SpriteShape_6());
            // Transforms: Pin 2 Offset:<61.385, -27.617>
            shapes.Append(SpriteShape_7());
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_5(), _rootProgress);
            return result;
        }

        // Ellipse Path 1.EllipseGeometry
        CompositionEllipseGeometry Ellipse_4p447()
        {
            const auto result = _ellipse_4p447 = _c.CreateEllipseGeometry();
            result.Radius({ 4.44700003F, 4.44700003F });
            return result;
        }

        // - - Layer aggregator
        // - Layer: C3
        // ShapeGroup: Ellipse 1
        // Ellipse Path 1.EllipseGeometry
        CompositionEllipseGeometry Ellipse_8p047()
        {
            const auto result = _c.CreateEllipseGeometry();
            result.Radius({ 8.04699993F, 8.04699993F });
            return result;
        }

        CompositionPath Path_00()
        {
            const auto result = _path_00 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_01()));
            return result;
        }

        CompositionPath Path_01()
        {
            const auto result = _path_01 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_02()));
            return result;
        }

        CompositionPath Path_02()
        {
            const auto result = _path_02 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_03()));
            return result;
        }

        CompositionPath Path_03()
        {
            const auto result = _path_03 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_04()));
            return result;
        }

        CompositionPath Path_04()
        {
            const auto result = _path_04 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_05()));
            return result;
        }

        CompositionPath Path_05()
        {
            const auto result = _path_05 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_06()));
            return result;
        }

        CompositionPath Path_06()
        {
            const auto result = _path_06 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_07()));
            return result;
        }

        CompositionPath Path_07()
        {
            const auto result = _path_07 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_08()));
            return result;
        }

        CompositionPath Path_08()
        {
            const auto result = _path_08 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_09()));
            return result;
        }

        CompositionPath Path_09()
        {
            const auto result = _path_09 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_10()));
            return result;
        }

        CompositionPath Path_10()
        {
            const auto result = _path_10 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_11()));
            return result;
        }

        CompositionPath Path_11()
        {
            const auto result = _path_11 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_12()));
            return result;
        }

        CompositionPath Path_12()
        {
            const auto result = _path_12 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_13()));
            return result;
        }

        CompositionPath Path_13()
        {
            const auto result = _path_13 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_14()));
            return result;
        }

        // - Layer aggregator
        // Scale:0.5,0.5, Offset:<75, 75>
        CompositionPathGeometry PathGeometry_0()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_00())));
        }

        // - - Layer aggregator
        // Transforms: Pin 1 Offset:<61.385, -27.617>
        CompositionPathGeometry PathGeometry_1()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_0(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // Transforms: Pin 2 Offset:<61.385, -27.617>
        CompositionPathGeometry PathGeometry_2()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_1(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_0()
        {
            // Offset:<75, 75>, Scale:<0.5, 0.5>
            const auto result = CreateSpriteShape(PathGeometry_0(), { 0.5F, 0.0F, 0.0F, 0.5F, 75.0F, 75.0F });
            result.StrokeBrush(ColorBrush_AlmostGainsboro_FFE2E2E2());
            result.StrokeMiterLimit(2.0F);
            return result;
        }

        // Layer aggregator
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_1()
        {
            const auto result = _c.CreateSpriteShape(Ellipse_4p447());
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_SemiTransparentAlmostGainsboro_F9E2E2E2_to_SemiTransparentWhite());
            result.StartAnimation(L"Offset", OffsetVector2Animation_0());
            const auto controller = result.TryGetAnimationController(L"Offset");
            controller.Pause();
            BindProperty(controller, L"Progress", L"(_.Progress*0.6940299)+0.3059702", L"_", _root);
            return result;
        }

        // Layer aggregator
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_2()
        {
            const auto result = _c.CreateSpriteShape(_ellipse_4p447);
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_AlmostGainsboro_FFE2E2E2_to_White());
            result.StartAnimation(L"Offset", OffsetVector2Animation_1());
            const auto controller = result.TryGetAnimationController(L"Offset");
            controller.Pause();
            BindProperty(controller, L"Progress", L"(_.Progress*0.8773585)+0.1226415", L"_", _root);
            return result;
        }

        // - Layer aggregator
        // Layer: C3
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_3()
        {
            const auto result = _c.CreateSpriteShape(Ellipse_8p047());
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_White_to_White());
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_2(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: C4
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_4()
        {
            const auto result = _c.CreateSpriteShape(_ellipse_4p447);
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_White_to_AlmostGainsboro_FFE2E2E2_0());
            result.StartAnimation(L"Offset", OffsetVector2Animation_3());
            const auto controller = result.TryGetAnimationController(L"Offset");
            controller.Pause();
            BindProperty(controller, L"Progress", L"_.Progress*0.8857143", L"_", _root);
            return result;
        }

        // - Layer aggregator
        // Layer: C5
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_5()
        {
            const auto result = _c.CreateSpriteShape(_ellipse_4p447);
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_White_to_AlmostGainsboro_FFE2E2E2_1());
            result.StartAnimation(L"Offset", OffsetVector2Animation_4());
            const auto controller = result.TryGetAnimationController(L"Offset");
            controller.Pause();
            BindProperty(controller, L"Progress", L"_.Progress*0.6940299", L"_", _root);
            return result;
        }

        // - Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_6()
        {
            // Offset:<61.385, -27.617>
            const auto result = CreateSpriteShape(PathGeometry_1(), { 1.0F, 0.0F, 0.0F, 1.0F, 61.3849983F, -27.6170006F }, ColorBrush_AlmostTomato_FFF73D3D());
            return result;
        }

        // - Layer aggregator
        // Path 2
        CompositionSpriteShape SpriteShape_7()
        {
            // Offset:<61.385, -27.617>
            const auto result = CreateSpriteShape(PathGeometry_2(), { 1.0F, 0.0F, 0.0F, 1.0F, 61.3849983F, -27.6170006F }, ColorBrush_White());
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.00999999978F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_2()
        {
            return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.99000001F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_3()
        {
            return _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_4()
        {
            return _cubicBezierEasingFunction_4 = _c.CreateCubicBezierEasingFunction({ 1.0F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_5()
        {
            return _cubicBezierEasingFunction_5 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.666999996F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_6()
        {
            return _cubicBezierEasingFunction_6 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.0F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_7()
        {
            return _cubicBezierEasingFunction_7 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_8()
        {
            return _cubicBezierEasingFunction_8 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.209999993F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_9()
        {
            return _cubicBezierEasingFunction_9 = _c.CreateCubicBezierEasingFunction({ 0.790000021F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        // - - - Layer aggregator
        // - Transforms: Pin 1 Offset:<61.385, -27.617>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_0()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_00(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0215053763F, _path_00, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.0537634417F, Path_01(), CubicBezierEasingFunction_1());
            result.InsertKeyFrame(0.0860215053F, Path_02(), CubicBezierEasingFunction_2());
            result.InsertKeyFrame(0.139784947F, Path_03(), CubicBezierEasingFunction_3());
            result.InsertKeyFrame(0.204301074F, Path_04(), CubicBezierEasingFunction_4());
            result.InsertKeyFrame(0.215053767F, Path_05(), CubicBezierEasingFunction_5());
            result.InsertKeyFrame(0.247311831F, Path_06(), CubicBezierEasingFunction_6());
            result.InsertKeyFrame(0.311827958F, _path_00, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.344086021F, _path_00, CubicBezierEasingFunction_7());
            result.InsertKeyFrame(0.376344085F, _path_01, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.408602148F, _path_02, _cubicBezierEasingFunction_2);
            result.InsertKeyFrame(0.462365597F, _path_03, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.526881695F, _path_04, _cubicBezierEasingFunction_4);
            result.InsertKeyFrame(0.537634432F, _path_05, _cubicBezierEasingFunction_5);
            result.InsertKeyFrame(0.569892466F, _path_06, _cubicBezierEasingFunction_6);
            result.InsertKeyFrame(0.634408593F, _path_00, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.69892472F, _path_00, _cubicBezierEasingFunction_7);
            result.InsertKeyFrame(0.731182814F, _path_01, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.763440847F, _path_02, _cubicBezierEasingFunction_2);
            result.InsertKeyFrame(0.817204297F, _path_03, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.881720424F, _path_04, _cubicBezierEasingFunction_4);
            result.InsertKeyFrame(0.892473102F, _path_05, _cubicBezierEasingFunction_5);
            result.InsertKeyFrame(0.924731195F, _path_06, _cubicBezierEasingFunction_6);
            result.InsertKeyFrame(0.989247322F, _path_00, _cubicBezierEasingFunction_3);
            return result;
        }

        // - - - Layer aggregator
        // - Transforms: Pin 2 Offset:<61.385, -27.617>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_1()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_07(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0215053763F, _path_07, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.0537634417F, Path_08(), _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.0860215053F, Path_09(), _cubicBezierEasingFunction_2);
            result.InsertKeyFrame(0.139784947F, Path_10(), _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.204301074F, Path_11(), _cubicBezierEasingFunction_4);
            result.InsertKeyFrame(0.215053767F, Path_12(), _cubicBezierEasingFunction_5);
            result.InsertKeyFrame(0.247311831F, Path_13(), _cubicBezierEasingFunction_6);
            result.InsertKeyFrame(0.311827958F, _path_07, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.344086021F, _path_07, _cubicBezierEasingFunction_7);
            result.InsertKeyFrame(0.376344085F, _path_08, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.408602148F, _path_09, _cubicBezierEasingFunction_2);
            result.InsertKeyFrame(0.462365597F, _path_10, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.526881695F, _path_11, _cubicBezierEasingFunction_4);
            result.InsertKeyFrame(0.537634432F, _path_12, _cubicBezierEasingFunction_5);
            result.InsertKeyFrame(0.569892466F, _path_13, _cubicBezierEasingFunction_6);
            result.InsertKeyFrame(0.634408593F, _path_07, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.69892472F, _path_07, _cubicBezierEasingFunction_7);
            result.InsertKeyFrame(0.731182814F, _path_08, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.763440847F, _path_09, _cubicBezierEasingFunction_2);
            result.InsertKeyFrame(0.817204297F, _path_10, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.881720424F, _path_11, _cubicBezierEasingFunction_4);
            result.InsertKeyFrame(0.892473102F, _path_12, _cubicBezierEasingFunction_5);
            result.InsertKeyFrame(0.924731195F, _path_13, _cubicBezierEasingFunction_6);
            result.InsertKeyFrame(0.989247322F, _path_07, _cubicBezierEasingFunction_3);
            return result;
        }

        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 150.0F, 150.0F });
            const auto shapes = result.Shapes();
            // Scale:0.5,0.5, Offset:<75, 75>
            shapes.Append(SpriteShape_0());
            // ShapeGroup: Ellipse 1
            shapes.Append(SpriteShape_1());
            // ShapeGroup: Ellipse 1
            shapes.Append(SpriteShape_2());
            // Layer: C3
            shapes.Append(ContainerShape_0());
            // Layer: C4
            shapes.Append(ContainerShape_1());
            // Layer: C5
            shapes.Append(ContainerShape_2());
            shapes.Append(ContainerShape_3());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.402985066F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.509433985F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C3
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_2()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.193548381F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.774193525F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C4
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_3()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.485714287F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(1.0F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C5
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_4()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.597014904F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(1.0F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - Layer aggregator
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_5()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 17.1450005F, 41.973999F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0860215053F, { 17.1450005F, 41.973999F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.139784947F, { 17.1450005F, 26.9740009F }, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.215053767F, { 17.1450005F, 41.973999F }, _cubicBezierEasingFunction_4);
            result.InsertKeyFrame(0.408602148F, { 17.1450005F, 41.973999F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.483870953F, { 17.1450005F, 26.9740009F }, CubicBezierEasingFunction_8());
            result.InsertKeyFrame(0.559139788F, { 17.1450005F, 41.973999F }, CubicBezierEasingFunction_9());
            result.InsertKeyFrame(0.763440847F, { 17.1450005F, 41.973999F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.838709652F, { 17.1450005F, 26.9740009F }, _cubicBezierEasingFunction_8);
            result.InsertKeyFrame(0.913978517F, { 17.1450005F, 41.973999F }, _cubicBezierEasingFunction_9);
            return result;
        }

        // - Layer aggregator
        // Layer: C3
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.193548381F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: C4
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.54838711F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: C5
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.860215068F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        PinJump_AnimatedVisual_UAPv11(Compositor compositor)
            : _c{compositor}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 150.0F, 150.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 11);
        }
    };

    class PinJump_AnimatedVisual_UAPv7 : public winrt::implements<PinJump_AnimatedVisual_UAPv7,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 31000000L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionEllipseGeometry _ellipse_4p447{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateColorKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InterpolationColorSpace(CompositionColorSpace::Rgb);
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, float2 initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateVector2KeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix, CompositionBrush fillBrush)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            result.FillBrush(fillBrush);
            return result;
        }

        // - - - Layer aggregator
        // - -  Scale:0.5,0.5, Offset:<75, 75>
        winrt::com_ptr<CanvasGeometry> Geometry_0()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -109.5F, 54.75F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 119.5F, 54.75F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - Transforms: Pin 1 Offset:<61.385, -27.617>
        winrt::com_ptr<CanvasGeometry> Geometry_1()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -1.83599997F, 87.6880035F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -17.7840004F, 62.0849991F }, { -32.5169983F, 36.8030014F }, { -44.0F, 9.79100037F } });
            sink->AddBezier({ { -47.5639992F, 1.40699995F }, { -50.8660011F, -7.26399994F }, { -52.8190002F, -16.1270008F } });
            sink->AddBezier({ { -59.2159996F, -45.1629982F }, { -39.1769981F, -74.9150009F }, { -10.0380001F, -80.5540009F } });
            sink->AddBezier({ { 26.823F, -87.6880035F }, { 59.2159996F, -60.1520004F }, { 57.3470001F, -22.6940002F } });
            sink->AddBezier({ { 57.0F, -15.7469997F }, { 54.5929985F, -8.62199974F }, { 51.848999F, -2.12299991F } });
            sink->AddBezier({ { 38.2890015F, 29.9979992F }, { 18.5440006F, 58.4690018F }, { -1.83599997F, 87.6880035F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - Transforms: Pin 2 Offset:<61.385, -27.617>
        winrt::com_ptr<CanvasGeometry> Geometry_2()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 1.58700001F, 3.51999998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 18.3010006F, 3.50300002F }, { 31.5319996F, -9.63899994F }, { 31.4389992F, -26.1289997F } });
            sink->AddBezier({ { 31.3460007F, -42.6640015F }, { 17.9470005F, -56.0779991F }, { 1.59599996F, -56.0060005F } });
            sink->AddBezier({ { -14.6429996F, -55.9350014F }, { -28.2859993F, -42.1209984F }, { -28.1490002F, -25.8889999F } });
            sink->AddBezier({ { -28.0119991F, -9.68000031F }, { -14.6490002F, 3.53699994F }, { 1.58700001F, 3.51999998F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Layer aggregator
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostGainsboro_FFE2E2E2_to_White()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xE2, 0xE2, 0xE2 }, _stepThenHoldEasingFunction);
            // AlmostGainsboro_FFE2E2E2
            result.InsertKeyFrame(0.408602148F, { 0xFF, 0xE2, 0xE2, 0xE2 }, _holdThenStepEasingFunction);
            // White
            result.InsertKeyFrame(0.45161289F, { 0xFF, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - Layer aggregator
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_SemiTransparentAlmostGainsboro_F9E2E2E2_to_SemiTransparentWhite()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xF9, 0xE2, 0xE2, 0xE2 }, StepThenHoldEasingFunction());
            // SemiTransparentAlmostGainsboro_F9E2E2E2
            result.InsertKeyFrame(0.0967741907F, { 0xF9, 0xE2, 0xE2, 0xE2 }, HoldThenStepEasingFunction());
            // SemiTransparentWhite
            result.InsertKeyFrame(0.139784947F, { 0xF9, 0xFF, 0xFF, 0xFF }, CubicBezierEasingFunction_0());
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: C4
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_White_to_AlmostGainsboro_FFE2E2E2_0()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // White
            result.InsertKeyFrame(0.54838711F, { 0xFF, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // AlmostGainsboro_FFE2E2E2
            result.InsertKeyFrame(0.602150559F, { 0xFF, 0xE2, 0xE2, 0xE2 }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: C5
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_White_to_AlmostGainsboro_FFE2E2E2_1()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // White
            result.InsertKeyFrame(0.860215068F, { 0xFF, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // AlmostGainsboro_FFE2E2E2
            result.InsertKeyFrame(0.913978517F, { 0xFF, 0xE2, 0xE2, 0xE2 }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: C3
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_White_to_White()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // White
            result.InsertKeyFrame(0.193548381F, { 0xFF, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // AlmostTomato_FFF73D3D
            result.InsertKeyFrame(0.236559138F, { 0xFF, 0xF7, 0x3D, 0x3D }, _cubicBezierEasingFunction_0);
            // AlmostTomato_FFF73D3D
            result.InsertKeyFrame(0.720430136F, { 0xFF, 0xF7, 0x3D, 0x3D }, _cubicBezierEasingFunction_0);
            // White
            result.InsertKeyFrame(0.774193525F, { 0xFF, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_AlmostGainsboro_FFE2E2E2_to_White()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostGainsboro_FFE2E2E2_to_White(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_SemiTransparentAlmostGainsboro_F9E2E2E2_to_SemiTransparentWhite()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_SemiTransparentAlmostGainsboro_F9E2E2E2_to_SemiTransparentWhite(), RootProgress());
            return result;
        }

        // - - Layer aggregator
        // - Layer: C4
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_White_to_AlmostGainsboro_FFE2E2E2_0()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_White_to_AlmostGainsboro_FFE2E2E2_0(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C5
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_White_to_AlmostGainsboro_FFE2E2E2_1()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_White_to_AlmostGainsboro_FFE2E2E2_1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C3
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_White_to_White()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_White_to_White(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Scale:0.5,0.5, Offset:<75, 75>
        CompositionColorBrush ColorBrush_AlmostGainsboro_FFE2E2E2()
        {
            return _c.CreateColorBrush({ 0xFF, 0xE2, 0xE2, 0xE2 });
        }

        // - - Layer aggregator
        // Transforms: Pin 1 Offset:<61.385, -27.617>
        CompositionColorBrush ColorBrush_AlmostTomato_FFF73D3D()
        {
            return _c.CreateColorBrush({ 0xFF, 0xF7, 0x3D, 0x3D });
        }

        // - - Layer aggregator
        // Transforms: Pin 2 Offset:<61.385, -27.617>
        CompositionColorBrush ColorBrush_White()
        {
            return _c.CreateColorBrush({ 0xFF, 0xFF, 0xFF, 0xFF });
        }

        // Layer aggregator
        // Layer: C3
        CompositionContainerShape ContainerShape_0()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Ellipse 1
            result.Shapes().Append(SpriteShape_3());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_0(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: C4
        CompositionContainerShape ContainerShape_1()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Ellipse 1
            result.Shapes().Append(SpriteShape_4());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_1(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: C5
        CompositionContainerShape ContainerShape_2()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Ellipse 1
            result.Shapes().Append(SpriteShape_5());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_2(), _rootProgress);
            return result;
        }

        // Layer aggregator
        CompositionContainerShape ContainerShape_3()
        {
            const auto result = _c.CreateContainerShape();
            result.CenterPoint({ 60.0F, 60.0F });
            result.Scale({ 0.256500006F, 0.256500006F });
            const auto shapes = result.Shapes();
            // Transforms: Pin 1 Offset:<61.385, -27.617>
            shapes.Append(SpriteShape_6());
            // Transforms: Pin 2 Offset:<61.385, -27.617>
            shapes.Append(SpriteShape_7());
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_5(), _rootProgress);
            return result;
        }

        // Ellipse Path 1.EllipseGeometry
        CompositionEllipseGeometry Ellipse_4p447()
        {
            const auto result = _ellipse_4p447 = _c.CreateEllipseGeometry();
            result.Radius({ 4.44700003F, 4.44700003F });
            return result;
        }

        // - - Layer aggregator
        // - Layer: C3
        // ShapeGroup: Ellipse 1
        // Ellipse Path 1.EllipseGeometry
        CompositionEllipseGeometry Ellipse_8p047()
        {
            const auto result = _c.CreateEllipseGeometry();
            result.Radius({ 8.04699993F, 8.04699993F });
            return result;
        }

        // - Layer aggregator
        // Scale:0.5,0.5, Offset:<75, 75>
        CompositionPathGeometry PathGeometry_0()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0())));
        }

        // - - Layer aggregator
        // Transforms: Pin 1 Offset:<61.385, -27.617>
        CompositionPathGeometry PathGeometry_1()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1())));
        }

        // - - Layer aggregator
        // Transforms: Pin 2 Offset:<61.385, -27.617>
        CompositionPathGeometry PathGeometry_2()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2())));
        }

        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_0()
        {
            // Offset:<75, 75>, Scale:<0.5, 0.5>
            const auto result = CreateSpriteShape(PathGeometry_0(), { 0.5F, 0.0F, 0.0F, 0.5F, 75.0F, 75.0F });
            result.StrokeBrush(ColorBrush_AlmostGainsboro_FFE2E2E2());
            result.StrokeMiterLimit(2.0F);
            return result;
        }

        // Layer aggregator
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_1()
        {
            const auto result = _c.CreateSpriteShape(Ellipse_4p447());
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_SemiTransparentAlmostGainsboro_F9E2E2E2_to_SemiTransparentWhite());
            result.StartAnimation(L"Offset", OffsetVector2Animation_0());
            const auto controller = result.TryGetAnimationController(L"Offset");
            controller.Pause();
            BindProperty(controller, L"Progress", L"(_.Progress*0.6940299)+0.3059702", L"_", _root);
            return result;
        }

        // Layer aggregator
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_2()
        {
            const auto result = _c.CreateSpriteShape(_ellipse_4p447);
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_AlmostGainsboro_FFE2E2E2_to_White());
            result.StartAnimation(L"Offset", OffsetVector2Animation_1());
            const auto controller = result.TryGetAnimationController(L"Offset");
            controller.Pause();
            BindProperty(controller, L"Progress", L"(_.Progress*0.8773585)+0.1226415", L"_", _root);
            return result;
        }

        // - Layer aggregator
        // Layer: C3
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_3()
        {
            const auto result = _c.CreateSpriteShape(Ellipse_8p047());
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_White_to_White());
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_2(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: C4
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_4()
        {
            const auto result = _c.CreateSpriteShape(_ellipse_4p447);
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_White_to_AlmostGainsboro_FFE2E2E2_0());
            result.StartAnimation(L"Offset", OffsetVector2Animation_3());
            const auto controller = result.TryGetAnimationController(L"Offset");
            controller.Pause();
            BindProperty(controller, L"Progress", L"_.Progress*0.8857143", L"_", _root);
            return result;
        }

        // - Layer aggregator
        // Layer: C5
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_5()
        {
            const auto result = _c.CreateSpriteShape(_ellipse_4p447);
            result.Scale({ 0.5F, 0.5F });
            result.FillBrush(AnimatedColorBrush_White_to_AlmostGainsboro_FFE2E2E2_1());
            result.StartAnimation(L"Offset", OffsetVector2Animation_4());
            const auto controller = result.TryGetAnimationController(L"Offset");
            controller.Pause();
            BindProperty(controller, L"Progress", L"_.Progress*0.6940299", L"_", _root);
            return result;
        }

        // - Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_6()
        {
            // Offset:<61.385, -27.617>
            const auto result = CreateSpriteShape(PathGeometry_1(), { 1.0F, 0.0F, 0.0F, 1.0F, 61.3849983F, -27.6170006F }, ColorBrush_AlmostTomato_FFF73D3D());
            return result;
        }

        // - Layer aggregator
        // Path 2
        CompositionSpriteShape SpriteShape_7()
        {
            // Offset:<61.385, -27.617>
            const auto result = CreateSpriteShape(PathGeometry_2(), { 1.0F, 0.0F, 0.0F, 1.0F, 61.3849983F, -27.6170006F }, ColorBrush_White());
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.209999993F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_2()
        {
            return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.790000021F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 150.0F, 150.0F });
            const auto shapes = result.Shapes();
            // Scale:0.5,0.5, Offset:<75, 75>
            shapes.Append(SpriteShape_0());
            // ShapeGroup: Ellipse 1
            shapes.Append(SpriteShape_1());
            // ShapeGroup: Ellipse 1
            shapes.Append(SpriteShape_2());
            // Layer: C3
            shapes.Append(ContainerShape_0());
            // Layer: C4
            shapes.Append(ContainerShape_1());
            // Layer: C5
            shapes.Append(ContainerShape_2());
            shapes.Append(ContainerShape_3());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.402985066F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - Layer aggregator
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.509433985F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C3
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_2()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.193548381F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.774193525F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C4
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_3()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.485714287F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(1.0F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C5
        // ShapeGroup: Ellipse 1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_4()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 136.5F, 102.286003F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.597014904F, { 136.5F, 102.286003F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(1.0F, { 18.5F, 102.286003F }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - Layer aggregator
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_5()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 17.1450005F, 41.973999F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0860215053F, { 17.1450005F, 41.973999F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.139784947F, { 17.1450005F, 26.9740009F }, _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F }));
            result.InsertKeyFrame(0.215053767F, { 17.1450005F, 41.973999F }, _c.CreateCubicBezierEasingFunction({ 1.0F, 0.0F }, { 0.833000004F, 0.833000004F }));
            result.InsertKeyFrame(0.408602148F, { 17.1450005F, 41.973999F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.483870953F, { 17.1450005F, 26.9740009F }, CubicBezierEasingFunction_1());
            result.InsertKeyFrame(0.559139788F, { 17.1450005F, 41.973999F }, CubicBezierEasingFunction_2());
            result.InsertKeyFrame(0.763440847F, { 17.1450005F, 41.973999F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.838709652F, { 17.1450005F, 26.9740009F }, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.913978517F, { 17.1450005F, 41.973999F }, _cubicBezierEasingFunction_2);
            return result;
        }

        // - Layer aggregator
        // Layer: C3
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.193548381F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: C4
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.54838711F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: C5
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.860215068F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        PinJump_AnimatedVisual_UAPv7(Compositor compositor)
            : _c{compositor}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 150.0F, 150.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
        }
    };

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual PinJump::TryCreateAnimatedVisual(
        Compositor const& compositor,
        IInspectable& diagnostics)
    {
        diagnostics = nullptr;

        if (PinJump_AnimatedVisual_UAPv11::IsRuntimeCompatible())
        {
            return winrt::make<PinJump_AnimatedVisual_UAPv11>(compositor);
        }

        if (PinJump_AnimatedVisual_UAPv7::IsRuntimeCompatible())
        {
            return winrt::make<PinJump_AnimatedVisual_UAPv7>(compositor);
        }

        return nullptr;
    }

    double PinJump::FrameToProgress(double frameNumber)
    {
        return frameNumber / 93.0;
    }

    winrt::Windows::Foundation::Collections::IMapView<hstring, double> PinJump::Markers()
    {
        return winrt::single_threaded_map<winrt::hstring, double>(
            std::map<winrt::hstring, double>
            {
            }
        ).GetView();
    }

    void PinJump::SetColorProperty(hstring const&, Color)
    {
    }

    void PinJump::SetScalarProperty(hstring const&, double)
    {
    }
} // end namespace
