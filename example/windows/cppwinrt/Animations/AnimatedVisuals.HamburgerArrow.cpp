//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.90+ga9eb6fa111
//       
//       Command:
//           LottieGen -InterfaceBaseName Microsoft.UI.Xaml.Controls.IAnimatedVisual -Language Cppwinrt -WinUIVersion 2.4 -InputFile HamburgerArrow.json
//       
//       Input file:
//           HamburgerArrow.json (6209 bytes created 20:50-08:00 Dec 28 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    72 |
// |--------------------------+-------|
// | Expression animators     |     7 |
// | KeyFrame animators       |     7 |
// | Reference parameters     |     7 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "pch.h"
#include "AnimatedVisuals.HamburgerArrow.h"
#include "AnimatedVisuals.HamburgerArrow.g.cpp"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::AnimatedVisuals::implementation
{
    class CanvasGeometry : public winrt::implements<CanvasGeometry,
        IGeometrySource2D,
        ::ABI::Windows::Graphics::IGeometrySource2DInterop>
    {
        winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

    public:
        CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
            : _geometry{ geometry }
        { }

        // IGeometrySource2D.
        winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
        {
            _geometry.copy_to(value);
            return S_OK;
        }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
        {
            return E_NOTIMPL;
        }
    };
    class HamburgerArrow_AnimatedVisual : public winrt::implements<HamburgerArrow_AnimatedVisual,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 60000000L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionColorBrush _colorBrush_AlmostDarkSlateBlue_FF6628B2{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_3{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        ScalarKeyFrameAnimation _trimStartScalarAnimation_0_to_0{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateScalarKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, float2 initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateVector2KeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            return result;
        }

        // - - - - Layer aggregator
        // - - Transforms: A3
        winrt::com_ptr<CanvasGeometry> Geometry_0()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -34.0F, -23.5F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 35.0F, -23.5F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - Transforms: A2 Offset:<59.5, 60.625>
        winrt::com_ptr<CanvasGeometry> Geometry_1()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -34.0F, 0.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 35.0F, 0.0F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - Transforms: A1
        winrt::com_ptr<CanvasGeometry> Geometry_2()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -34.0F, 22.25F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 35.0F, 22.25F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        CompositionColorBrush ColorBrush_AlmostDarkSlateBlue_FF6628B2()
        {
            return _colorBrush_AlmostDarkSlateBlue_FF6628B2 = _c.CreateColorBrush({ 0xFF, 0x66, 0x28, 0xB2 });
        }

        // Layer aggregator
        CompositionContainerShape ContainerShape()
        {
            const auto result = _c.CreateContainerShape();
            result.CenterPoint({ 60.0F, 60.0F });
            result.Offset({ 140.5F, 89.375F });
            const auto shapes = result.Shapes();
            // Transforms: A3
            shapes.Append(SpriteShape_0());
            // Transforms: A2 Offset:<59.5, 60.625>
            shapes.Append(SpriteShape_1());
            // Transforms: A1
            shapes.Append(SpriteShape_2());
            StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_360(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // Transforms: A3
        CompositionPathGeometry PathGeometry_0()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0())));
            StartProgressBoundAnimation(result, L"TrimStart", TrimStartScalarAnimation_0_to_0(), RootProgress());
            return result;
        }

        // - - Layer aggregator
        // Transforms: A2 Offset:<59.5, 60.625>
        CompositionPathGeometry PathGeometry_1()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1())));
        }

        // - - Layer aggregator
        // Transforms: A1
        CompositionPathGeometry PathGeometry_2()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_2())));
            StartProgressBoundAnimation(result, L"TrimStart", _trimStartScalarAnimation_0_to_0, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_0()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_0());
            result.CenterPoint({ 35.0F, -23.5F });
            result.StrokeBrush(ColorBrush_AlmostDarkSlateBlue_FF6628B2());
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(10.0F);
            StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_0(), _rootProgress);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_0(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_1()
        {
            // Offset:<59.5, 60.625>
            const auto result = CreateSpriteShape(PathGeometry_1(), { 1.0F, 0.0F, 0.0F, 1.0F, 59.5F, 60.625F });
            result.StrokeBrush(_colorBrush_AlmostDarkSlateBlue_FF6628B2);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(10.0F);
            return result;
        }

        // - Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_2()
        {
            const auto result = _c.CreateSpriteShape(PathGeometry_2());
            result.CenterPoint({ 35.0F, 22.25F });
            result.StrokeBrush(_colorBrush_AlmostDarkSlateBlue_FF6628B2);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(10.0F);
            StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0_1(), _rootProgress);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_1(), _rootProgress);
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.634000003F, 0.0F }, { 0.560000002F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_2()
        {
            return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.600000024F, 0.0F }, { 0.340999991F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_3()
        {
            return _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 0.0F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        // - - Layer aggregator
        // Transforms: A3
        // Rotation
        ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.105555557F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.183333337F, 45.0F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.644444466F, 45.0F, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.74444443F, 0.0F, _cubicBezierEasingFunction_2);
            return result;
        }

        // - - Layer aggregator
        // Transforms: A1
        // Rotation
        ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.105555557F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.183333337F, -45.0F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.644444466F, -45.0F, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.74444443F, 0.0F, _cubicBezierEasingFunction_2);
            return result;
        }

        // - Layer aggregator
        // Rotation
        ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_360()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.105555557F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.183333337F, 190.699997F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.224999994F, 176.100006F, _c.CreateCubicBezierEasingFunction({ 0.398000002F, 0.0F }, { 0.561999977F, 1.0F }));
            result.InsertKeyFrame(0.305555552F, 181.800003F, _c.CreateCubicBezierEasingFunction({ 0.310000002F, 0.0F }, { 0.684000015F, 1.0F }));
            result.InsertKeyFrame(0.394444436F, 180.0F, _c.CreateCubicBezierEasingFunction({ 0.437999994F, 0.0F }, { 0.684000015F, 1.0F }));
            result.InsertKeyFrame(0.616666675F, 180.0F, _c.CreateCubicBezierEasingFunction({ 0.38499999F, 0.38499999F }, { 0.73299998F, 0.73299998F }));
            result.InsertKeyFrame(0.644444466F, 167.899994F, _c.CreateCubicBezierEasingFunction({ 0.405999988F, 0.0F }, { 0.0920000002F, 1.0F }));
            result.InsertKeyFrame(0.74444443F, 363.0F, _cubicBezierEasingFunction_2);
            result.InsertKeyFrame(0.783333361F, 360.0F, _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.462000012F, 1.0F }));
            return result;
        }

        // TrimStart
        ScalarKeyFrameAnimation TrimStartScalarAnimation_0_to_0()
        {
            const auto result = _trimStartScalarAnimation_0_to_0 = CreateScalarKeyFrameAnimation(0.0F, 0.0F, StepThenHoldEasingFunction());
            result.InsertKeyFrame(0.105555557F, 0.0F, HoldThenStepEasingFunction());
            result.InsertKeyFrame(0.183333337F, 0.25999999F, CubicBezierEasingFunction_0());
            result.InsertKeyFrame(0.644444466F, 0.25999999F, CubicBezierEasingFunction_1());
            result.InsertKeyFrame(0.74444443F, 0.0F, CubicBezierEasingFunction_2());
            return result;
        }

        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 400.0F, 300.0F });
            result.Shapes().Append(ContainerShape());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        // - - Layer aggregator
        // Transforms: A3
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 59.5F, 60.625F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.105555557F, { 59.5F, 60.625F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.183333337F, { 61.2000008F, 87.5449982F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.644444466F, { 61.2000008F, 87.5449982F }, CubicBezierEasingFunction_3());
            result.InsertKeyFrame(0.74444443F, { 59.5F, 60.625F }, _cubicBezierEasingFunction_2);
            return result;
        }

        // - - Layer aggregator
        // Transforms: A1
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 59.5F, 60.625F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.105555557F, { 59.5F, 60.625F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.183333337F, { 61.2000008F, 34.8050003F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.644444466F, { 61.2000008F, 34.8050003F }, _cubicBezierEasingFunction_3);
            result.InsertKeyFrame(0.74444443F, { 59.5F, 60.625F }, _cubicBezierEasingFunction_2);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        HamburgerArrow_AnimatedVisual(Compositor compositor)
            : _c{compositor}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 400.0F, 300.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
        }
    };

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual HamburgerArrow::TryCreateAnimatedVisual(
        Compositor const& compositor,
        IInspectable& diagnostics)
    {
        diagnostics = nullptr;

        if (HamburgerArrow_AnimatedVisual::IsRuntimeCompatible())
        {
            return winrt::make<HamburgerArrow_AnimatedVisual>(compositor);
        }

        return nullptr;
    }

    double HamburgerArrow::FrameToProgress(double frameNumber)
    {
        return frameNumber / 180.0;
    }

    winrt::Windows::Foundation::Collections::IMapView<hstring, double> HamburgerArrow::Markers()
    {
        return winrt::single_threaded_map<winrt::hstring, double>(
            std::map<winrt::hstring, double>
            {
            }
        ).GetView();
    }

    void HamburgerArrow::SetColorProperty(hstring const&, Color)
    {
    }

    void HamburgerArrow::SetScalarProperty(hstring const&, double)
    {
    }
} // end namespace
