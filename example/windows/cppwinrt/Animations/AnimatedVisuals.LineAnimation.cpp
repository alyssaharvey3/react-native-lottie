//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.90+ga9eb6fa111
//       
//       Command:
//           LottieGen -InterfaceBaseName Microsoft.UI.Xaml.Controls.IAnimatedVisual -Language Cppwinrt -WinUIVersion 2.4 -InputFile LineAnimation.json
//       
//       Input file:
//           LineAnimation.json (71306 bytes created 20:50-08:00 Dec 28 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v11 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |           440 |          358 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            69 |           53 |
// | KeyFrame animators       |            57 |           41 |
// | Reference parameters     |            69 |           53 |
// | Expression operations    |             0 |            0 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             8 |            8 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |            13 |           13 |
// | PathKeyFrameAnimations   |            16 |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             5 |            5 |
// | CompositionSpriteShapes  |            27 |           27 |
// |--------------------------+---------------+--------------|
// | Brushes                  |            10 |           10 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
#include "pch.h"
#include "AnimatedVisuals.LineAnimation.h"
#include "AnimatedVisuals.LineAnimation.g.cpp"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::AnimatedVisuals::implementation
{
    class CanvasGeometry : public winrt::implements<CanvasGeometry,
        IGeometrySource2D,
        ::ABI::Windows::Graphics::IGeometrySource2DInterop>
    {
        winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

    public:
        CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
            : _geometry{ geometry }
        { }

        // IGeometrySource2D.
        winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
        {
            _geometry.copy_to(value);
            return S_OK;
        }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
        {
            return E_NOTIMPL;
        }
    };
    class LineAnimation_AnimatedVisual_UAPv11 : public winrt::implements<LineAnimation_AnimatedVisual_UAPv11,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 52666666L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionColorBrush _animatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1{ nullptr };
        CompositionColorBrush _animatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1{ nullptr };
        CompositionColorBrush _animatedColorBrush_TransparentWhite_to_TransparentWhite{ nullptr };
        CompositionColorBrush _animatedColorBrush_White_to_TransparentWhite{ nullptr };
        CompositionColorBrush _colorBrush_AlmostDarkTurquoise_FF00D1C1{ nullptr };
        CompositionColorBrush _colorBrush_White{ nullptr };
        CompositionPath _path_00{ nullptr };
        CompositionPath _path_01{ nullptr };
        CompositionPath _path_02{ nullptr };
        CompositionPath _path_03{ nullptr };
        CompositionPath _path_04{ nullptr };
        CompositionPath _path_05{ nullptr };
        CompositionPath _path_06{ nullptr };
        CompositionPath _path_07{ nullptr };
        CompositionPath _path_08{ nullptr };
        CompositionPath _path_09{ nullptr };
        CompositionPath _path_10{ nullptr };
        CompositionPath _path_11{ nullptr };
        CompositionPath _path_12{ nullptr };
        CompositionPath _path_13{ nullptr };
        CompositionPath _path_14{ nullptr };
        CompositionPath _path_15{ nullptr };
        CompositionPath _path_16{ nullptr };
        CompositionPath _path_17{ nullptr };
        CompositionPath _path_18{ nullptr };
        CompositionPath _path_19{ nullptr };
        CompositionPath _path_20{ nullptr };
        CompositionPath _path_21{ nullptr };
        CompositionPath _path_22{ nullptr };
        CompositionPath _path_23{ nullptr };
        CompositionPath _path_24{ nullptr };
        CompositionPath _path_25{ nullptr };
        CompositionPath _path_26{ nullptr };
        CompositionPath _path_27{ nullptr };
        CompositionPath _path_28{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_00{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_01{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_02{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_03{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_04{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_05{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_06{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_07{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_08{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_09{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_10{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_11{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_12{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateColorKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InterpolationColorSpace(CompositionColorSpace::Rgb);
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        PathKeyFrameAnimation CreatePathKeyFrameAnimation(float initialProgress, CompositionPath initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreatePathKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateScalarKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, float2 initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateVector2KeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix, CompositionBrush fillBrush)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            result.FillBrush(fillBrush);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_000()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 2.796F, 69.3069992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 2.796F, 69.3069992F }, { 2.77699995F, 69.7890015F }, { 2.77699995F, 69.7890015F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_001()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 22.2730007F, 66.689003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 22.2730007F, 66.689003F }, { 22.1399994F, 70.0230026F }, { 22.1399994F, 70.0230026F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_002()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 80.0859985F, 66.689003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 80.0859985F, 66.689003F }, { 80.0859985F, 80.3560028F }, { 80.0859985F, 80.3560028F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_003()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 7.69299984F, 88.5899963F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 7.69299984F, 88.5899963F }, { 7.71600008F, 88.6569977F }, { 7.71600008F, 88.6569977F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_004()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -3.74900007F, 69.3069992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -3.74900007F, 69.3069992F }, { -3.76799989F, 69.7890015F }, { -3.76799989F, 69.7890015F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_005()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -22.9459991F, 66.689003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -22.9459991F, 66.689003F }, { -23.0799999F, 70.0230026F }, { -23.0799999F, 70.0230026F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_006()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -80.3840027F, 66.689003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -80.3840027F, 66.689003F }, { -80.3840027F, 80.3560028F }, { -80.3840027F, 80.3560028F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_007()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -4.27699995F, 88.5449982F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -4.27699995F, 88.5449982F }, { -4.25299978F, 88.6119995F }, { -4.25299978F, 88.6119995F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_008()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 3.90400004F, 67.0790024F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 3.90400004F, 67.0790024F }, { 3.90499997F, 68.3720016F }, { 3.90499997F, 68.3720016F } });
            sink->AddBezier({ { 3.90499997F, 68.875F }, { 3.49799991F, 69.2829971F }, { 2.99499989F, 69.2829971F } });
            sink->AddBezier({ { 2.99499989F, 69.2829971F }, { -3.90400004F, 69.2829971F }, { -3.90400004F, 69.2829971F } });
            sink->AddBezier({ { -4.40700006F, 69.2829971F }, { -4.81500006F, 68.875F }, { -4.81500006F, 68.3720016F } });
            sink->AddBezier({ { -4.81500006F, 68.3720016F }, { -4.81599998F, 67.0790024F }, { -4.81599998F, 67.0790024F } });
            sink->AddBezier({ { -4.81599998F, 67.0790024F }, { -4.76399994F, 66.6050034F }, { -4.76399994F, 66.6050034F } });
            sink->AddBezier({ { -4.76399994F, 66.6050034F }, { -4.75899982F, 65.7949982F }, { -4.75899982F, 65.7949982F } });
            sink->AddBezier({ { -4.75899982F, 65.0800018F }, { -4.17799997F, 64.5F }, { -3.46300006F, 64.5F } });
            sink->AddBezier({ { -3.46300006F, 64.5F }, { 2.54999995F, 64.5F }, { 2.54999995F, 64.5F } });
            sink->AddBezier({ { 3.2650001F, 64.5F }, { 3.84599996F, 65.0800018F }, { 3.84599996F, 65.7949982F } });
            sink->AddBezier({ { 3.84599996F, 65.7949982F }, { 3.83999991F, 66.6050034F }, { 3.83999991F, 66.6050034F } });
            sink->AddBezier({ { 3.83999991F, 66.6050034F }, { 3.90400004F, 67.0790024F }, { 3.90400004F, 67.0790024F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_009()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 29.9279995F, 51.2970009F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 29.9279995F, 51.2970009F }, { 29.9379997F, 60.2299995F }, { 29.9379997F, 60.2299995F } });
            sink->AddBezier({ { 29.9379997F, 63.7060013F }, { 27.1210003F, 66.5220032F }, { 23.6450005F, 66.5220032F } });
            sink->AddBezier({ { 23.6450005F, 66.5220032F }, { -24.0200005F, 66.5220032F }, { -24.0200005F, 66.5220032F } });
            sink->AddBezier({ { -27.4950008F, 66.5220032F }, { -30.3120003F, 63.7060013F }, { -30.3120003F, 60.2299995F } });
            sink->AddBezier({ { -30.3120003F, 60.2299995F }, { -30.3220005F, 51.2970009F }, { -30.3220005F, 51.2970009F } });
            sink->AddBezier({ { -30.3220005F, 51.2970009F }, { -29.9619999F, 48.0219994F }, { -29.9619999F, 48.0219994F } });
            sink->AddBezier({ { -29.9619999F, 48.0219994F }, { -29.9239998F, 42.4280014F }, { -29.9239998F, 42.4280014F } });
            sink->AddBezier({ { -29.9239998F, 37.4850006F }, { -25.9160004F, 33.4780006F }, { -20.9729996F, 33.4780006F } });
            sink->AddBezier({ { -20.9729996F, 33.4780006F }, { 20.5760002F, 33.4780006F }, { 20.5760002F, 33.4780006F } });
            sink->AddBezier({ { 25.5189991F, 33.4780006F }, { 29.5259991F, 37.4850006F }, { 29.5259991F, 42.4280014F } });
            sink->AddBezier({ { 29.5259991F, 42.4280014F }, { 29.4880009F, 48.0219994F }, { 29.4880009F, 48.0219994F } });
            sink->AddBezier({ { 29.4880009F, 48.0219994F }, { 29.9279995F, 51.2970009F }, { 29.9279995F, 51.2970009F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_010()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 87.75F, 32.2970009F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 87.75F, 32.2970009F }, { 87.75F, 60.2299995F }, { 87.75F, 60.2299995F } });
            sink->AddBezier({ { 87.75F, 63.7060013F }, { 84.9329987F, 66.5220032F }, { 81.4570007F, 66.5220032F } });
            sink->AddBezier({ { 81.4570007F, 66.5220032F }, { -81.4570007F, 66.5220032F }, { -81.4570007F, 66.5220032F } });
            sink->AddBezier({ { -84.9319992F, 66.5220032F }, { -87.75F, 63.7060013F }, { -87.75F, 60.2299995F } });
            sink->AddBezier({ { -87.75F, 60.2299995F }, { -87.75F, 32.2970009F }, { -87.75F, 32.2970009F } });
            sink->AddBezier({ { -87.75F, 32.2970009F }, { -59.9500008F, -19.9780006F }, { -59.9500008F, -19.9780006F } });
            sink->AddBezier({ { -59.9500008F, -19.9780006F }, { -59.9500008F, -55.3219986F }, { -59.9500008F, -55.3219986F } });
            sink->AddBezier({ { -59.9500008F, -60.2649994F }, { -55.9420013F, -64.2720032F }, { -50.9990005F, -64.2720032F } });
            sink->AddBezier({ { -50.9990005F, -64.2720032F }, { 50.5499992F, -64.2720032F }, { 50.5499992F, -64.2720032F } });
            sink->AddBezier({ { 55.493F, -64.2720032F }, { 59.5F, -60.2649994F }, { 59.5F, -55.3219986F } });
            sink->AddBezier({ { 59.5F, -55.3219986F }, { 59.5F, -19.9780006F }, { 59.5F, -19.9780006F } });
            sink->AddBezier({ { 59.5F, -19.9780006F }, { 87.75F, 32.2970009F }, { 87.75F, 32.2970009F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_011()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 27.0F, 53.8959999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 27.0F, 53.8959999F }, { 27.0F, 82.3280029F }, { 27.0F, 82.3280029F } });
            sink->AddBezier({ { 27.0F, 85.8040009F }, { 24.1830006F, 88.6210022F }, { 20.7070007F, 88.6210022F } });
            sink->AddBezier({ { 20.7070007F, 88.6210022F }, { -18.9570007F, 88.7829971F }, { -18.9570007F, 88.7829971F } });
            sink->AddBezier({ { -22.4319992F, 88.7829971F }, { -25.25F, 85.9660034F }, { -25.25F, 82.4899979F } });
            sink->AddBezier({ { -25.25F, 82.4899979F }, { -25.25F, 54.0579987F }, { -25.25F, 54.0579987F } });
            sink->AddBezier({ { -25.25F, 54.0579987F }, { -25.7000008F, 37.632F }, { -25.7000008F, 37.632F } });
            sink->AddBezier({ { -25.7000008F, 37.632F }, { -25.8999996F, 26.5380001F }, { -25.8999996F, 26.5380001F } });
            sink->AddBezier({ { -25.8999996F, 21.5949993F }, { -21.8920002F, 17.5869999F }, { -16.9489994F, 17.5869999F } });
            sink->AddBezier({ { -16.9489994F, 17.5869999F }, { 17.3500004F, 17.9400005F }, { 17.3500004F, 17.9400005F } });
            sink->AddBezier({ { 22.2929993F, 17.9400005F }, { 26.2999992F, 21.948F }, { 26.2999992F, 26.8910007F } });
            sink->AddBezier({ { 26.2999992F, 26.8910007F }, { 26.5F, 37.9850006F }, { 26.5F, 37.9850006F } });
            sink->AddBezier({ { 26.5F, 37.9850006F }, { 27.0F, 53.8959999F }, { 27.0F, 53.8959999F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_012()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -4.81799984F, 67.0820007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -4.81799984F, 67.0820007F }, { 3.90300012F, 67.0820007F }, { 3.90300012F, 67.0820007F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_013()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -30.3320007F, 51.3139992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -30.3320007F, 51.3139992F }, { 29.9179993F, 51.3139992F }, { 29.9179993F, 51.3139992F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_014()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -87.7600021F, 32.3139992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -87.7600021F, 32.3139992F }, { 87.7399979F, 32.3139992F }, { 87.7399979F, 32.3139992F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_015()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -25.5389996F, 47.1269989F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -25.5389996F, 47.1269989F }, { 26.9610004F, 47.1269989F }, { 26.9610004F, 47.1269989F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_016()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 3.83999991F, 66.6009979F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 3.83999991F, 66.6009979F }, { -4.76499987F, 66.6009979F }, { -4.76499987F, 66.6009979F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_017()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 29.4860001F, 47.9910011F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 29.4860001F, 47.9910011F }, { -29.9640007F, 47.9910011F }, { -29.9640007F, 47.9910011F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_018()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 59.4980011F, -20.0090008F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 59.4980011F, -20.0090008F }, { -59.9519997F, -20.0090008F }, { -59.9519997F, -20.0090008F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_019()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 25.9960003F, 28.9820004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 25.9960003F, 28.9820004F }, { -26.4540005F, 28.9820004F }, { -26.4540005F, 28.9820004F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_020()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 27.8439999F, 22.9839993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 27.8439999F, 22.9839993F }, { 12.4060001F, 22.9839993F }, { 12.4060001F, 22.9839993F } });
            sink->AddBezier({ { 9.54300022F, 22.9839993F }, { 7.22100019F, 20.6620007F }, { 7.22100019F, 17.7989998F } });
            sink->AddBezier({ { 7.22100019F, 17.7989998F }, { 7.22100019F, 4.68499994F }, { 7.22100019F, 4.68499994F } });
            sink->AddBezier({ { 7.22100019F, 1.82200003F }, { 9.54300022F, -0.5F }, { 12.4060001F, -0.5F } });
            sink->AddBezier({ { 12.4060001F, -0.5F }, { 27.8439999F, -0.5F }, { 27.8439999F, -0.5F } });
            sink->AddBezier({ { 30.7070007F, -0.5F }, { 33.0289993F, 1.82200003F }, { 33.0289993F, 4.68499994F } });
            sink->AddBezier({ { 33.0289993F, 4.68499994F }, { 33.0289993F, 17.7989998F }, { 33.0289993F, 17.7989998F } });
            sink->AddBezier({ { 33.0289993F, 20.6620007F }, { 30.7070007F, 22.9839993F }, { 27.8439999F, 22.9839993F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_021()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 35.7709999F, -24.8659992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 35.7709999F, -24.8659992F }, { 15.7299995F, -24.8659992F }, { 15.7299995F, -24.8659992F } });
            sink->AddBezier({ { 12.0129995F, -24.8659992F }, { 9.0F, -27.8789997F }, { 9.0F, -31.5960007F } });
            sink->AddBezier({ { 9.0F, -31.5960007F }, { 9.0F, -48.6199989F }, { 9.0F, -48.6199989F } });
            sink->AddBezier({ { 9.0F, -52.3370018F }, { 12.0129995F, -55.3499985F }, { 15.7299995F, -55.3499985F } });
            sink->AddBezier({ { 15.7299995F, -55.3499985F }, { 35.7709999F, -55.3499985F }, { 35.7709999F, -55.3499985F } });
            sink->AddBezier({ { 39.487999F, -55.3499985F }, { 42.5009995F, -52.3370018F }, { 42.5009995F, -48.6199989F } });
            sink->AddBezier({ { 42.5009995F, -48.6199989F }, { 42.5009995F, -31.5960007F }, { 42.5009995F, -31.5960007F } });
            sink->AddBezier({ { 42.5009995F, -27.8789997F }, { 39.487999F, -24.8659992F }, { 35.7709999F, -24.8659992F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_022()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 35.7709999F, -16.1159992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 35.7709999F, -16.1159992F }, { 15.7299995F, -16.1159992F }, { 15.7299995F, -16.1159992F } });
            sink->AddBezier({ { 12.0129995F, -16.1159992F }, { 9.0F, -19.1289997F }, { 9.0F, -22.8460007F } });
            sink->AddBezier({ { 9.0F, -22.8460007F }, { 9.0F, -39.8699989F }, { 9.0F, -39.8699989F } });
            sink->AddBezier({ { 9.0F, -43.5870018F }, { 12.0129995F, -46.5999985F }, { 15.7299995F, -46.5999985F } });
            sink->AddBezier({ { 15.7299995F, -46.5999985F }, { 35.7709999F, -46.5999985F }, { 35.7709999F, -46.5999985F } });
            sink->AddBezier({ { 39.487999F, -46.5999985F }, { 42.5009995F, -43.5870018F }, { 42.5009995F, -39.8699989F } });
            sink->AddBezier({ { 42.5009995F, -39.8699989F }, { 42.5009995F, -22.8460007F }, { 42.5009995F, -22.8460007F } });
            sink->AddBezier({ { 42.5009995F, -19.1289997F }, { 39.487999F, -16.1159992F }, { 35.7709999F, -16.1159992F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_023()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 35.7709999F, -17.816F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 35.7709999F, -17.816F }, { 15.7299995F, -17.816F }, { 15.7299995F, -17.816F } });
            sink->AddBezier({ { 12.0129995F, -17.816F }, { 9.0F, -20.8290005F }, { 9.0F, -24.5459995F } });
            sink->AddBezier({ { 9.0F, -24.5459995F }, { 9.0F, -41.5699997F }, { 9.0F, -41.5699997F } });
            sink->AddBezier({ { 9.0F, -45.2869987F }, { 12.0129995F, -48.2999992F }, { 15.7299995F, -48.2999992F } });
            sink->AddBezier({ { 15.7299995F, -48.2999992F }, { 35.7709999F, -48.2999992F }, { 35.7709999F, -48.2999992F } });
            sink->AddBezier({ { 39.487999F, -48.2999992F }, { 42.5009995F, -45.2869987F }, { 42.5009995F, -41.5699997F } });
            sink->AddBezier({ { 42.5009995F, -41.5699997F }, { 42.5009995F, -24.5459995F }, { 42.5009995F, -24.5459995F } });
            sink->AddBezier({ { 42.5009995F, -20.8290005F }, { 39.487999F, -17.816F }, { 35.7709999F, -17.816F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_024()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 35.7709999F, -15.5159998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 35.7709999F, -15.5159998F }, { 15.7299995F, -15.5159998F }, { 15.7299995F, -15.5159998F } });
            sink->AddBezier({ { 12.0129995F, -15.5159998F }, { 9.0F, -18.5289993F }, { 9.0F, -22.2460003F } });
            sink->AddBezier({ { 9.0F, -22.2460003F }, { 9.0F, -39.2700005F }, { 9.0F, -39.2700005F } });
            sink->AddBezier({ { 9.0F, -42.9869995F }, { 12.0129995F, -46.0F }, { 15.7299995F, -46.0F } });
            sink->AddBezier({ { 15.7299995F, -46.0F }, { 35.7709999F, -46.0F }, { 35.7709999F, -46.0F } });
            sink->AddBezier({ { 39.487999F, -46.0F }, { 42.5009995F, -42.9869995F }, { 42.5009995F, -39.2700005F } });
            sink->AddBezier({ { 42.5009995F, -39.2700005F }, { 42.5009995F, -22.2460003F }, { 42.5009995F, -22.2460003F } });
            sink->AddBezier({ { 42.5009995F, -18.5289993F }, { 39.487999F, -15.5159998F }, { 35.7709999F, -15.5159998F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_025()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 10.8380003F, 21.5340004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 10.8380003F, 21.5340004F }, { 8.8760004F, 21.5340004F }, { 8.8760004F, 21.5340004F } });
            sink->AddBezier({ { 8.51200008F, 21.5340004F }, { 8.21700001F, 21.2390003F }, { 8.21700001F, 20.875F } });
            sink->AddBezier({ { 8.21700001F, 20.875F }, { 8.21700001F, 19.2089996F }, { 8.21700001F, 19.2089996F } });
            sink->AddBezier({ { 8.21700001F, 18.8449993F }, { 8.51200008F, 18.5499992F }, { 8.8760004F, 18.5499992F } });
            sink->AddBezier({ { 8.8760004F, 18.5499992F }, { 10.8380003F, 18.5499992F }, { 10.8380003F, 18.5499992F } });
            sink->AddBezier({ { 11.2019997F, 18.5499992F }, { 11.4969997F, 18.8449993F }, { 11.4969997F, 19.2089996F } });
            sink->AddBezier({ { 11.4969997F, 19.2089996F }, { 11.4969997F, 20.875F }, { 11.4969997F, 20.875F } });
            sink->AddBezier({ { 11.4969997F, 21.2390003F }, { 11.2019997F, 21.5340004F }, { 10.8380003F, 21.5340004F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_026()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -11.4449997F, 22.9839993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -11.4449997F, 22.9839993F }, { -26.8829994F, 22.9839993F }, { -26.8829994F, 22.9839993F } });
            sink->AddBezier({ { -29.7460003F, 22.9839993F }, { -32.0680008F, 20.6620007F }, { -32.0680008F, 17.7989998F } });
            sink->AddBezier({ { -32.0680008F, 17.7989998F }, { -32.0680008F, 4.68499994F }, { -32.0680008F, 4.68499994F } });
            sink->AddBezier({ { -32.0680008F, 1.82200003F }, { -29.7460003F, -0.5F }, { -26.8829994F, -0.5F } });
            sink->AddBezier({ { -26.8829994F, -0.5F }, { -11.4449997F, -0.5F }, { -11.4449997F, -0.5F } });
            sink->AddBezier({ { -8.58199978F, -0.5F }, { -6.26000023F, 1.82200003F }, { -6.26000023F, 4.68499994F } });
            sink->AddBezier({ { -6.26000023F, 4.68499994F }, { -6.26000023F, 17.7989998F }, { -6.26000023F, 17.7989998F } });
            sink->AddBezier({ { -6.26000023F, 20.6620007F }, { -8.58199978F, 22.9839993F }, { -11.4449997F, 22.9839993F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_027()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -15.2290001F, -21.6159992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -15.2290001F, -21.6159992F }, { -35.2700005F, -21.6159992F }, { -35.2700005F, -21.6159992F } });
            sink->AddBezier({ { -38.9869995F, -21.6159992F }, { -42.0F, -24.6289997F }, { -42.0F, -28.3460007F } });
            sink->AddBezier({ { -42.0F, -28.3460007F }, { -42.0F, -45.3699989F }, { -42.0F, -45.3699989F } });
            sink->AddBezier({ { -42.0F, -49.0870018F }, { -38.9869995F, -52.0999985F }, { -35.2700005F, -52.0999985F } });
            sink->AddBezier({ { -35.2700005F, -52.0999985F }, { -15.2290001F, -52.0999985F }, { -15.2290001F, -52.0999985F } });
            sink->AddBezier({ { -11.5120001F, -52.0999985F }, { -8.4989996F, -49.0870018F }, { -8.4989996F, -45.3699989F } });
            sink->AddBezier({ { -8.4989996F, -45.3699989F }, { -8.4989996F, -28.3460007F }, { -8.4989996F, -28.3460007F } });
            sink->AddBezier({ { -8.4989996F, -24.6289997F }, { -11.5120001F, -21.6159992F }, { -15.2290001F, -21.6159992F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_028()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -15.2290001F, -16.1159992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -15.2290001F, -16.1159992F }, { -35.2700005F, -16.1159992F }, { -35.2700005F, -16.1159992F } });
            sink->AddBezier({ { -38.9869995F, -16.1159992F }, { -42.0F, -19.1289997F }, { -42.0F, -22.8460007F } });
            sink->AddBezier({ { -42.0F, -22.8460007F }, { -42.0F, -39.8699989F }, { -42.0F, -39.8699989F } });
            sink->AddBezier({ { -42.0F, -43.5870018F }, { -38.9869995F, -46.5999985F }, { -35.2700005F, -46.5999985F } });
            sink->AddBezier({ { -35.2700005F, -46.5999985F }, { -15.2290001F, -46.5999985F }, { -15.2290001F, -46.5999985F } });
            sink->AddBezier({ { -11.5120001F, -46.5999985F }, { -8.4989996F, -43.5870018F }, { -8.4989996F, -39.8699989F } });
            sink->AddBezier({ { -8.4989996F, -39.8699989F }, { -8.4989996F, -22.8460007F }, { -8.4989996F, -22.8460007F } });
            sink->AddBezier({ { -8.4989996F, -19.1289997F }, { -11.5120001F, -16.1159992F }, { -15.2290001F, -16.1159992F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_029()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -15.2290001F, -17.816F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -15.2290001F, -17.816F }, { -35.2700005F, -17.816F }, { -35.2700005F, -17.816F } });
            sink->AddBezier({ { -38.9869995F, -17.816F }, { -42.0F, -20.8290005F }, { -42.0F, -24.5459995F } });
            sink->AddBezier({ { -42.0F, -24.5459995F }, { -42.0F, -41.5699997F }, { -42.0F, -41.5699997F } });
            sink->AddBezier({ { -42.0F, -45.2869987F }, { -38.9869995F, -48.2999992F }, { -35.2700005F, -48.2999992F } });
            sink->AddBezier({ { -35.2700005F, -48.2999992F }, { -15.2290001F, -48.2999992F }, { -15.2290001F, -48.2999992F } });
            sink->AddBezier({ { -11.5120001F, -48.2999992F }, { -8.4989996F, -45.2869987F }, { -8.4989996F, -41.5699997F } });
            sink->AddBezier({ { -8.4989996F, -41.5699997F }, { -8.4989996F, -24.5459995F }, { -8.4989996F, -24.5459995F } });
            sink->AddBezier({ { -8.4989996F, -20.8290005F }, { -11.5120001F, -17.816F }, { -15.2290001F, -17.816F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_030()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -15.2290001F, -15.5159998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -15.2290001F, -15.5159998F }, { -35.2700005F, -15.5159998F }, { -35.2700005F, -15.5159998F } });
            sink->AddBezier({ { -38.9869995F, -15.5159998F }, { -42.0F, -18.5289993F }, { -42.0F, -22.2460003F } });
            sink->AddBezier({ { -42.0F, -22.2460003F }, { -42.0F, -39.2700005F }, { -42.0F, -39.2700005F } });
            sink->AddBezier({ { -42.0F, -42.9869995F }, { -38.9869995F, -46.0F }, { -35.2700005F, -46.0F } });
            sink->AddBezier({ { -35.2700005F, -46.0F }, { -15.2290001F, -46.0F }, { -15.2290001F, -46.0F } });
            sink->AddBezier({ { -11.5120001F, -46.0F }, { -8.4989996F, -42.9869995F }, { -8.4989996F, -39.2700005F } });
            sink->AddBezier({ { -8.4989996F, -39.2700005F }, { -8.4989996F, -22.2460003F }, { -8.4989996F, -22.2460003F } });
            sink->AddBezier({ { -8.4989996F, -18.5289993F }, { -11.5120001F, -15.5159998F }, { -15.2290001F, -15.5159998F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Bed
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_031()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -8.22299957F, 21.7660007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -8.22299957F, 21.7660007F }, { -10.4890003F, 21.7660007F }, { -10.4890003F, 21.7660007F } });
            sink->AddBezier({ { -10.9090004F, 21.7660007F }, { -11.25F, 21.4249992F }, { -11.25F, 21.0049992F } });
            sink->AddBezier({ { -11.25F, 21.0049992F }, { -11.25F, 19.0799999F }, { -11.25F, 19.0799999F } });
            sink->AddBezier({ { -11.25F, 18.6599998F }, { -10.9090004F, 18.3190002F }, { -10.4890003F, 18.3190002F } });
            sink->AddBezier({ { -10.4890003F, 18.3190002F }, { -8.22299957F, 18.3190002F }, { -8.22299957F, 18.3190002F } });
            sink->AddBezier({ { -7.80299997F, 18.3190002F }, { -7.46199989F, 18.6599998F }, { -7.46199989F, 19.0799999F } });
            sink->AddBezier({ { -7.46199989F, 19.0799999F }, { -7.46199989F, 21.0049992F }, { -7.46199989F, 21.0049992F } });
            sink->AddBezier({ { -7.46199989F, 21.4249992F }, { -7.80299997F, 21.7660007F }, { -8.22299957F, 21.7660007F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_032()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_033().get()->Geometry(),
                Geometry_034().get()->Geometry(),
                Geometry_035().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_033()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 218.330002F, 118.837997F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 201.669998F, 144.987F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_034()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 149.945999F, 94.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 149.945999F, 146.169006F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_035()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 78.4459991F, 116.280998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 99.197998F, 144.987F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_036()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_037().get()->Geometry(),
                Geometry_038().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_037()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 10.7010002F, -71.6009979F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 10.7010002F, -71.6009979F }, { 25.177F, -52.2669983F }, { 35.7420006F, -50.5940018F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_038()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.1829987F, -76.2480011F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.1829987F, -76.2480011F }, { 28.5319996F, -55.5999985F }, { 35.7420006F, -51.0730019F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 2+Path 1.PathGeometry
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_039()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_040().get()->Geometry(),
                Geometry_041().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Spray Bottle
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_040()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 10.7010002F, -71.6009979F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 10.7010002F, -71.6009979F }, { 21.4920006F, -77.5940018F }, { 21.4920006F, -77.5940018F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Spray Bottle
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_041()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.1150017F, -83.4980011F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.1150017F, -83.4980011F }, { 21.4920006F, -78.072998F }, { 21.4920006F, -78.072998F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_042()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_043().get()->Geometry(),
                Geometry_044().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_043()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 10.3929996F, -60.9980011F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 10.3929996F, -60.9980011F }, { 25.427F, -33.9840012F }, { 45.9099998F, -30.7409992F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_044()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.1430016F, -71.4769974F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.1430016F, -71.4769974F }, { 31.9319992F, -39.9970016F }, { 45.9099998F, -31.2199993F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 2+Path 1.PathGeometry
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_045()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_046().get()->Geometry(),
                Geometry_047().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Spray Bottle
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_046()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 10.3929996F, -62.7480011F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 10.3929996F, -62.7480011F }, { 25.427F, -35.7340012F }, { 45.9099998F, -32.4910011F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Spray Bottle
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_047()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.1430016F, -73.2269974F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.1430016F, -73.2269974F }, { 31.9319992F, -41.7470016F }, { 45.9099998F, -32.9700012F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 2+Path 1.PathGeometry
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_048()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_049().get()->Geometry(),
                Geometry_050().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Spray Bottle
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_049()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 10.5360003F, -11.9980001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 10.5360003F, -11.9980001F }, { 25.5699997F, 15.0159998F }, { 46.0530014F, 18.2590008F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Spray Bottle
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_050()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.2859993F, -22.4769993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.2859993F, -22.4769993F }, { 32.0750008F, 9.00300026F }, { 46.0530014F, 17.7800007F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_051()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -34.7280006F, 9.47000027F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -34.7280006F, 9.47000027F }, { 1.12899995F, 9.60200024F }, { 1.12899995F, 9.60200024F } });
            sink->AddBezier({ { 1.12899995F, 9.60200024F }, { 18.5990009F, 9.49499989F }, { 18.5990009F, 9.49499989F } });
            sink->AddBezier({ { 18.5990009F, 1.39300001F }, { 18.6879997F, -6.10699987F }, { 24.2000008F, -6.19700003F } });
            sink->AddBezier({ { 24.2000008F, -6.19700003F }, { 29.5849991F, -6.19700003F }, { 29.5849991F, -6.19700003F } });
            sink->AddBezier({ { 31.7689991F, -6.19700003F }, { 33.5400009F, -7.96799994F }, { 33.5400009F, -10.1520004F } });
            sink->AddBezier({ { 33.5400009F, -10.1520004F }, { 33.5400009F, -10.1520004F }, { 33.5400009F, -10.1520004F } });
            sink->AddBezier({ { 33.5400009F, -12.3360004F }, { 31.7689991F, -14.1070004F }, { 29.5849991F, -14.1070004F } });
            sink->AddBezier({ { 29.5849991F, -14.1070004F }, { -19.4729996F, -14.0109997F }, { -19.4729996F, -14.0109997F } });
            sink->AddBezier({ { -23.9759998F, -14.0109997F }, { -41.1269989F, -10.4820004F }, { -41.1269989F, -5.97900009F } });
            sink->AddBezier({ { -41.1269989F, -5.97900009F }, { -41.1269989F, -2.38700008F }, { -41.1269989F, -2.38700008F } });
            sink->AddBezier({ { -41.1269989F, -2.38700008F }, { -35.0040016F, -2.38700008F }, { -35.0040016F, -2.38700008F } });
            sink->AddBezier({ { -35.0040016F, -2.38700008F }, { -34.7280006F, 9.47000027F }, { -34.7280006F, 9.47000027F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_052()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -19.1930008F, -56.8979988F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -19.1930008F, -56.8979988F }, { 1.64100003F, -56.8979988F }, { 1.64100003F, -56.8979988F } });
            sink->AddBezier({ { 1.64100003F, -56.8979988F }, { 4.01599979F, -56.8979988F }, { 4.01599979F, -56.8979988F } });
            sink->AddBezier({ { 4.01599979F, -71.7990036F }, { 16.2619991F, -83.8769989F }, { 31.1620007F, -83.8769989F } });
            sink->AddBezier({ { 31.1620007F, -83.8769989F }, { 42.3959999F, -83.8769989F }, { 42.3959999F, -83.8769989F } });
            sink->AddBezier({ { 46.9519997F, -83.8769989F }, { 50.6459999F, -87.5709991F }, { 50.6459999F, -92.1269989F } });
            sink->AddBezier({ { 50.6459999F, -92.1269989F }, { 50.6459999F, -92.1269989F }, { 50.6459999F, -92.1269989F } });
            sink->AddBezier({ { 50.6459999F, -96.6829987F }, { 46.9519997F, -100.376999F }, { 42.3959999F, -100.376999F } });
            sink->AddBezier({ { 42.3959999F, -100.376999F }, { -25.2719994F, -100.376999F }, { -25.2719994F, -100.376999F } });
            sink->AddBezier({ { -34.6650009F, -100.376999F }, { -42.2799988F, -92.7630005F }, { -42.2799988F, -83.3700027F } });
            sink->AddBezier({ { -42.2799988F, -83.3700027F }, { -42.2799988F, -75.8769989F }, { -42.2799988F, -75.8769989F } });
            sink->AddBezier({ { -42.2799988F, -75.8769989F }, { -29.5079994F, -75.8769989F }, { -29.5079994F, -75.8769989F } });
            sink->AddBezier({ { -29.5079994F, -75.8769989F }, { -19.1930008F, -56.8979988F }, { -19.1930008F, -56.8979988F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_053()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -19.1930008F, -44.8979988F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -19.1930008F, -44.8979988F }, { 1.64100003F, -44.8979988F }, { 1.64100003F, -44.8979988F } });
            sink->AddBezier({ { 1.64100003F, -44.8979988F }, { 4.01599979F, -44.8979988F }, { 4.01599979F, -44.8979988F } });
            sink->AddBezier({ { 4.01599979F, -59.7989998F }, { 16.2619991F, -71.8769989F }, { 31.1620007F, -71.8769989F } });
            sink->AddBezier({ { 31.1620007F, -71.8769989F }, { 42.3959999F, -71.8769989F }, { 42.3959999F, -71.8769989F } });
            sink->AddBezier({ { 46.9519997F, -71.8769989F }, { 50.6459999F, -75.5709991F }, { 50.6459999F, -80.1269989F } });
            sink->AddBezier({ { 50.6459999F, -80.1269989F }, { 50.6459999F, -80.1269989F }, { 50.6459999F, -80.1269989F } });
            sink->AddBezier({ { 50.6459999F, -84.6829987F }, { 46.9519997F, -88.3769989F }, { 42.3959999F, -88.3769989F } });
            sink->AddBezier({ { 42.3959999F, -88.3769989F }, { -25.2719994F, -88.3769989F }, { -25.2719994F, -88.3769989F } });
            sink->AddBezier({ { -34.6650009F, -88.3769989F }, { -42.2799988F, -80.7630005F }, { -42.2799988F, -71.3700027F } });
            sink->AddBezier({ { -42.2799988F, -71.3700027F }, { -42.2799988F, -63.8769989F }, { -42.2799988F, -63.8769989F } });
            sink->AddBezier({ { -42.2799988F, -63.8769989F }, { -29.5079994F, -63.8769989F }, { -29.5079994F, -63.8769989F } });
            sink->AddBezier({ { -29.5079994F, -63.8769989F }, { -19.1930008F, -44.8979988F }, { -19.1930008F, -44.8979988F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_054()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -19.1930008F, -48.3359985F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -19.1930008F, -48.3359985F }, { 1.64100003F, -48.3359985F }, { 1.64100003F, -48.3359985F } });
            sink->AddBezier({ { 1.64100003F, -48.3359985F }, { 4.01599979F, -48.3359985F }, { 4.01599979F, -48.3359985F } });
            sink->AddBezier({ { 4.01599979F, -63.2369995F }, { 16.2619991F, -75.3160019F }, { 31.1620007F, -75.3160019F } });
            sink->AddBezier({ { 31.1620007F, -75.3160019F }, { 42.3959999F, -75.3160019F }, { 42.3959999F, -75.3160019F } });
            sink->AddBezier({ { 46.9519997F, -75.3160019F }, { 50.6459999F, -79.0100021F }, { 50.6459999F, -83.5660019F } });
            sink->AddBezier({ { 50.6459999F, -83.5660019F }, { 50.6459999F, -83.5660019F }, { 50.6459999F, -83.5660019F } });
            sink->AddBezier({ { 50.6459999F, -88.1220016F }, { 46.9519997F, -91.8160019F }, { 42.3959999F, -91.8160019F } });
            sink->AddBezier({ { 42.3959999F, -91.8160019F }, { -25.2719994F, -91.8160019F }, { -25.2719994F, -91.8160019F } });
            sink->AddBezier({ { -34.6650009F, -91.8160019F }, { -42.2799988F, -84.2009964F }, { -42.2799988F, -74.8079987F } });
            sink->AddBezier({ { -42.2799988F, -74.8079987F }, { -42.2799988F, -67.3160019F }, { -42.2799988F, -67.3160019F } });
            sink->AddBezier({ { -42.2799988F, -67.3160019F }, { -29.5079994F, -67.3160019F }, { -29.5079994F, -67.3160019F } });
            sink->AddBezier({ { -29.5079994F, -67.3160019F }, { -19.1930008F, -48.3359985F }, { -19.1930008F, -48.3359985F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_055()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -19.0300007F, 4.60200024F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -19.0300007F, 4.60200024F }, { 1.80299997F, 4.60200024F }, { 1.80299997F, 4.60200024F } });
            sink->AddBezier({ { 1.80299997F, 4.60200024F }, { 4.17799997F, 4.60200024F }, { 4.17799997F, 4.60200024F } });
            sink->AddBezier({ { 4.17799997F, -10.2989998F }, { 16.4249992F, -22.3770008F }, { 31.3250008F, -22.3770008F } });
            sink->AddBezier({ { 31.3250008F, -22.3770008F }, { 42.5579987F, -22.3770008F }, { 42.5579987F, -22.3770008F } });
            sink->AddBezier({ { 47.1139984F, -22.3770008F }, { 50.8079987F, -26.0709991F }, { 50.8079987F, -30.6270008F } });
            sink->AddBezier({ { 50.8079987F, -30.6270008F }, { 50.8079987F, -30.6270008F }, { 50.8079987F, -30.6270008F } });
            sink->AddBezier({ { 50.8079987F, -35.1829987F }, { 47.1139984F, -38.8769989F }, { 42.5579987F, -38.8769989F } });
            sink->AddBezier({ { 42.5579987F, -38.8769989F }, { -25.1100006F, -38.8769989F }, { -25.1100006F, -38.8769989F } });
            sink->AddBezier({ { -34.5029984F, -38.8769989F }, { -42.118F, -31.2630005F }, { -42.118F, -21.8700008F } });
            sink->AddBezier({ { -42.118F, -21.8700008F }, { -42.118F, -14.3769999F }, { -42.118F, -14.3769999F } });
            sink->AddBezier({ { -42.118F, -14.3769999F }, { -29.3460007F, -14.3769999F }, { -29.3460007F, -14.3769999F } });
            sink->AddBezier({ { -29.3460007F, -14.3769999F }, { -19.0300007F, 4.60200024F }, { -19.0300007F, 4.60200024F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_056()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 23.7810001F, -13.8240004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 23.7810001F, -13.8240004F }, { 23.6310005F, -7.24800014F }, { 23.6310005F, -7.24800014F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_057()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.1329994F, -98.3239975F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.1329994F, -98.3239975F }, { 32.1150017F, -82.7480011F }, { 32.1150017F, -82.7480011F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_058()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.0159988F, -87.8239975F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.0159988F, -87.8239975F }, { 31.9979992F, -72.2480011F }, { 31.9979992F, -72.2480011F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_059()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.0309982F, -91.0739975F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.0309982F, -91.0739975F }, { 32.0130005F, -75.4980011F }, { 32.0130005F, -75.4980011F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_060()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.0620003F, -87.8239975F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.0620003F, -87.8239975F }, { 32.0439987F, -72.2480011F }, { 32.0439987F, -72.2480011F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_061()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.2480011F, -37.5740013F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.2480011F, -37.5740013F }, { 32.2299995F, -21.9979992F }, { 32.2299995F, -21.9979992F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_062()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 9.5539999F, 88.4400024F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 9.5539999F, 88.4400024F }, { -25.1480007F, 88.2149963F }, { -25.1480007F, 88.2149963F } });
            sink->AddBezier({ { -30.6700001F, 88.2149963F }, { -35.1459999F, 83.7399979F }, { -35.1459999F, 78.2180023F } });
            sink->AddBezier({ { -35.1459999F, 78.2180023F }, { -35.5F, 63.6759987F }, { -35.5F, 63.6759987F } });
            sink->AddBezier({ { -35.5F, 60.7010002F }, { -35.3409996F, 55.9449997F }, { -35.3409996F, 55.9449997F } });
            sink->AddBezier({ { -35.3409996F, 55.9449997F }, { -35.2809982F, 47.1419983F }, { -35.2809982F, 47.1419983F } });
            sink->AddBezier({ { -35.2809982F, 47.1419983F }, { -35.4239998F, 9.47000027F }, { -35.4239998F, 9.47000027F } });
            sink->AddBezier({ { -35.4239998F, 9.47000027F }, { 18.7830009F, 9.49499989F }, { 18.7830009F, 9.49499989F } });
            sink->AddBezier({ { 18.7830009F, 9.49499989F }, { 19.0879993F, 47.125F }, { 19.0879993F, 47.125F } });
            sink->AddBezier({ { 19.0879993F, 47.125F }, { 19.1860008F, 56.0999985F }, { 19.1860008F, 56.0999985F } });
            sink->AddBezier({ { 19.1860008F, 56.0999985F }, { 19.1970005F, 60.887001F }, { 19.1970005F, 63.8079987F } });
            sink->AddBezier({ { 19.1970005F, 63.8079987F }, { 19.5510006F, 78.4420013F }, { 19.5510006F, 78.4420013F } });
            sink->AddBezier({ { 19.5510006F, 83.9639969F }, { 15.0760002F, 88.4400024F }, { 9.5539999F, 88.4400024F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle 2
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_063()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 24.0540009F, 88.3769989F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 24.0540009F, 88.3769989F }, { -40.6479988F, 88.3769989F }, { -40.6479988F, 88.3769989F } });
            sink->AddBezier({ { -46.1699982F, 88.3769989F }, { -50.6459999F, 83.9020004F }, { -50.6459999F, 78.3799973F } });
            sink->AddBezier({ { -50.6459999F, 78.3799973F }, { -50.6459999F, 19.8379993F }, { -50.6459999F, 19.8379993F } });
            sink->AddBezier({ { -50.6459999F, 16.8630009F }, { -49.375F, 14.0299997F }, { -47.1529999F, 12.0509996F } });
            sink->AddBezier({ { -47.1529999F, 12.0509996F }, { -19.8889999F, -12.2299995F }, { -19.8889999F, -12.2299995F } });
            sink->AddBezier({ { -19.8889999F, -12.2299995F }, { -19.8889999F, -56.8979988F }, { -19.8889999F, -56.8979988F } });
            sink->AddBezier({ { -19.8889999F, -56.8979988F }, { 4.19899988F, -56.8979988F }, { 4.19899988F, -56.8979988F } });
            sink->AddBezier({ { 4.19899988F, -56.8979988F }, { 4.19899988F, -12.2299995F }, { 4.19899988F, -12.2299995F } });
            sink->AddBezier({ { 4.19899988F, -12.2299995F }, { 30.6739998F, 12.0620003F }, { 30.6739998F, 12.0620003F } });
            sink->AddBezier({ { 32.8260002F, 14.0369997F }, { 34.0509987F, 16.8239994F }, { 34.0509987F, 19.7450008F } });
            sink->AddBezier({ { 34.0509987F, 19.7450008F }, { 34.0509987F, 78.3799973F }, { 34.0509987F, 78.3799973F } });
            sink->AddBezier({ { 34.0509987F, 83.9020004F }, { 29.5760002F, 88.3769989F }, { 24.0540009F, 88.3769989F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_064()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 24.0540009F, 88.3769989F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 24.0540009F, 88.3769989F }, { -40.6479988F, 88.3769989F }, { -40.6479988F, 88.3769989F } });
            sink->AddBezier({ { -46.1699982F, 88.3769989F }, { -50.6459999F, 83.9020004F }, { -50.6459999F, 78.3799973F } });
            sink->AddBezier({ { -50.6459999F, 78.3799973F }, { -50.6459999F, 24.8379993F }, { -50.6459999F, 24.8379993F } });
            sink->AddBezier({ { -50.6459999F, 21.8630009F }, { -49.375F, 19.0300007F }, { -47.1529999F, 17.0510006F } });
            sink->AddBezier({ { -47.1529999F, 17.0510006F }, { -19.8889999F, -7.23000002F }, { -19.8889999F, -7.23000002F } });
            sink->AddBezier({ { -19.8889999F, -7.23000002F }, { -19.8889999F, -44.8979988F }, { -19.8889999F, -44.8979988F } });
            sink->AddBezier({ { -19.8889999F, -44.8979988F }, { 4.19899988F, -44.8979988F }, { 4.19899988F, -44.8979988F } });
            sink->AddBezier({ { 4.19899988F, -44.8979988F }, { 4.19899988F, -7.23000002F }, { 4.19899988F, -7.23000002F } });
            sink->AddBezier({ { 4.19899988F, -7.23000002F }, { 30.6739998F, 17.0620003F }, { 30.6739998F, 17.0620003F } });
            sink->AddBezier({ { 32.8260002F, 19.0370007F }, { 34.0509987F, 21.8239994F }, { 34.0509987F, 24.7450008F } });
            sink->AddBezier({ { 34.0509987F, 24.7450008F }, { 34.0509987F, 78.3799973F }, { 34.0509987F, 78.3799973F } });
            sink->AddBezier({ { 34.0509987F, 83.9020004F }, { 29.5760002F, 88.3769989F }, { 24.0540009F, 88.3769989F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle 2
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_065()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 24.0540009F, 88.3769989F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 24.0540009F, 88.3769989F }, { -40.6479988F, 88.3769989F }, { -40.6479988F, 88.3769989F } });
            sink->AddBezier({ { -46.1699982F, 88.3769989F }, { -50.6459999F, 83.9020004F }, { -50.6459999F, 78.3799973F } });
            sink->AddBezier({ { -50.6459999F, 78.3799973F }, { -50.6459999F, 22.4050007F }, { -50.6459999F, 22.4050007F } });
            sink->AddBezier({ { -50.6459999F, 19.4300003F }, { -49.375F, 16.5979996F }, { -47.1529999F, 14.6190004F } });
            sink->AddBezier({ { -47.1529999F, 14.6190004F }, { -19.8889999F, -9.66300011F }, { -19.8889999F, -9.66300011F } });
            sink->AddBezier({ { -19.8889999F, -9.66300011F }, { -19.8889999F, -48.3359985F }, { -19.8889999F, -48.3359985F } });
            sink->AddBezier({ { -19.8889999F, -48.3359985F }, { 4.19899988F, -48.3359985F }, { 4.19899988F, -48.3359985F } });
            sink->AddBezier({ { 4.19899988F, -48.3359985F }, { 4.19899988F, -9.66300011F }, { 4.19899988F, -9.66300011F } });
            sink->AddBezier({ { 4.19899988F, -9.66300011F }, { 30.6739998F, 14.6300001F }, { 30.6739998F, 14.6300001F } });
            sink->AddBezier({ { 32.8260002F, 16.6049995F }, { 34.0509987F, 19.3920002F }, { 34.0509987F, 22.3129997F } });
            sink->AddBezier({ { 34.0509987F, 22.3129997F }, { 34.0509987F, 78.3799973F }, { 34.0509987F, 78.3799973F } });
            sink->AddBezier({ { 34.0509987F, 83.9020004F }, { 29.5760002F, 88.3769989F }, { 24.0540009F, 88.3769989F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle 2
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_066()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 54.0400009F, 64.1709976F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 54.0400009F, 64.1709976F }, { -72.4950027F, 64.3059998F }, { -72.4950027F, 64.3059998F } });
            sink->AddBezier({ { -78.0169983F, 64.3059998F }, { -82.4929962F, 59.8300018F }, { -82.4929962F, 54.3079987F } });
            sink->AddBezier({ { -82.4929962F, 54.3079987F }, { -82.5339966F, 24.8780003F }, { -82.5339966F, 24.8780003F } });
            sink->AddBezier({ { -82.5339966F, 24.2169991F }, { -82.2340012F, 17.4860001F }, { -81.7399979F, 17.0459995F } });
            sink->AddBezier({ { -81.7399979F, 17.0459995F }, { -82.3470001F, 1.16600001F }, { -82.3470001F, -7.25699997F } });
            sink->AddBezier({ { -82.3470001F, -15.6800003F }, { -68.9749985F, -44.8180008F }, { -50.7659988F, -44.8180008F } });
            sink->AddBezier({ { -27.7530003F, -44.8180008F }, { 21.8549995F, -44.8180008F }, { 34.144001F, -44.8180008F } });
            sink->AddBezier({ { 46.4329987F, -44.8180008F }, { 63.7830009F, -27.2819996F }, { 63.7830009F, -19.3439999F } });
            sink->AddBezier({ { 63.7830009F, -11.4060001F }, { 63.3889999F, 16.9200001F }, { 63.3889999F, 16.9200001F } });
            sink->AddBezier({ { 63.8670006F, 17.3589993F }, { 63.9959984F, 21.7290001F }, { 63.9959984F, 24.6499996F } });
            sink->AddBezier({ { 63.9959984F, 24.6499996F }, { 64.038002F, 54.1730003F }, { 64.038002F, 54.1730003F } });
            sink->AddBezier({ { 64.038002F, 59.6949997F }, { 59.5620003F, 64.1709976F }, { 54.0400009F, 64.1709976F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle 2
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_067()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 62.6069984F, 57.2550011F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 62.6069984F, 57.2550011F }, { -81.5940018F, 57.4290009F }, { -81.5940018F, 57.4290009F } });
            sink->AddBezier({ { -87.1159973F, 57.4290009F }, { -91.5920029F, 52.9529991F }, { -91.5920029F, 47.4309998F } });
            sink->AddBezier({ { -91.5920029F, 47.4309998F }, { -91.6460037F, 24.8889999F }, { -91.6460037F, 24.8889999F } });
            sink->AddBezier({ { -91.6460037F, 24.8889999F }, { -91.6220016F, 17.2049999F }, { -91.6220016F, 17.2049999F } });
            sink->AddBezier({ { -91.6220016F, 17.2049999F }, { -91.5139999F, 3.40799999F }, { -91.5139999F, -7.421F } });
            sink->AddBezier({ { -91.5139999F, -18.25F }, { -83.0F, -44.7960014F }, { -59.5890007F, -44.7960014F } });
            sink->AddBezier({ { -30.0F, -44.7960014F }, { 26.8980007F, -44.7960014F }, { 42.6990013F, -44.7960014F } });
            sink->AddBezier({ { 58.5F, -44.7960014F }, { 72.4489975F, -33.1619987F }, { 72.4489975F, -22.9559994F } });
            sink->AddBezier({ { 72.4489975F, -12.75F }, { 72.7369995F, 16.8799992F }, { 72.7369995F, 16.8799992F } });
            sink->AddBezier({ { 72.7369995F, 16.8799992F }, { 72.5510025F, 21.7019997F }, { 72.5510025F, 24.6229992F } });
            sink->AddBezier({ { 72.5510025F, 24.6229992F }, { 72.6050034F, 47.257F }, { 72.6050034F, 47.257F } });
            sink->AddBezier({ { 72.6050034F, 52.7789993F }, { 68.1289978F, 57.2550011F }, { 62.6069984F, 57.2550011F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_068()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -33.480999F, 49.1800003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -33.480999F, 49.1800003F }, { 18.9379997F, 49.4550018F }, { 18.9379997F, 49.4550018F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle 2
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_069()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -18.5990009F, -34.6220016F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -18.5990009F, -34.6220016F }, { 3.48699999F, -34.6220016F }, { 3.48699999F, -34.6220016F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_070()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -18.5990009F, -22.6219997F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -18.5990009F, -22.6219997F }, { 3.48699999F, -22.6219997F }, { 3.48699999F, -22.6219997F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle 2
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_071()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -18.5990009F, -26.0599995F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -18.5990009F, -26.0599995F }, { 3.48699999F, -26.0599995F }, { 3.48699999F, -26.0599995F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle 2
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_072()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -40.6090012F, -35.4179993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -40.6090012F, -35.4179993F }, { 23.5F, -35.4179993F }, { 23.5F, -35.4179993F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle 2
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_073()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -56.7750015F, -39.7659988F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -56.7750015F, -39.7659988F }, { 39.0F, -39.7659988F }, { 39.0F, -39.7659988F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle 2
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_074()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -56.7939987F, -43.3849983F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -56.7939987F, -43.3849983F }, { 39.2919998F, -43.3849983F }, { 39.2919998F, -43.3849983F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Toaster
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_075()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_076().get()->Geometry(),
                Geometry_077().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Toaster
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_076()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -59.5040016F, 59.0369987F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -59.5040016F, 64.3889999F }, { -63.8419991F, 68.7249985F }, { -69.1940002F, 68.7249985F } });
            sink->AddBezier({ { -74.5439987F, 68.7249985F }, { -78.8820038F, 64.3889999F }, { -78.8820038F, 59.0369987F } });
            sink->AddBezier({ { -78.8820038F, 53.6860008F }, { -74.5439987F, 49.348999F }, { -69.1940002F, 49.348999F } });
            sink->AddBezier({ { -63.8419991F, 49.348999F }, { -59.5040016F, 53.6860008F }, { -59.5040016F, 59.0369987F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Toaster
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_077()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 66.1110001F, 59.0369987F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 66.1110001F, 64.3889999F }, { 61.7739983F, 68.7249985F }, { 56.4220009F, 68.7249985F } });
            sink->AddBezier({ { 51.0719986F, 68.7249985F }, { 46.7330017F, 64.3889999F }, { 46.7330017F, 59.0369987F } });
            sink->AddBezier({ { 46.7330017F, 53.6860008F }, { 51.0719986F, 49.348999F }, { 56.4220009F, 49.348999F } });
            sink->AddBezier({ { 61.7739983F, 49.348999F }, { 66.1110001F, 53.6860008F }, { 66.1110001F, 59.0369987F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Toaster
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_078()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 89.2450027F, 18.2520008F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 71.3769989F, 18.2520008F });
            sink->AddLine({ 71.3769989F, 7.62900019F });
            sink->AddLine({ 78.6220016F, 7.62900019F });
            sink->AddBezier({ { 84.4889984F, 7.62900019F }, { 89.2450027F, 12.3850002F }, { 89.2450027F, 18.2520008F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Toaster
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_079()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 57.4529991F, -49.4640007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 57.5760002F, -59.6910019F }, { 49.3849983F, -68.0820007F }, { 39.1580009F, -68.2050018F } });
            sink->AddBezier({ { 31.9610004F, -68.2919998F }, { 25.6790009F, -64.2590027F }, { 22.5419998F, -58.2989998F } });
            sink->AddBezier({ { 19.5489998F, -64.3320007F }, { 13.3660002F, -68.5149994F }, { 6.16900015F, -68.6019974F } });
            sink->AddBezier({ { -4.05800009F, -68.7249985F }, { -12.4490004F, -60.5340004F }, { -12.5719995F, -50.3069992F } });
            sink->AddBezier({ { -12.6359997F, -45.0029984F }, { -10.46F, -40.1959991F }, { -6.92700005F, -36.7770004F } });
            sink->AddLine({ -7.35099983F, -1.46899998F });
            sink->AddLine({ 51.0589981F, -0.765999973F });
            sink->AddLine({ 51.4840012F, -36.0740013F });
            sink->AddBezier({ { 55.0979996F, -39.4070015F }, { 57.3889999F, -44.1599998F }, { 57.4529991F, -49.4640007F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Toaster
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_080()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -0.890999973F, -49.4640007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -0.768000007F, -59.6910019F }, { -8.95899963F, -68.0820007F }, { -19.1860008F, -68.2050018F } });
            sink->AddBezier({ { -26.3829994F, -68.2919998F }, { -32.6650009F, -64.2590027F }, { -35.8019981F, -58.2989998F } });
            sink->AddBezier({ { -38.7949982F, -64.3320007F }, { -44.9780006F, -68.5149994F }, { -52.1749992F, -68.6019974F } });
            sink->AddBezier({ { -62.4020004F, -68.7249985F }, { -70.7929993F, -60.5340004F }, { -70.9160004F, -50.3069992F } });
            sink->AddBezier({ { -70.9800034F, -45.0029984F }, { -68.8040009F, -40.1959991F }, { -65.2710037F, -36.7770004F } });
            sink->AddLine({ -65.6959991F, -1.46899998F });
            sink->AddLine({ -7.28599977F, -0.765999973F });
            sink->AddLine({ -6.86000013F, -36.0740013F });
            sink->AddBezier({ { -3.24600005F, -39.4070015F }, { -0.954999983F, -44.1599998F }, { -0.890999973F, -49.4640007F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_081()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 36.3419991F, 88.9160004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 36.3419991F, 88.9160004F }, { -48.8740005F, 88.9160004F }, { -48.8740005F, 88.9160004F } });
            sink->AddBezier({ { -48.8740005F, 88.9160004F }, { -48.9199982F, -2.34599996F }, { -48.9199982F, -2.34599996F } });
            sink->AddBezier({ { -48.9199982F, -24.2549992F }, { -31.1580009F, -42.0169983F }, { -9.2489996F, -42.0169983F } });
            sink->AddBezier({ { -9.2489996F, -42.0169983F }, { -3.37400007F, -42.0169983F }, { -3.37400007F, -42.0169983F } });
            sink->AddBezier({ { 18.5349998F, -42.0169983F }, { 36.2960014F, -24.2549992F }, { 36.2960014F, -2.34599996F } });
            sink->AddBezier({ { 36.2960014F, -2.34599996F }, { 36.3419991F, 88.9160004F }, { 36.3419991F, 88.9160004F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_082()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 75.7959976F, 58.4580002F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 75.7959976F, 58.4580002F }, { -89.2450027F, 58.4580002F }, { -89.2450027F, 58.4580002F } });
            sink->AddBezier({ { -89.2450027F, 58.4580002F }, { -89.2450027F, -2.30500007F }, { -89.2450027F, -2.30500007F } });
            sink->AddBezier({ { -89.2450027F, -24.2140007F }, { -71.4830017F, -41.9749985F }, { -49.5740013F, -41.9749985F } });
            sink->AddBezier({ { -49.5740013F, -41.9749985F }, { 36.1259995F, -41.9749985F }, { 36.1259995F, -41.9749985F } });
            sink->AddBezier({ { 58.0349998F, -41.9749985F }, { 75.7959976F, -24.2140007F }, { 75.7959976F, -2.30500007F } });
            sink->AddBezier({ { 75.7959976F, -2.30500007F }, { 75.7959976F, 58.4580002F }, { 75.7959976F, 58.4580002F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Door
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_083()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 52.2809982F, 23.1429996F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 52.2809982F, 28.3479996F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_084()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[4]
            {
                Geometry_085().get()->Geometry(),
                Geometry_086().get()->Geometry(),
                Geometry_087().get()->Geometry(),
                Geometry_088().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                4,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_085()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 40.5410004F, 10.9090004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 40.5410004F, 10.9090004F }, { 8.36400032F, 10.9090004F }, { 8.36400032F, 10.9090004F } });
            sink->AddBezier({ { 8.36400032F, 10.9090004F }, { 8.36400032F, -25.5200005F }, { 8.36400032F, -25.5200005F } });
            sink->AddBezier({ { 8.36400032F, -25.5200005F }, { 40.5410004F, -25.5200005F }, { 40.5410004F, -25.5200005F } });
            sink->AddBezier({ { 40.5410004F, -25.5200005F }, { 40.5410004F, 10.9090004F }, { 40.5410004F, 10.9090004F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_086()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -9.34200001F, 10.9090004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -9.34200001F, 10.9090004F }, { -41.519001F, 10.9090004F }, { -41.519001F, 10.9090004F } });
            sink->AddBezier({ { -41.519001F, 10.9090004F }, { -41.519001F, -25.5200005F }, { -41.519001F, -25.5200005F } });
            sink->AddBezier({ { -41.519001F, -25.5200005F }, { -9.34200001F, -25.5200005F }, { -9.34200001F, -25.5200005F } });
            sink->AddBezier({ { -9.34200001F, -25.5200005F }, { -9.34200001F, 10.9090004F }, { -9.34200001F, 10.9090004F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_087()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 40.5820007F, -48.5110016F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 40.5820007F, -48.5110016F }, { 8.40499973F, -48.5110016F }, { 8.40499973F, -48.5110016F } });
            sink->AddBezier({ { 8.40499973F, -48.5110016F }, { 8.36400032F, -57.9830017F }, { 8.36400032F, -57.9830017F } });
            sink->AddBezier({ { 8.36400032F, -66.8679962F }, { 15.5679998F, -74.0709991F }, { 24.4529991F, -74.0709991F } });
            sink->AddBezier({ { 24.4529991F, -74.0709991F }, { 24.4529991F, -74.0709991F }, { 24.4529991F, -74.0709991F } });
            sink->AddBezier({ { 33.3380013F, -74.0709991F }, { 40.5410004F, -66.8679962F }, { 40.5410004F, -57.9830017F } });
            sink->AddBezier({ { 40.5410004F, -57.9830017F }, { 40.5820007F, -48.5110016F }, { 40.5820007F, -48.5110016F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_088()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -9.30099964F, -48.5110016F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -9.30099964F, -48.5110016F }, { -41.4780006F, -48.5110016F }, { -41.4780006F, -48.5110016F } });
            sink->AddBezier({ { -41.4780006F, -48.5110016F }, { -41.519001F, -57.9830017F }, { -41.519001F, -57.9830017F } });
            sink->AddBezier({ { -41.519001F, -66.8679962F }, { -34.3149986F, -74.0709991F }, { -25.4300003F, -74.0709991F } });
            sink->AddBezier({ { -25.4300003F, -74.0709991F }, { -25.4300003F, -74.0709991F }, { -25.4300003F, -74.0709991F } });
            sink->AddBezier({ { -16.5450001F, -74.0709991F }, { -9.34200001F, -66.8679962F }, { -9.34200001F, -57.9830017F } });
            sink->AddBezier({ { -9.34200001F, -57.9830017F }, { -9.30099964F, -48.5110016F }, { -9.30099964F, -48.5110016F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Door
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_089()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[4]
            {
                Geometry_090().get()->Geometry(),
                Geometry_091().get()->Geometry(),
                Geometry_092().get()->Geometry(),
                Geometry_093().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                4,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Door
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_090()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 40.5209999F, 71.9089966F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 40.5209999F, 71.9089966F }, { 8.34399986F, 71.9089966F }, { 8.34399986F, 71.9089966F } });
            sink->AddBezier({ { 8.34399986F, 71.9089966F }, { 8.34399986F, 35.4799995F }, { 8.34399986F, 35.4799995F } });
            sink->AddBezier({ { 8.34399986F, 35.4799995F }, { 40.5209999F, 35.4799995F }, { 40.5209999F, 35.4799995F } });
            sink->AddBezier({ { 40.5209999F, 35.4799995F }, { 40.5209999F, 71.9089966F }, { 40.5209999F, 71.9089966F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Door
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_091()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -9.36200047F, 71.9089966F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -9.36200047F, 71.9089966F }, { -41.5390015F, 71.9089966F }, { -41.5390015F, 71.9089966F } });
            sink->AddBezier({ { -41.5390015F, 71.9089966F }, { -41.5390015F, 35.4799995F }, { -41.5390015F, 35.4799995F } });
            sink->AddBezier({ { -41.5390015F, 35.4799995F }, { -9.36200047F, 35.4799995F }, { -9.36200047F, 35.4799995F } });
            sink->AddBezier({ { -9.36200047F, 35.4799995F }, { -9.36200047F, 71.9089966F }, { -9.36200047F, 71.9089966F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Door
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_092()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 40.5209999F, 17.4890003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 40.5209999F, 17.4890003F }, { 8.34399986F, 17.4890003F }, { 8.34399986F, 17.4890003F } });
            sink->AddBezier({ { 8.34399986F, 17.4890003F }, { 8.34399986F, -46.9830017F }, { 8.34399986F, -46.9830017F } });
            sink->AddBezier({ { 8.34399986F, -55.868F }, { 15.5469999F, -63.0709991F }, { 24.4319992F, -63.0709991F } });
            sink->AddBezier({ { 24.4319992F, -63.0709991F }, { 24.4319992F, -63.0709991F }, { 24.4319992F, -63.0709991F } });
            sink->AddBezier({ { 33.3170013F, -63.0709991F }, { 40.5209999F, -55.868F }, { 40.5209999F, -46.9830017F } });
            sink->AddBezier({ { 40.5209999F, -46.9830017F }, { 40.5209999F, 17.4890003F }, { 40.5209999F, 17.4890003F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - - Layer aggregator
        // - - - - - Layer: Door
        // - - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - - Path 4+Path 3+Path 2+Path 1.PathGeometry
        // - - Path
        winrt::com_ptr<CanvasGeometry> Geometry_093()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -9.36200047F, 17.4890003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -9.36200047F, 17.4890003F }, { -41.5390015F, 17.4890003F }, { -41.5390015F, 17.4890003F } });
            sink->AddBezier({ { -41.5390015F, 17.4890003F }, { -41.5390015F, -46.9830017F }, { -41.5390015F, -46.9830017F } });
            sink->AddBezier({ { -41.5390015F, -55.868F }, { -34.3359985F, -63.0709991F }, { -25.4510002F, -63.0709991F } });
            sink->AddBezier({ { -25.4510002F, -63.0709991F }, { -25.4510002F, -63.0709991F }, { -25.4510002F, -63.0709991F } });
            sink->AddBezier({ { -16.566F, -63.0709991F }, { -9.36200047F, -55.868F }, { -9.36200047F, -46.9830017F } });
            sink->AddBezier({ { -9.36200047F, -46.9830017F }, { -9.36200047F, 17.4890003F }, { -9.36200047F, 17.4890003F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_094()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 81.5F, 55.3230019F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 81.5F, 55.3230019F }, { -83.0F, 55.3230019F }, { -83.0F, 55.3230019F } });
            sink->AddBezier({ { -83.0F, 55.3230019F }, { -83.0F, -1.29999995F }, { -83.0F, -1.29999995F } });
            sink->AddBezier({ { -83.0F, -25.6000004F }, { -63.3009987F, -45.2999992F }, { -39.0F, -45.2999992F } });
            sink->AddBezier({ { -39.0F, -45.2999992F }, { 37.5F, -45.2999992F }, { 37.5F, -45.2999992F } });
            sink->AddBezier({ { 61.8009987F, -45.2999992F }, { 81.5F, -25.6000004F }, { 81.5F, -1.29999995F } });
            sink->AddBezier({ { 81.5F, -1.29999995F }, { 81.5F, 55.3230019F }, { 81.5F, 55.3230019F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Door
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_095()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 64.663002F, -77.697998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 64.663002F, -77.697998F }, { -64.4179993F, -77.697998F }, { -64.4179993F, -77.697998F } });
            sink->AddBezier({ { -64.4179993F, -77.697998F }, { -64.5410004F, -87.0619965F }, { -64.5410004F, -87.0619965F } });
            sink->AddBezier({ { -64.5410004F, -122.707001F }, { -35.6450005F, -151.602005F }, { 0.0F, -151.602005F } });
            sink->AddBezier({ { 0.0F, -151.602005F }, { 0.0F, -151.602005F }, { 0.0F, -151.602005F } });
            sink->AddBezier({ { 35.6450005F, -151.602005F }, { 64.5410004F, -122.707001F }, { 64.5410004F, -87.0619965F } });
            sink->AddBezier({ { 64.5410004F, -87.0619965F }, { 64.663002F, -77.697998F }, { 64.663002F, -77.697998F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Door
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_096()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 64.5410004F, 105.302002F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 64.5410004F, 105.302002F }, { -64.5410004F, 105.302002F }, { -64.5410004F, 105.302002F } });
            sink->AddBezier({ { -64.5410004F, 105.302002F }, { -64.5410004F, -50.5620003F }, { -64.5410004F, -50.5620003F } });
            sink->AddBezier({ { -64.5410004F, -86.2070007F }, { -35.6450005F, -115.101997F }, { 0.0F, -115.101997F } });
            sink->AddBezier({ { 0.0F, -115.101997F }, { 0.0F, -115.101997F }, { 0.0F, -115.101997F } });
            sink->AddBezier({ { 35.6450005F, -115.101997F }, { 64.5410004F, -86.2070007F }, { 64.5410004F, -50.5620003F } });
            sink->AddBezier({ { 64.5410004F, -50.5620003F }, { 64.5410004F, 105.302002F }, { 64.5410004F, 105.302002F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Door
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_097()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 64.5410004F, 96.302002F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 64.5410004F, 96.302002F }, { -64.5410004F, 96.302002F }, { -64.5410004F, 96.302002F } });
            sink->AddBezier({ { -64.5410004F, 96.302002F }, { -64.5410004F, -50.5620003F }, { -64.5410004F, -50.5620003F } });
            sink->AddBezier({ { -64.5410004F, -86.2070007F }, { -35.6450005F, -115.101997F }, { 0.0F, -115.101997F } });
            sink->AddBezier({ { 0.0F, -115.101997F }, { 0.0F, -115.101997F }, { 0.0F, -115.101997F } });
            sink->AddBezier({ { 35.6450005F, -115.101997F }, { 64.5410004F, -86.2070007F }, { 64.5410004F, -50.5620003F } });
            sink->AddBezier({ { 64.5410004F, -50.5620003F }, { 64.5410004F, 96.302002F }, { 64.5410004F, 96.302002F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_098()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 63.1990013F, 97.4550018F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 63.1990013F, 97.4550018F }, { -62.6500015F, 97.3519974F }, { -62.6500015F, 97.3519974F } });
            sink->AddBezier({ { -62.6500015F, 97.3519974F }, { -62.3800011F, 96.302002F }, { -62.3800011F, 96.302002F } });
            sink->AddBezier({ { -62.3800011F, 96.302002F }, { 62.3800011F, 96.302002F }, { 62.3800011F, 96.302002F } });
            sink->AddBezier({ { 62.3800011F, 96.302002F }, { 63.1990013F, 97.4550018F }, { 63.1990013F, 97.4550018F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Door
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path
        winrt::com_ptr<CanvasGeometry> Geometry_099()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 83.3000031F, 115.101997F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 83.3000031F, 115.101997F }, { -83.3000031F, 115.101997F }, { -83.3000031F, 115.101997F } });
            sink->AddBezier({ { -83.3000031F, 115.101997F }, { -62.3800011F, 96.302002F }, { -62.3800011F, 96.302002F } });
            sink->AddBezier({ { -62.3800011F, 96.302002F }, { 62.3800011F, 96.302002F }, { 62.3800011F, 96.302002F } });
            sink->AddBezier({ { 62.3800011F, 96.302002F }, { 83.3000031F, 115.101997F }, { 83.3000031F, 115.101997F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_100()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_101().get()->Geometry(),
                Geometry_102().get()->Geometry(),
                Geometry_103().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_101()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 257.140991F, 200.388F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 208.893997F, 186.037003F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_102()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 280.382996F, 172.167007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 209.873993F, 172.490005F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_103()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 259.437988F, 149.367996F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 208.893997F, 158.727997F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_104()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_105().get()->Geometry(),
                Geometry_106().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_105()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 163.5F, 152.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 163.5F, 227.820007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_106()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 134.330002F, 152.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 134.330002F, 227.820007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_107()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_108().get()->Geometry(),
                Geometry_109().get()->Geometry(),
                Geometry_110().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_108()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 188.526001F, 124.220001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 170.042999F, 142.348999F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_109()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 146.660995F, 107.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 146.660995F, 143.169006F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_110()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 101.25F, 122.446999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 122.570999F, 142.348999F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_111()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_112().get()->Geometry(),
                Geometry_113().get()->Geometry(),
                Geometry_114().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_112()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 107.519997F, 269.640991F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 107.398003F, 178.820007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_113()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 149.878998F, 269.820007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 149.757996F, 179.0F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_114()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 191.688995F, 269.640991F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 191.567993F, 178.820007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_115()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_116().get()->Geometry(),
                Geometry_117().get()->Geometry(),
                Geometry_118().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_116()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 59.0F, 401.199005F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 77.4840012F, 375.070007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_117()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 140.865005F, 418.419006F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 140.981003F, 377.25F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_118()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 226.276001F, 402.971985F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 204.955994F, 375.070007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.75316453F, { 0xFF, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.772151887F, { 0x00, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_00);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Spray Bottle
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_0()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.297468364F, { 0x00, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.303797454F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_00);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_1()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.822784781F, { 0x00, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.829113901F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_00);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_2()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.83544302F, { 0x00, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.841772139F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_00);
            return result;
        }

        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.0632911399F, { 0x00, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.0696202517F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_00);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.234177217F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_00);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.240506336F, { 0x00, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_00);
            return result;
        }

        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentWhite_to_TransparentWhite()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // TransparentWhite
            result.InsertKeyFrame(0.0632911399F, { 0x00, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // White
            result.InsertKeyFrame(0.0696202517F, { 0xFF, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_00);
            // White
            result.InsertKeyFrame(0.234177217F, { 0xFF, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_00);
            // TransparentWhite
            result.InsertKeyFrame(0.240506336F, { 0x00, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_00);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentWhite_to_White()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // TransparentWhite
            result.InsertKeyFrame(0.83544302F, { 0x00, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // White
            result.InsertKeyFrame(0.841772139F, { 0xFF, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_00);
            return result;
        }

        // Color
        ColorKeyFrameAnimation ColorAnimation_White_to_TransparentWhite()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // White
            result.InsertKeyFrame(0.75316453F, { 0xFF, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // TransparentWhite
            result.InsertKeyFrame(0.772151887F, { 0x00, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_00);
            return result;
        }

        CompositionColorBrush AnimatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1()
        {
            const auto result = _animatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1 = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionColorBrush AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_0()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_0(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionColorBrush AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_1()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionColorBrush AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_2()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_2(), _rootProgress);
            return result;
        }

        CompositionColorBrush AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1()
        {
            const auto result = _animatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1 = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1(), _rootProgress);
            return result;
        }

        CompositionColorBrush AnimatedColorBrush_TransparentWhite_to_TransparentWhite()
        {
            const auto result = _animatedColorBrush_TransparentWhite_to_TransparentWhite = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentWhite_to_TransparentWhite(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionColorBrush AnimatedColorBrush_TransparentWhite_to_White()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentWhite_to_White(), _rootProgress);
            return result;
        }

        CompositionColorBrush AnimatedColorBrush_White_to_TransparentWhite()
        {
            const auto result = _animatedColorBrush_White_to_TransparentWhite = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_White_to_TransparentWhite(), _rootProgress);
            return result;
        }

        CompositionColorBrush ColorBrush_AlmostDarkTurquoise_FF00D1C1()
        {
            return _colorBrush_AlmostDarkTurquoise_FF00D1C1 = _c.CreateColorBrush({ 0xFF, 0x00, 0xD1, 0xC1 });
        }

        CompositionColorBrush ColorBrush_White()
        {
            return _colorBrush_White = _c.CreateColorBrush({ 0xFF, 0xFF, 0xFF, 0xFF });
        }

        // Layer aggregator
        // Layer: Bed
        CompositionContainerShape ContainerShape_0()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_00());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_01());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_02());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_03());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_04());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_05());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_06());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_00(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Spray Bottle
        CompositionContainerShape ContainerShape_1()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_08());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_09());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_10());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_02(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Spray Bottle 2
        CompositionContainerShape ContainerShape_2()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_11());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_12());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_03(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Toaster
        CompositionContainerShape ContainerShape_3()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_13());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_14());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_15());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_16());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_17());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_04(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Door
        CompositionContainerShape ContainerShape_4()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_18());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_19());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_20());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_21());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_05(), _rootProgress);
            return result;
        }

        CompositionPath Path_00()
        {
            const auto result = _path_00 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_000()));
            return result;
        }

        CompositionPath Path_01()
        {
            const auto result = _path_01 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_002()));
            return result;
        }

        CompositionPath Path_02()
        {
            const auto result = _path_02 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_004()));
            return result;
        }

        CompositionPath Path_03()
        {
            const auto result = _path_03 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_006()));
            return result;
        }

        CompositionPath Path_04()
        {
            const auto result = _path_04 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_008()));
            return result;
        }

        CompositionPath Path_05()
        {
            const auto result = _path_05 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_010()));
            return result;
        }

        CompositionPath Path_06()
        {
            const auto result = _path_06 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_012()));
            return result;
        }

        CompositionPath Path_07()
        {
            const auto result = _path_07 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_014()));
            return result;
        }

        CompositionPath Path_08()
        {
            const auto result = _path_08 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_016()));
            return result;
        }

        CompositionPath Path_09()
        {
            const auto result = _path_09 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_018()));
            return result;
        }

        CompositionPath Path_10()
        {
            const auto result = _path_10 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_020()));
            return result;
        }

        CompositionPath Path_11()
        {
            const auto result = _path_11 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_024()));
            return result;
        }

        CompositionPath Path_12()
        {
            const auto result = _path_12 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_026()));
            return result;
        }

        CompositionPath Path_13()
        {
            const auto result = _path_13 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_030()));
            return result;
        }

        CompositionPath Path_14()
        {
            const auto result = _path_14 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_036()));
            return result;
        }

        CompositionPath Path_15()
        {
            const auto result = _path_15 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_042()));
            return result;
        }

        CompositionPath Path_16()
        {
            const auto result = _path_16 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_051()));
            return result;
        }

        CompositionPath Path_17()
        {
            const auto result = _path_17 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_053()));
            return result;
        }

        CompositionPath Path_18()
        {
            const auto result = _path_18 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_056()));
            return result;
        }

        CompositionPath Path_19()
        {
            const auto result = _path_19 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_060()));
            return result;
        }

        CompositionPath Path_20()
        {
            const auto result = _path_20 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_062()));
            return result;
        }

        CompositionPath Path_21()
        {
            const auto result = _path_21 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_064()));
            return result;
        }

        CompositionPath Path_22()
        {
            const auto result = _path_22 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_068()));
            return result;
        }

        CompositionPath Path_23()
        {
            const auto result = _path_23 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_070()));
            return result;
        }

        CompositionPath Path_24()
        {
            const auto result = _path_24 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_081()));
            return result;
        }

        CompositionPath Path_25()
        {
            const auto result = _path_25 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_082()));
            return result;
        }

        CompositionPath Path_26()
        {
            const auto result = _path_26 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_084()));
            return result;
        }

        CompositionPath Path_27()
        {
            const auto result = _path_27 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_094()));
            return result;
        }

        CompositionPath Path_28()
        {
            const auto result = _path_28 = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_098()));
            return result;
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_00()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_00(), RootProgress());
            return result;
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_01()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_01(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_02()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_02(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_03()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_03(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_04()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_04(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_05()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_05(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_06()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_06(), _rootProgress);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_07()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_032())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 1.0F);
            propertySet.InsertScalar(L"TStart", 1.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_1_to_0_0(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_1_to_0_0(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_08()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_07(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_09()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_08(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_10()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_09(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle 2
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_11()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_10(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle 2
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_12()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_11(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_13()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_075())));
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_14()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_078())));
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_15()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_079())));
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_16()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_080())));
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_17()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_12(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_18()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_083())));
            StartProgressBoundAnimation(result, L"TrimEnd", TrimEndScalarAnimation_0_to_1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path 4+Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_19()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_13(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_20()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_14(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_21()
        {
            const auto result = _c.CreatePathGeometry();
            StartProgressBoundAnimation(result, L"Path", PathKeyFrameAnimation_15(), _rootProgress);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_22()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_100())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 1.0F);
            propertySet.InsertScalar(L"TStart", 1.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_1_to_0_1(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_1_to_0_1(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // Path 3+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_23()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_104())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.0F);
            propertySet.InsertScalar(L"TStart", 0.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_0_to_0p9_0(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_0_to_0p9_0(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_24()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_107())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 1.0F);
            propertySet.InsertScalar(L"TStart", 1.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_1_to_0_2(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_1_to_0_2(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_25()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_111())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.0F);
            propertySet.InsertScalar(L"TStart", 0.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_0_to_0p9_1(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_0_to_0p9_1(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_26()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_115())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 1.0F);
            propertySet.InsertScalar(L"TStart", 1.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_1_to_0_3(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_1_to_0_3(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_00()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_00(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(ColorBrush_AlmostDarkTurquoise_FF00D1C1());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_01()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_01(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_02()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_02(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_03()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_03(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_04()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_04(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_05()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_05(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F }, AnimatedColorBrush_TransparentWhite_to_TransparentWhite());
            result.StrokeBrush(AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_06()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_06(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F }, _animatedColorBrush_TransparentWhite_to_TransparentWhite);
            result.StrokeBrush(_animatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_07()
        {
            // Offset:<14.273601, -5.9424>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_07(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 14.2736006F, -5.94239998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_01(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle
        // Path 2+Path 1
        CompositionSpriteShape SpriteShape_08()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_08(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F });
            result.CenterPoint({ 20.5179996F, -70.3669968F });
            result.StrokeBrush(AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_0());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), _rootProgress);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_0(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle
        // Path 1
        CompositionSpriteShape SpriteShape_09()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_09(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F }, ColorBrush_White());
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle
        // Path 1
        CompositionSpriteShape SpriteShape_10()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_10(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle 2
        // Path 1
        CompositionSpriteShape SpriteShape_11()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_11(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F }, _colorBrush_White);
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle 2
        // Path 1
        CompositionSpriteShape SpriteShape_12()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_12(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 2+Path 1
        CompositionSpriteShape SpriteShape_13()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_13(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ScaleVector2Animation_0(), _rootProgress);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_1(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 1
        CompositionSpriteShape SpriteShape_14()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_14(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_2(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 1
        CompositionSpriteShape SpriteShape_15()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_15(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F }, AnimatedColorBrush_White_to_TransparentWhite());
            result.StrokeBrush(AnimatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1());
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_3(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 1
        CompositionSpriteShape SpriteShape_16()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_16(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F }, _animatedColorBrush_White_to_TransparentWhite);
            result.StrokeBrush(_animatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_4(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 1
        CompositionSpriteShape SpriteShape_17()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_17(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F }, _colorBrush_White);
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ScaleVector2Animation_1(), _rootProgress);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_5(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        // Path 1
        CompositionSpriteShape SpriteShape_18()
        {
            // Offset:<69.4896, 69.5968>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_18(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 69.5968018F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        // Path 4+Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_19()
        {
            // Offset:<69.4896, 69.5968>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_19(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 69.5968018F });
            result.StrokeBrush(AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_1());
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        // Path 1
        CompositionSpriteShape SpriteShape_20()
        {
            // Offset:<69.4896, 69.5968>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_20(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 69.5968018F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        // Path 1
        CompositionSpriteShape SpriteShape_21()
        {
            // Offset:<69.4896, 69.5968>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_21(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 69.5968018F }, AnimatedColorBrush_TransparentWhite_to_White());
            result.StrokeBrush(AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_2());
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_22()
        {
            // Offset:<16.500801, -19.6768>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_22(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 16.5008011F, -19.6767998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_06(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 1
        CompositionSpriteShape SpriteShape_23()
        {
            // Offset:<13.995201, -5.9424>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_23(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 13.9952011F, -5.94239998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_07(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_24()
        {
            // Offset:<16.500801, -19.6768>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_24(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 16.5008011F, -19.6767998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_08(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_25()
        {
            // Offset:<13.995201, -5.9424>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_25(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 13.9952011F, -5.94239998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_09(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_26()
        {
            // Offset:<16.500801, -23.8528>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_26(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 16.5008011F, -23.8528004F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_10(), _rootProgress);
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_00()
        {
            return _cubicBezierEasingFunction_00 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_01()
        {
            return _cubicBezierEasingFunction_01 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_02()
        {
            return _cubicBezierEasingFunction_02 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.0F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_03()
        {
            return _cubicBezierEasingFunction_03 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_04()
        {
            return _cubicBezierEasingFunction_04 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.666999996F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_05()
        {
            return _cubicBezierEasingFunction_05 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.666999996F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_06()
        {
            return _cubicBezierEasingFunction_06 = _c.CreateCubicBezierEasingFunction({ 1.0F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_07()
        {
            return _cubicBezierEasingFunction_07 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.333000004F }, { 0.0F, 0.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_08()
        {
            return _cubicBezierEasingFunction_08 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_09()
        {
            return _cubicBezierEasingFunction_09 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.134000003F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_10()
        {
            return _cubicBezierEasingFunction_10 = _c.CreateCubicBezierEasingFunction({ 0.730000019F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_11()
        {
            return _cubicBezierEasingFunction_11 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.234999999F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_12()
        {
            return _cubicBezierEasingFunction_12 = _c.CreateCubicBezierEasingFunction({ 0.721000016F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Bed
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_00()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_00(), StepThenHoldEasingFunction());
            result.InsertKeyFrame(0.0443037972F, _path_00, HoldThenStepEasingFunction());
            result.InsertKeyFrame(0.0632911399F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_001())), CubicBezierEasingFunction_00());
            result.InsertKeyFrame(0.107594937F, Path_01(), CubicBezierEasingFunction_01());
            result.InsertKeyFrame(0.215189874F, _path_01, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.259493679F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_003())), CubicBezierEasingFunction_02());
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Bed
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_01()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_02(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0443037972F, _path_02, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.0632911399F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_005())), _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.107594937F, Path_03(), _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.215189874F, _path_03, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.259493679F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_007())), _cubicBezierEasingFunction_02);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Bed
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_02()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_04(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0443037972F, _path_04, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.0632911399F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_009())), _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.107594937F, Path_05(), _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.215189874F, _path_05, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.259493679F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_011())), _cubicBezierEasingFunction_02);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Bed
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_03()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_06(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0443037972F, _path_06, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.0632911399F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_013())), _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.107594937F, Path_07(), _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.215189874F, _path_07, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.259493679F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_015())), _cubicBezierEasingFunction_02);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Bed
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_04()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_08(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0443037972F, _path_08, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.0632911399F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_017())), _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.107594937F, Path_09(), _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.215189874F, _path_09, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.259493679F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_019())), _cubicBezierEasingFunction_02);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Bed
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_05()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_10(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0696202517F, _path_10, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.107594937F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_021())), _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.132911399F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_022())), CubicBezierEasingFunction_03());
            result.InsertKeyFrame(0.151898727F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_023())), CubicBezierEasingFunction_04());
            result.InsertKeyFrame(0.17088607F, Path_11(), _cubicBezierEasingFunction_03);
            result.InsertKeyFrame(0.215189874F, _path_11, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.234177217F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_025())), _cubicBezierEasingFunction_03);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Bed
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_06()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_12(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0696202517F, _path_12, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.107594937F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_027())), _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.132911399F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_028())), _cubicBezierEasingFunction_03);
            result.InsertKeyFrame(0.151898727F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_029())), _cubicBezierEasingFunction_04);
            result.InsertKeyFrame(0.17088607F, Path_13(), _cubicBezierEasingFunction_03);
            result.InsertKeyFrame(0.215189874F, _path_13, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.234177217F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_031())), _cubicBezierEasingFunction_03);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Spray Bottle
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path 2+Path 1.PathGeometry
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_07()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_14(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.272151887F, _path_14, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.303797454F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_039())), CubicBezierEasingFunction_05());
            result.InsertKeyFrame(0.348101258F, Path_15(), _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.379746825F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_045())), _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.833000004F, 1.0F }));
            result.InsertKeyFrame(0.41772151F, _path_15, _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.666999996F, 1.0F }));
            result.InsertKeyFrame(0.518987358F, _path_15, _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.563291132F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_048())), CubicBezierEasingFunction_06());
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Spray Bottle
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_08()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_16(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.272151887F, _path_16, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.303797454F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_052())), _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.348101258F, Path_17(), _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.379746825F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_054())), _cubicBezierEasingFunction_03);
            result.InsertKeyFrame(0.41772151F, _path_17, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.436708868F, _path_17, _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.449367076F, _path_17, _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.0F }, { 0.0F, 1.0F }));
            result.InsertKeyFrame(0.462025315F, _path_17, CubicBezierEasingFunction_08());
            result.InsertKeyFrame(0.518987358F, _path_17, _cubicBezierEasingFunction_04);
            result.InsertKeyFrame(0.563291132F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_055())), _cubicBezierEasingFunction_06);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Spray Bottle
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_09()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_18(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.272151887F, _path_18, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.303797454F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_057())), _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.348101258F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_058())), _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.379746825F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_059())), _cubicBezierEasingFunction_03);
            result.InsertKeyFrame(0.41772151F, Path_19(), _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.5F, _path_19, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.518987358F, _path_19, _cubicBezierEasingFunction_04);
            result.InsertKeyFrame(0.563291132F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_061())), _cubicBezierEasingFunction_06);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Spray Bottle 2
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_10()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_20(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.272151887F, _path_20, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.303797454F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_063())), _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.348101258F, Path_21(), _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.379746825F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_065())), _cubicBezierEasingFunction_03);
            result.InsertKeyFrame(0.41772151F, _path_21, _cubicBezierEasingFunction_04);
            result.InsertKeyFrame(0.5F, _path_21, _cubicBezierEasingFunction_08);
            result.InsertKeyFrame(0.518987358F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_066())), _cubicBezierEasingFunction_04);
            result.InsertKeyFrame(0.556962013F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_067())), _cubicBezierEasingFunction_02);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Spray Bottle 2
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_11()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_22(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.272151887F, _path_22, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.303797454F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_069())), _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.348101258F, Path_23(), _cubicBezierEasingFunction_05);
            result.InsertKeyFrame(0.379746825F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_071())), _cubicBezierEasingFunction_03);
            result.InsertKeyFrame(0.41772151F, _path_23, _cubicBezierEasingFunction_04);
            result.InsertKeyFrame(0.5F, _path_23, _cubicBezierEasingFunction_08);
            result.InsertKeyFrame(0.506329119F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_072())), _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.512658238F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_073())), _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.518987358F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_074())), _cubicBezierEasingFunction_04);
            result.InsertKeyFrame(0.556962013F, _path_23, _cubicBezierEasingFunction_02);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Toaster
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_12()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_24(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.5F, _path_24, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.556962013F, Path_25(), _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.740506351F, _path_25, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.803797483F, _path_25, _cubicBezierEasingFunction_03);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path 4+Path 3+Path 2+Path 1.PathGeometry
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_13()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_26(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.829113901F, _path_26, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.860759497F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_089())), _cubicBezierEasingFunction_01);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_14()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_27(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.740506351F, _path_27, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.803797483F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_095())), _cubicBezierEasingFunction_02);
            result.InsertKeyFrame(0.854430377F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_096())), _c.CreateCubicBezierEasingFunction({ 0.714999974F, 0.0F }, { 0.186000004F, 1.0F }));
            result.InsertKeyFrame(0.936708868F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_097())), _c.CreateCubicBezierEasingFunction({ 0.693000019F, 0.0F }, { 0.280000001F, 1.0F }));
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path
        PathKeyFrameAnimation PathKeyFrameAnimation_15()
        {
            const auto result = CreatePathKeyFrameAnimation(0.0F, Path_28(), _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.841772139F, _path_28, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.892405093F, CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_099())), _cubicBezierEasingFunction_01);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Rotation
        ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.41772151F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.436708868F, 31.3999996F, _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.474683553F, 31.3999996F, CubicBezierEasingFunction_07());
            result.InsertKeyFrame(0.487341762F, 0.0F, _cubicBezierEasingFunction_03);
            return result;
        }

        // Path 3+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_0_to_0p9_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.223107591F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.231025323F, 0.305999994F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.254784822F, 0.907000005F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.262703806F, 0.899999976F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_0_to_0p9_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.749987364F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.757905066F, 0.305999994F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.786430359F, 0.907000005F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.794349372F, 0.899999976F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0822784826F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.104449369F, 1.0F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.137711138F, 0.0F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.41772151F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.449367076F, 1.0F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.493668169F, 0.0F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_2()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.291139245F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.313310117F, 1.0F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.346571892F, 0.0F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_3()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.854430377F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.893987358F, 1.0F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.949364364F, 0.0F, _cubicBezierEasingFunction_00);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // TrimEnd
        ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.829113901F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.860759497F, 1.0F, _cubicBezierEasingFunction_04);
            return result;
        }

        // Path 3+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_0_to_0p9_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.231025323F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.23894304F, 0.151999995F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.254784822F, 0.224999994F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.262703806F, 0.899999976F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_0_to_0p9_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.757905066F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.765822768F, 0.151999995F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.786430359F, 0.224999994F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.794349372F, 0.899999976F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0822784826F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.115537971F, 0.00999999978F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.137711138F, 0.0F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.41772151F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.462025315F, 0.00999999978F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.493668169F, 0.0F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_2()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.291139245F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.324398726F, 0.00999999978F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.346571892F, 0.0F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_3()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.854430377F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.909810126F, 0.00999999978F, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.949364364F, 0.0F, _cubicBezierEasingFunction_00);
            return result;
        }

        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 140.0F, 140.0F });
            const auto shapes = result.Shapes();
            // Layer: Bed
            shapes.Append(ContainerShape_0());
            // Layer: SPLASH
            shapes.Append(SpriteShape_07());
            // Layer: Spray Bottle
            shapes.Append(ContainerShape_1());
            // Layer: Spray Bottle 2
            shapes.Append(ContainerShape_2());
            // Layer: Toaster
            shapes.Append(ContainerShape_3());
            // Layer: Door
            shapes.Append(ContainerShape_4());
            // Layer: SPLASH 2
            shapes.Append(SpriteShape_22());
            // Layer: SPLASH
            shapes.Append(SpriteShape_23());
            // Layer: SPLASH
            shapes.Append(SpriteShape_24());
            // Layer: SPLASH
            shapes.Append(SpriteShape_25());
            // Layer: SPLASH
            shapes.Append(SpriteShape_26());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { -0.100000001F, 0.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.41772151F, { -0.100000001F, 0.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.436708868F, { 0.0F, -5.0F }, _cubicBezierEasingFunction_01);
            result.InsertKeyFrame(0.474683553F, { 0.0F, -5.0F }, _cubicBezierEasingFunction_07);
            result.InsertKeyFrame(0.487341762F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_03);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 0.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.740506351F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.772151887F, { 0.0F, -88.3000031F }, _cubicBezierEasingFunction_03);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_2()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { -26.0F, 11.6999998F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.525316477F, { -26.0F, 11.6999998F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.563291132F, { 0.0F, 11.6999998F }, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.58227849F, { 0.0F, 11.6999998F }, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.601265848F, { 0.0F, -7.0F }, _c.CreateCubicBezierEasingFunction({ 0.442000002F, 0.0F }, { 0.833000004F, 0.833000004F }));
            result.InsertKeyFrame(0.740506351F, { 0.0F, -7.0F }, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.772151887F, { -31.0F, -79.5F }, _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.833000004F, 0.842000008F }));
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_3()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 35.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.58227849F, { 0.0F, 35.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.620253146F, { 0.0F, -18.2999992F }, CubicBezierEasingFunction_09());
            result.InsertKeyFrame(0.645569623F, { 0.0F, 0.0F }, CubicBezierEasingFunction_10());
            result.InsertKeyFrame(0.66455698F, { 0.0F, -2.0F }, CubicBezierEasingFunction_11());
            result.InsertKeyFrame(0.683544278F, { 0.0F, 0.0F }, CubicBezierEasingFunction_12());
            result.InsertKeyFrame(0.740506351F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.772151887F, { 0.0F, -10.0F }, _cubicBezierEasingFunction_03);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_4()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 35.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.58227849F, { 0.0F, 35.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.620253146F, { 0.0F, -24.2999992F }, _cubicBezierEasingFunction_09);
            result.InsertKeyFrame(0.645569623F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_10);
            result.InsertKeyFrame(0.66455698F, { 0.0F, -2.0F }, _cubicBezierEasingFunction_11);
            result.InsertKeyFrame(0.683544278F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_12);
            result.InsertKeyFrame(0.740506351F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_00);
            result.InsertKeyFrame(0.772151887F, { 0.0F, -10.0F }, _cubicBezierEasingFunction_03);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_5()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 0.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.740506351F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.784810126F, { 0.0F, -119.599998F }, _cubicBezierEasingFunction_03);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Scale
        Vector2KeyFrameAnimation ScaleVector2Animation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 1.0F, 1.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.740506351F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.772151887F, { 0.846000016F, 0.846000016F }, _cubicBezierEasingFunction_03);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Scale
        Vector2KeyFrameAnimation ScaleVector2Animation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 1.0F, 1.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.740506351F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.784810126F, { 0.771000028F, 0.771000028F }, _cubicBezierEasingFunction_03);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_00()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0443037972F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.272151887F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_01()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0822784826F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.153552294F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_02()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.272151887F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.569620252F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle 2
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_03()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.272151887F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.525316477F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_04()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.518987358F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.772151887F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_05()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.772151887F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH 2
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_06()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.41772151F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.5F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_07()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.215189874F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.278544366F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_08()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.291139245F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.362413049F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_09()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.74683547F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.810189962F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_10()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.854430377F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.955696225F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        LineAnimation_AnimatedVisual_UAPv11(Compositor compositor)
            : _c{compositor}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 140.0F, 140.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 11);
        }
    };

    class LineAnimation_AnimatedVisual_UAPv7 : public winrt::implements<LineAnimation_AnimatedVisual_UAPv7,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 52666666L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionColorBrush _animatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1{ nullptr };
        CompositionColorBrush _animatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1{ nullptr };
        CompositionColorBrush _animatedColorBrush_TransparentWhite_to_TransparentWhite{ nullptr };
        CompositionColorBrush _animatedColorBrush_White_to_TransparentWhite{ nullptr };
        CompositionColorBrush _colorBrush_AlmostDarkTurquoise_FF00D1C1{ nullptr };
        CompositionColorBrush _colorBrush_White{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_2{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_3{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_4{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_5{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_6{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_7{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateColorKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InterpolationColorSpace(CompositionColorSpace::Rgb);
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateScalarKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, float2 initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateVector2KeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix, CompositionBrush fillBrush)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            result.FillBrush(fillBrush);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Bed
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_00()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 2.796F, 69.3069992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 2.77699995F, 69.7890015F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Bed
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_01()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -3.74900007F, 69.3069992F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -3.76799989F, 69.7890015F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Bed
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_02()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 3.90400004F, 67.0790024F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 3.90499997F, 68.3720016F });
            sink->AddBezier({ { 3.90499997F, 68.875F }, { 3.49799991F, 69.2829971F }, { 2.99499989F, 69.2829971F } });
            sink->AddLine({ -3.90400004F, 69.2829971F });
            sink->AddBezier({ { -4.40700006F, 69.2829971F }, { -4.81500006F, 68.875F }, { -4.81500006F, 68.3720016F } });
            sink->AddLine({ -4.81599998F, 67.0790024F });
            sink->AddLine({ -4.76399994F, 66.6050034F });
            sink->AddLine({ -4.75899982F, 65.7949982F });
            sink->AddBezier({ { -4.75899982F, 65.0800018F }, { -4.17799997F, 64.5F }, { -3.46300006F, 64.5F } });
            sink->AddLine({ 2.54999995F, 64.5F });
            sink->AddBezier({ { 3.2650001F, 64.5F }, { 3.84599996F, 65.0800018F }, { 3.84599996F, 65.7949982F } });
            sink->AddLine({ 3.83999991F, 66.6050034F });
            sink->AddLine({ 3.90400004F, 67.0790024F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Bed
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_03()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -4.81799984F, 67.0820007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 3.90300012F, 67.0820007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Bed
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_04()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 3.83999991F, 66.6009979F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -4.76499987F, 66.6009979F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Bed
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_05()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 27.8439999F, 22.9839993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 12.4060001F, 22.9839993F });
            sink->AddBezier({ { 9.54300022F, 22.9839993F }, { 7.22100019F, 20.6620007F }, { 7.22100019F, 17.7989998F } });
            sink->AddLine({ 7.22100019F, 4.68499994F });
            sink->AddBezier({ { 7.22100019F, 1.82200003F }, { 9.54300022F, -0.5F }, { 12.4060001F, -0.5F } });
            sink->AddLine({ 27.8439999F, -0.5F });
            sink->AddBezier({ { 30.7070007F, -0.5F }, { 33.0289993F, 1.82200003F }, { 33.0289993F, 4.68499994F } });
            sink->AddLine({ 33.0289993F, 17.7989998F });
            sink->AddBezier({ { 33.0289993F, 20.6620007F }, { 30.7070007F, 22.9839993F }, { 27.8439999F, 22.9839993F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Bed
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_06()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -11.4449997F, 22.9839993F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -26.8829994F, 22.9839993F });
            sink->AddBezier({ { -29.7460003F, 22.9839993F }, { -32.0680008F, 20.6620007F }, { -32.0680008F, 17.7989998F } });
            sink->AddLine({ -32.0680008F, 4.68499994F });
            sink->AddBezier({ { -32.0680008F, 1.82200003F }, { -29.7460003F, -0.5F }, { -26.8829994F, -0.5F } });
            sink->AddLine({ -11.4449997F, -0.5F });
            sink->AddBezier({ { -8.58199978F, -0.5F }, { -6.26000023F, 1.82200003F }, { -6.26000023F, 4.68499994F } });
            sink->AddLine({ -6.26000023F, 17.7989998F });
            sink->AddBezier({ { -6.26000023F, 20.6620007F }, { -8.58199978F, 22.9839993F }, { -11.4449997F, 22.9839993F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_07()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_08().get()->Geometry(),
                Geometry_09().get()->Geometry(),
                Geometry_10().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_08()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 218.330002F, 118.837997F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 201.669998F, 144.987F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_09()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 149.945999F, 94.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 149.945999F, 146.169006F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_10()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 78.4459991F, 116.280998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 99.197998F, 144.987F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Spray Bottle
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_11()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_12().get()->Geometry(),
                Geometry_13().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_12()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 10.7010002F, -71.6009979F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 10.7010002F, -71.6009979F }, { 25.177F, -52.2669983F }, { 35.7420006F, -50.5940018F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Spray Bottle
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_13()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 32.1829987F, -76.2480011F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 32.1829987F, -76.2480011F }, { 28.5319996F, -55.5999985F }, { 35.7420006F, -51.0730019F } });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Spray Bottle
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_14()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -34.7280006F, 9.47000027F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 1.12899995F, 9.60200024F });
            sink->AddLine({ 18.5990009F, 9.49499989F });
            sink->AddBezier({ { 18.5990009F, 1.39300001F }, { 18.6879997F, -6.10699987F }, { 24.2000008F, -6.19700003F } });
            sink->AddLine({ 29.5849991F, -6.19700003F });
            sink->AddBezier({ { 31.7689991F, -6.19700003F }, { 33.5400009F, -7.96799994F }, { 33.5400009F, -10.1520004F } });
            sink->AddBezier({ { 33.5400009F, -12.3360004F }, { 31.7689991F, -14.1070004F }, { 29.5849991F, -14.1070004F } });
            sink->AddLine({ -19.4729996F, -14.0109997F });
            sink->AddBezier({ { -23.9759998F, -14.0109997F }, { -41.1269989F, -10.4820004F }, { -41.1269989F, -5.97900009F } });
            sink->AddLine({ -41.1269989F, -2.38700008F });
            sink->AddLine({ -35.0040016F, -2.38700008F });
            sink->AddLine({ -34.7280006F, 9.47000027F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Spray Bottle
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_15()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 23.7810001F, -13.8240004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 23.6310005F, -7.24800014F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Spray Bottle 2
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_16()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 9.5539999F, 88.4400024F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -25.1480007F, 88.2149963F });
            sink->AddBezier({ { -30.6700001F, 88.2149963F }, { -35.1459999F, 83.7399979F }, { -35.1459999F, 78.2180023F } });
            sink->AddLine({ -35.5F, 63.6759987F });
            sink->AddBezier({ { -35.5F, 60.7010002F }, { -35.3409996F, 55.9449997F }, { -35.3409996F, 55.9449997F } });
            sink->AddLine({ -35.2809982F, 47.1419983F });
            sink->AddLine({ -35.4239998F, 9.47000027F });
            sink->AddLine({ 18.7830009F, 9.49499989F });
            sink->AddLine({ 19.0879993F, 47.125F });
            sink->AddLine({ 19.1860008F, 56.0999985F });
            sink->AddBezier({ { 19.1860008F, 56.0999985F }, { 19.1970005F, 60.887001F }, { 19.1970005F, 63.8079987F } });
            sink->AddLine({ 19.5510006F, 78.4420013F });
            sink->AddBezier({ { 19.5510006F, 83.9639969F }, { 15.0760002F, 88.4400024F }, { 9.5539999F, 88.4400024F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Spray Bottle 2
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_17()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -33.480999F, 49.1800003F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 18.9379997F, 49.4550018F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Toaster
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_18()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_19().get()->Geometry(),
                Geometry_20().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Toaster
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_19()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -59.5040016F, 59.0369987F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -59.5040016F, 64.3889999F }, { -63.8419991F, 68.7249985F }, { -69.1940002F, 68.7249985F } });
            sink->AddBezier({ { -74.5439987F, 68.7249985F }, { -78.8820038F, 64.3889999F }, { -78.8820038F, 59.0369987F } });
            sink->AddBezier({ { -78.8820038F, 53.6860008F }, { -74.5439987F, 49.348999F }, { -69.1940002F, 49.348999F } });
            sink->AddBezier({ { -63.8419991F, 49.348999F }, { -59.5040016F, 53.6860008F }, { -59.5040016F, 59.0369987F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Toaster
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_20()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 66.1110001F, 59.0369987F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 66.1110001F, 64.3889999F }, { 61.7739983F, 68.7249985F }, { 56.4220009F, 68.7249985F } });
            sink->AddBezier({ { 51.0719986F, 68.7249985F }, { 46.7330017F, 64.3889999F }, { 46.7330017F, 59.0369987F } });
            sink->AddBezier({ { 46.7330017F, 53.6860008F }, { 51.0719986F, 49.348999F }, { 56.4220009F, 49.348999F } });
            sink->AddBezier({ { 61.7739983F, 49.348999F }, { 66.1110001F, 53.6860008F }, { 66.1110001F, 59.0369987F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Toaster
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_21()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 89.2450027F, 18.2520008F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 71.3769989F, 18.2520008F });
            sink->AddLine({ 71.3769989F, 7.62900019F });
            sink->AddLine({ 78.6220016F, 7.62900019F });
            sink->AddBezier({ { 84.4889984F, 7.62900019F }, { 89.2450027F, 12.3850002F }, { 89.2450027F, 18.2520008F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Toaster
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_22()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 57.4529991F, -49.4640007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { 57.5760002F, -59.6910019F }, { 49.3849983F, -68.0820007F }, { 39.1580009F, -68.2050018F } });
            sink->AddBezier({ { 31.9610004F, -68.2919998F }, { 25.6790009F, -64.2590027F }, { 22.5419998F, -58.2989998F } });
            sink->AddBezier({ { 19.5489998F, -64.3320007F }, { 13.3660002F, -68.5149994F }, { 6.16900015F, -68.6019974F } });
            sink->AddBezier({ { -4.05800009F, -68.7249985F }, { -12.4490004F, -60.5340004F }, { -12.5719995F, -50.3069992F } });
            sink->AddBezier({ { -12.6359997F, -45.0029984F }, { -10.46F, -40.1959991F }, { -6.92700005F, -36.7770004F } });
            sink->AddLine({ -7.35099983F, -1.46899998F });
            sink->AddLine({ 51.0589981F, -0.765999973F });
            sink->AddLine({ 51.4840012F, -36.0740013F });
            sink->AddBezier({ { 55.0979996F, -39.4070015F }, { 57.3889999F, -44.1599998F }, { 57.4529991F, -49.4640007F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Toaster
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_23()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -0.890999973F, -49.4640007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -0.768000007F, -59.6910019F }, { -8.95899963F, -68.0820007F }, { -19.1860008F, -68.2050018F } });
            sink->AddBezier({ { -26.3829994F, -68.2919998F }, { -32.6650009F, -64.2590027F }, { -35.8019981F, -58.2989998F } });
            sink->AddBezier({ { -38.7949982F, -64.3320007F }, { -44.9780006F, -68.5149994F }, { -52.1749992F, -68.6019974F } });
            sink->AddBezier({ { -62.4020004F, -68.7249985F }, { -70.7929993F, -60.5340004F }, { -70.9160004F, -50.3069992F } });
            sink->AddBezier({ { -70.9800034F, -45.0029984F }, { -68.8040009F, -40.1959991F }, { -65.2710037F, -36.7770004F } });
            sink->AddLine({ -65.6959991F, -1.46899998F });
            sink->AddLine({ -7.28599977F, -0.765999973F });
            sink->AddLine({ -6.86000013F, -36.0740013F });
            sink->AddBezier({ { -3.24600005F, -39.4070015F }, { -0.954999983F, -44.1599998F }, { -0.890999973F, -49.4640007F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Toaster
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_24()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 36.3419991F, 88.9160004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -48.8740005F, 88.9160004F });
            sink->AddLine({ -48.9199982F, -2.34599996F });
            sink->AddBezier({ { -48.9199982F, -24.2549992F }, { -31.1580009F, -42.0169983F }, { -9.2489996F, -42.0169983F } });
            sink->AddLine({ -3.37400007F, -42.0169983F });
            sink->AddBezier({ { 18.5349998F, -42.0169983F }, { 36.2960014F, -24.2549992F }, { 36.2960014F, -2.34599996F } });
            sink->AddLine({ 36.3419991F, 88.9160004F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Door
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_25()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 52.2809982F, 23.1429996F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 52.2809982F, 28.3479996F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Door
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - Path 4+Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_26()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[4]
            {
                Geometry_27().get()->Geometry(),
                Geometry_28().get()->Geometry(),
                Geometry_29().get()->Geometry(),
                Geometry_30().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                4,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Door
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_27()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 40.5410004F, 10.9090004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.36400032F, 10.9090004F });
            sink->AddLine({ 8.36400032F, -25.5200005F });
            sink->AddLine({ 40.5410004F, -25.5200005F });
            sink->AddLine({ 40.5410004F, 10.9090004F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Door
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_28()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -9.34200001F, 10.9090004F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -41.519001F, 10.9090004F });
            sink->AddLine({ -41.519001F, -25.5200005F });
            sink->AddLine({ -9.34200001F, -25.5200005F });
            sink->AddLine({ -9.34200001F, 10.9090004F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Door
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_29()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 40.5820007F, -48.5110016F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 8.40499973F, -48.5110016F });
            sink->AddLine({ 8.36400032F, -57.9830017F });
            sink->AddBezier({ { 8.36400032F, -66.8679962F }, { 15.5679998F, -74.0709991F }, { 24.4529991F, -74.0709991F } });
            sink->AddBezier({ { 33.3380013F, -74.0709991F }, { 40.5410004F, -66.8679962F }, { 40.5410004F, -57.9830017F } });
            sink->AddLine({ 40.5820007F, -48.5110016F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - - Layer aggregator
        // - - - - Layer: Door
        // - - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // - - Path 4+Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_30()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -9.30099964F, -48.5110016F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -41.4780006F, -48.5110016F });
            sink->AddLine({ -41.519001F, -57.9830017F });
            sink->AddBezier({ { -41.519001F, -66.8679962F }, { -34.3149986F, -74.0709991F }, { -25.4300003F, -74.0709991F } });
            sink->AddBezier({ { -16.5450001F, -74.0709991F }, { -9.34200001F, -66.8679962F }, { -9.34200001F, -57.9830017F } });
            sink->AddLine({ -9.30099964F, -48.5110016F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Door
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_31()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 81.5F, 55.3230019F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -83.0F, 55.3230019F });
            sink->AddLine({ -83.0F, -1.29999995F });
            sink->AddBezier({ { -83.0F, -25.6000004F }, { -63.3009987F, -45.2999992F }, { -39.0F, -45.2999992F } });
            sink->AddLine({ 37.5F, -45.2999992F });
            sink->AddBezier({ { 61.8009987F, -45.2999992F }, { 81.5F, -25.6000004F }, { 81.5F, -1.29999995F } });
            sink->AddLine({ 81.5F, 55.3230019F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - - Layer aggregator
        // - - - Layer: Door
        // - -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        winrt::com_ptr<CanvasGeometry> Geometry_32()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 63.1990013F, 97.4550018F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -62.6500015F, 97.3519974F });
            sink->AddLine({ -62.3800011F, 96.302002F });
            sink->AddLine({ 62.3800011F, 96.302002F });
            sink->AddLine({ 63.1990013F, 97.4550018F });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_33()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_34().get()->Geometry(),
                Geometry_35().get()->Geometry(),
                Geometry_36().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_34()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 257.140991F, 200.388F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 208.893997F, 186.037003F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_35()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 280.382996F, 172.167007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 209.873993F, 172.490005F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_36()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 259.437988F, 149.367996F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 208.893997F, 158.727997F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_37()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[2]
            {
                Geometry_38().get()->Geometry(),
                Geometry_39().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                2,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_38()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 163.5F, 152.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 163.5F, 227.820007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_39()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 134.330002F, 152.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 134.330002F, 227.820007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_40()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_41().get()->Geometry(),
                Geometry_42().get()->Geometry(),
                Geometry_43().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_41()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 188.526001F, 124.220001F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 170.042999F, 142.348999F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_42()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 146.660995F, 107.0F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 146.660995F, 143.169006F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_43()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 101.25F, 122.446999F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 122.570999F, 142.348999F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_44()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_45().get()->Geometry(),
                Geometry_46().get()->Geometry(),
                Geometry_47().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_45()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 107.519997F, 269.640991F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 107.398003F, 178.820007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_46()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 149.878998F, 269.820007F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 149.757996F, 179.0F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_47()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 191.688995F, 269.640991F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 191.567993F, 178.820007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_48()
        {
            winrt::com_ptr<ID2D1Geometry> geometries[3]
            {
                Geometry_49().get()->Geometry(),
                Geometry_50().get()->Geometry(),
                Geometry_51().get()->Geometry(),
            };
            winrt::com_ptr<ID2D1GeometryGroup> group{ nullptr };
            winrt::check_hresult(_d2dFactory->CreateGeometryGroup(
                D2D1_FILL_MODE_ALTERNATE,
                (ID2D1Geometry**)(&geometries),
                3,
                group.put()));
            auto result = winrt::make_self<CanvasGeometry>(group);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_49()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 59.0F, 401.199005F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 77.4840012F, 375.070007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_50()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 140.865005F, 418.419006F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 140.981003F, 377.25F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - Path 3+Path 2+Path 1.PathGeometry
        winrt::com_ptr<CanvasGeometry> Geometry_51()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ 226.276001F, 402.971985F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ 204.955994F, 375.070007F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.75316453F, { 0xFF, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.772151887F, { 0x00, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Spray Bottle
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_0()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.297468364F, { 0x00, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.303797454F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_1()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.822784781F, { 0x00, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.829113901F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_2()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.83544302F, { 0x00, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.841772139F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_0);
            return result;
        }

        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0x00, 0xD1, 0xC1 }, _stepThenHoldEasingFunction);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.0632911399F, { 0x00, 0x00, 0xD1, 0xC1 }, _holdThenStepEasingFunction);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.0696202517F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_0);
            // AlmostDarkTurquoise_FF00D1C1
            result.InsertKeyFrame(0.234177217F, { 0xFF, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_0);
            // TransparentAlmostDarkTurquoise_0000D1C1
            result.InsertKeyFrame(0.240506336F, { 0x00, 0x00, 0xD1, 0xC1 }, _cubicBezierEasingFunction_0);
            return result;
        }

        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentWhite_to_TransparentWhite()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0xFF, 0xFF, 0xFF }, StepThenHoldEasingFunction());
            // TransparentWhite
            result.InsertKeyFrame(0.0632911399F, { 0x00, 0xFF, 0xFF, 0xFF }, HoldThenStepEasingFunction());
            // White
            result.InsertKeyFrame(0.0696202517F, { 0xFF, 0xFF, 0xFF, 0xFF }, CubicBezierEasingFunction_0());
            // White
            result.InsertKeyFrame(0.234177217F, { 0xFF, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_0);
            // TransparentWhite
            result.InsertKeyFrame(0.240506336F, { 0x00, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Color
        ColorKeyFrameAnimation ColorAnimation_TransparentWhite_to_White()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0x00, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // TransparentWhite
            result.InsertKeyFrame(0.83544302F, { 0x00, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // White
            result.InsertKeyFrame(0.841772139F, { 0xFF, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_0);
            return result;
        }

        // Color
        ColorKeyFrameAnimation ColorAnimation_White_to_TransparentWhite()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xFF, 0xFF, 0xFF }, _stepThenHoldEasingFunction);
            // White
            result.InsertKeyFrame(0.75316453F, { 0xFF, 0xFF, 0xFF, 0xFF }, _holdThenStepEasingFunction);
            // TransparentWhite
            result.InsertKeyFrame(0.772151887F, { 0x00, 0xFF, 0xFF, 0xFF }, _cubicBezierEasingFunction_0);
            return result;
        }

        CompositionColorBrush AnimatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1()
        {
            const auto result = _animatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1 = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionColorBrush AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_0()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_0(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionColorBrush AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_1()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionColorBrush AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_2()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_2(), _rootProgress);
            return result;
        }

        CompositionColorBrush AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1()
        {
            const auto result = _animatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1 = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1(), _rootProgress);
            return result;
        }

        CompositionColorBrush AnimatedColorBrush_TransparentWhite_to_TransparentWhite()
        {
            const auto result = _animatedColorBrush_TransparentWhite_to_TransparentWhite = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentWhite_to_TransparentWhite(), RootProgress());
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionColorBrush AnimatedColorBrush_TransparentWhite_to_White()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_TransparentWhite_to_White(), _rootProgress);
            return result;
        }

        CompositionColorBrush AnimatedColorBrush_White_to_TransparentWhite()
        {
            const auto result = _animatedColorBrush_White_to_TransparentWhite = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_White_to_TransparentWhite(), _rootProgress);
            return result;
        }

        CompositionColorBrush ColorBrush_AlmostDarkTurquoise_FF00D1C1()
        {
            return _colorBrush_AlmostDarkTurquoise_FF00D1C1 = _c.CreateColorBrush({ 0xFF, 0x00, 0xD1, 0xC1 });
        }

        CompositionColorBrush ColorBrush_White()
        {
            return _colorBrush_White = _c.CreateColorBrush({ 0xFF, 0xFF, 0xFF, 0xFF });
        }

        // Layer aggregator
        // Layer: Bed
        CompositionContainerShape ContainerShape_0()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_00());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_01());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_02());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_03());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_04());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_05());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_06());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_00(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Spray Bottle
        CompositionContainerShape ContainerShape_1()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_08());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_09());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_10());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_02(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Spray Bottle 2
        CompositionContainerShape ContainerShape_2()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_11());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_12());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_03(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Toaster
        CompositionContainerShape ContainerShape_3()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_13());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_14());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_15());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_16());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_17());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_04(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Door
        CompositionContainerShape ContainerShape_4()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_18());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_19());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_20());
            // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
            shapes.Append(SpriteShape_21());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_05(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_00()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_00())));
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_01()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_01())));
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_02()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_02())));
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_03()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_03())));
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_04()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_04())));
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_05()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_05())));
        }

        // - - Layer aggregator
        // - Layer: Bed
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_06()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_06())));
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_07()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_07())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 1.0F);
            propertySet.InsertScalar(L"TStart", 1.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_1_to_0_0(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_1_to_0_0(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_08()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_11())));
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_09()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_14())));
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_10()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_15())));
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle 2
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_11()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_16())));
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle 2
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_12()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_17())));
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_13()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_18())));
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_14()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_21())));
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_15()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_22())));
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_16()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_23())));
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_17()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_24())));
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_18()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_25())));
            StartProgressBoundAnimation(result, L"TrimEnd", TrimEndScalarAnimation_0_to_1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Path 4+Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_19()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_26())));
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_20()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_31())));
        }

        // - - Layer aggregator
        // - Layer: Door
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        CompositionPathGeometry PathGeometry_21()
        {
            return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_32())));
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_22()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_33())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 1.0F);
            propertySet.InsertScalar(L"TStart", 1.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_1_to_0_1(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_1_to_0_1(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // Path 3+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_23()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_37())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.0F);
            propertySet.InsertScalar(L"TStart", 0.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_0_to_0p9_0(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_0_to_0p9_0(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_24()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_40())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 1.0F);
            propertySet.InsertScalar(L"TStart", 1.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_1_to_0_2(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_1_to_0_2(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_25()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_44())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.0F);
            propertySet.InsertScalar(L"TStart", 0.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_0_to_0p9_1(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_0_to_0p9_1(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        CompositionPathGeometry PathGeometry_26()
        {
            const auto result = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_48())));
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 1.0F);
            propertySet.InsertScalar(L"TStart", 1.0F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_1_to_0_3(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_1_to_0_3(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_00()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_00(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(ColorBrush_AlmostDarkTurquoise_FF00D1C1());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_01()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_01(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_02()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_02(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_03()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_03(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_04()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_04(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_05()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_05(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F }, AnimatedColorBrush_TransparentWhite_to_TransparentWhite());
            result.StrokeBrush(AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        // Path 1
        CompositionSpriteShape SpriteShape_06()
        {
            // Offset:<69.4896, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_06(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 74.2368011F }, _animatedColorBrush_TransparentWhite_to_TransparentWhite);
            result.StrokeBrush(_animatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_07()
        {
            // Offset:<14.273601, -5.9424>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_07(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 14.2736006F, -5.94239998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_01(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle
        // Path 2+Path 1
        CompositionSpriteShape SpriteShape_08()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_08(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F });
            result.CenterPoint({ 20.5179996F, -70.3669968F });
            result.StrokeBrush(AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_0());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"RotationAngleInDegrees", RotationAngleInDegreesScalarAnimation_0_to_0(), _rootProgress);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_0(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle
        // Path 1
        CompositionSpriteShape SpriteShape_09()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_09(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F }, ColorBrush_White());
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle
        // Path 1
        CompositionSpriteShape SpriteShape_10()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_10(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle 2
        // Path 1
        CompositionSpriteShape SpriteShape_11()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_11(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F }, _colorBrush_White);
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle 2
        // Path 1
        CompositionSpriteShape SpriteShape_12()
        {
            // Offset:<72.6448, 74.2368>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_12(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 72.6447983F, 74.2368011F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 2+Path 1
        CompositionSpriteShape SpriteShape_13()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_13(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ScaleVector2Animation_0(), _rootProgress);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_1(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 1
        CompositionSpriteShape SpriteShape_14()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_14(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_2(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 1
        CompositionSpriteShape SpriteShape_15()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_15(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F }, AnimatedColorBrush_White_to_TransparentWhite());
            result.StrokeBrush(AnimatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1());
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_3(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 1
        CompositionSpriteShape SpriteShape_16()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_16(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F }, _animatedColorBrush_White_to_TransparentWhite);
            result.StrokeBrush(_animatedColorBrush_AlmostDarkTurquoise_FF00D1C1_to_TransparentAlmostDarkTurquoise_0000D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_4(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        // Path 1
        CompositionSpriteShape SpriteShape_17()
        {
            // Offset:<71.7168, 73.1232>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_17(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 71.7167969F, 73.1231995F }, _colorBrush_White);
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ScaleVector2Animation_1(), _rootProgress);
            StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation_5(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        // Path 1
        CompositionSpriteShape SpriteShape_18()
        {
            // Offset:<69.4896, 69.5968>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_18(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 69.5968018F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        // Path 4+Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_19()
        {
            // Offset:<69.4896, 69.5968>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_19(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 69.5968018F });
            result.StrokeBrush(AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_1());
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        // Path 1
        CompositionSpriteShape SpriteShape_20()
        {
            // Offset:<69.4896, 69.5968>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_20(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 69.5968018F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        // Path 1
        CompositionSpriteShape SpriteShape_21()
        {
            // Offset:<69.4896, 69.5968>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_21(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 69.4896011F, 69.5968018F }, AnimatedColorBrush_TransparentWhite_to_White());
            result.StrokeBrush(AnimatedColorBrush_TransparentAlmostDarkTurquoise_0000D1C1_to_AlmostDarkTurquoise_FF00D1C1_2());
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_22()
        {
            // Offset:<16.500801, -19.6768>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_22(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 16.5008011F, -19.6767998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_06(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 1
        CompositionSpriteShape SpriteShape_23()
        {
            // Offset:<13.995201, -5.9424>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_23(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 13.9952011F, -5.94239998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_07(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_24()
        {
            // Offset:<16.500801, -19.6768>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_24(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 16.5008011F, -19.6767998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_08(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_25()
        {
            // Offset:<13.995201, -5.9424>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_25(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 13.9952011F, -5.94239998F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_09(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Path 3+Path 2+Path 1
        CompositionSpriteShape SpriteShape_26()
        {
            // Offset:<16.500801, -23.8528>, Rotation:-0.012577532210852066 degrees,
            // Scale:<0.3712, 0.3712>
            const auto result = CreateSpriteShape(PathGeometry_26(), { 0.371199995F, 0.0F, 0.0F, 0.371199995F, 16.5008011F, -23.8528004F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(_colorBrush_AlmostDarkTurquoise_FF00D1C1);
            result.StrokeDashCap(CompositionStrokeCap::Round);
            const auto strokeDashArray = result.StrokeDashArray();
            strokeDashArray.Append(0.0F);
            strokeDashArray.Append(10.0F);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeLineJoin(CompositionStrokeLineJoin::Round);
            result.StrokeMiterLimit(2.0F);
            result.StrokeThickness(5.0F);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_10(), _rootProgress);
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_2()
        {
            return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.333000004F }, { 0.0F, 0.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_3()
        {
            return _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_4()
        {
            return _cubicBezierEasingFunction_4 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.134000003F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_5()
        {
            return _cubicBezierEasingFunction_5 = _c.CreateCubicBezierEasingFunction({ 0.730000019F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_6()
        {
            return _cubicBezierEasingFunction_6 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.234999999F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_7()
        {
            return _cubicBezierEasingFunction_7 = _c.CreateCubicBezierEasingFunction({ 0.721000016F, 0.0F }, { 0.833000004F, 0.833000004F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Rotation
        ScalarKeyFrameAnimation RotationAngleInDegreesScalarAnimation_0_to_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.41772151F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.436708868F, 31.3999996F, CubicBezierEasingFunction_1());
            result.InsertKeyFrame(0.474683553F, 31.3999996F, CubicBezierEasingFunction_2());
            result.InsertKeyFrame(0.487341762F, 0.0F, CubicBezierEasingFunction_3());
            return result;
        }

        // Path 3+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_0_to_0p9_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.223107591F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.231025323F, 0.305999994F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.254784822F, 0.907000005F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.262703806F, 0.899999976F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_0_to_0p9_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.749987364F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.757905066F, 0.305999994F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.786430359F, 0.907000005F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.794349372F, 0.899999976F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0822784826F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.104449369F, 1.0F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.137711138F, 0.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.41772151F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.449367076F, 1.0F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.493668169F, 0.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_2()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.291139245F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.313310117F, 1.0F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.346571892F, 0.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_1_to_0_3()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.854430377F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.893987358F, 1.0F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.949364364F, 0.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Door
        // -  Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // TrimEnd
        ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.829113901F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.860759497F, 1.0F, _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.666999996F, 1.0F }));
            return result;
        }

        // Path 3+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_0_to_0p9_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.231025323F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.23894304F, 0.151999995F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.254784822F, 0.224999994F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.262703806F, 0.899999976F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_0_to_0p9_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 0.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.757905066F, 0.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.765822768F, 0.151999995F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.786430359F, 0.224999994F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.794349372F, 0.899999976F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_0()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.0822784826F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.115537971F, 0.00999999978F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.137711138F, 0.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.41772151F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.462025315F, 0.00999999978F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.493668169F, 0.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_2()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.291139245F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.324398726F, 0.00999999978F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.346571892F, 0.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Path 3+Path 2+Path 1.PathGeometry
        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_1_to_0_3()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 1.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.854430377F, 1.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.909810126F, 0.00999999978F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.949364364F, 0.0F, _cubicBezierEasingFunction_0);
            return result;
        }

        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 140.0F, 140.0F });
            const auto shapes = result.Shapes();
            // Layer: Bed
            shapes.Append(ContainerShape_0());
            // Layer: SPLASH
            shapes.Append(SpriteShape_07());
            // Layer: Spray Bottle
            shapes.Append(ContainerShape_1());
            // Layer: Spray Bottle 2
            shapes.Append(ContainerShape_2());
            // Layer: Toaster
            shapes.Append(ContainerShape_3());
            // Layer: Door
            shapes.Append(ContainerShape_4());
            // Layer: SPLASH 2
            shapes.Append(SpriteShape_22());
            // Layer: SPLASH
            shapes.Append(SpriteShape_23());
            // Layer: SPLASH
            shapes.Append(SpriteShape_24());
            // Layer: SPLASH
            shapes.Append(SpriteShape_25());
            // Layer: SPLASH
            shapes.Append(SpriteShape_26());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Spray Bottle
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { -0.100000001F, 0.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.41772151F, { -0.100000001F, 0.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.436708868F, { 0.0F, -5.0F }, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.474683553F, { 0.0F, -5.0F }, _cubicBezierEasingFunction_2);
            result.InsertKeyFrame(0.487341762F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_3);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 0.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.740506351F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.772151887F, { 0.0F, -88.3000031F }, _cubicBezierEasingFunction_3);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_2()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { -26.0F, 11.6999998F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.525316477F, { -26.0F, 11.6999998F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.563291132F, { 0.0F, 11.6999998F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.58227849F, { 0.0F, 11.6999998F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.601265848F, { 0.0F, -7.0F }, _c.CreateCubicBezierEasingFunction({ 0.442000002F, 0.0F }, { 0.833000004F, 0.833000004F }));
            result.InsertKeyFrame(0.740506351F, { 0.0F, -7.0F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.772151887F, { -31.0F, -79.5F }, _c.CreateCubicBezierEasingFunction({ 0.333000004F, 0.0F }, { 0.833000004F, 0.842000008F }));
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_3()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 35.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.58227849F, { 0.0F, 35.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.620253146F, { 0.0F, -18.2999992F }, CubicBezierEasingFunction_4());
            result.InsertKeyFrame(0.645569623F, { 0.0F, 0.0F }, CubicBezierEasingFunction_5());
            result.InsertKeyFrame(0.66455698F, { 0.0F, -2.0F }, CubicBezierEasingFunction_6());
            result.InsertKeyFrame(0.683544278F, { 0.0F, 0.0F }, CubicBezierEasingFunction_7());
            result.InsertKeyFrame(0.740506351F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.772151887F, { 0.0F, -10.0F }, _cubicBezierEasingFunction_3);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_4()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 35.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.58227849F, { 0.0F, 35.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.620253146F, { 0.0F, -24.2999992F }, _cubicBezierEasingFunction_4);
            result.InsertKeyFrame(0.645569623F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_5);
            result.InsertKeyFrame(0.66455698F, { 0.0F, -2.0F }, _cubicBezierEasingFunction_6);
            result.InsertKeyFrame(0.683544278F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_7);
            result.InsertKeyFrame(0.740506351F, { 0.0F, 0.0F }, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.772151887F, { 0.0F, -10.0F }, _cubicBezierEasingFunction_3);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Offset
        Vector2KeyFrameAnimation OffsetVector2Animation_5()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.0F, 0.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.740506351F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.784810126F, { 0.0F, -119.599998F }, _cubicBezierEasingFunction_3);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Scale
        Vector2KeyFrameAnimation ScaleVector2Animation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 1.0F, 1.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.740506351F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.772151887F, { 0.846000016F, 0.846000016F }, _cubicBezierEasingFunction_3);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Toaster
        // Scale:0.3712,0.3712, Offset:<-16.68, -32.72>
        // Scale
        Vector2KeyFrameAnimation ScaleVector2Animation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 1.0F, 1.0F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.740506351F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.784810126F, { 0.771000028F, 0.771000028F }, _cubicBezierEasingFunction_3);
            return result;
        }

        // - Layer aggregator
        // Layer: Bed
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_00()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0443037972F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.272151887F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_01()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0822784826F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.153552294F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_02()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.272151887F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.569620252F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Spray Bottle 2
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_03()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.272151887F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.525316477F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Toaster
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_04()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.518987358F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.772151887F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Door
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_05()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.772151887F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH 2
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_06()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.41772151F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.5F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_07()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.215189874F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.278544366F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_08()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.291139245F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.362413049F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_09()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.74683547F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.810189962F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: SPLASH
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_10()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.854430377F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.955696225F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        LineAnimation_AnimatedVisual_UAPv7(Compositor compositor)
            : _c{compositor}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 140.0F, 140.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
        }
    };

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual LineAnimation::TryCreateAnimatedVisual(
        Compositor const& compositor,
        IInspectable& diagnostics)
    {
        diagnostics = nullptr;

        if (LineAnimation_AnimatedVisual_UAPv11::IsRuntimeCompatible())
        {
            return winrt::make<LineAnimation_AnimatedVisual_UAPv11>(compositor);
        }

        if (LineAnimation_AnimatedVisual_UAPv7::IsRuntimeCompatible())
        {
            return winrt::make<LineAnimation_AnimatedVisual_UAPv7>(compositor);
        }

        return nullptr;
    }

    double LineAnimation::FrameToProgress(double frameNumber)
    {
        return frameNumber / 158.0;
    }

    winrt::Windows::Foundation::Collections::IMapView<hstring, double> LineAnimation::Markers()
    {
        return winrt::single_threaded_map<winrt::hstring, double>(
            std::map<winrt::hstring, double>
            {
            }
        ).GetView();
    }

    void LineAnimation::SetColorProperty(hstring const&, Color)
    {
    }

    void LineAnimation::SetScalarProperty(hstring const&, double)
    {
    }
} // end namespace
