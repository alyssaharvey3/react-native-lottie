//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.90+ga9eb6fa111
//       
//       Command:
//           LottieGen -InterfaceBaseName Microsoft.UI.Xaml.Controls.IAnimatedVisual -Language Cppwinrt -WinUIVersion 2.4 -InputFile TwitterHeart.json
//       
//       Input file:
//           TwitterHeart.json (27150 bytes created 20:50-08:00 Dec 28 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |   376 |
// |--------------------------+-------|
// | Expression animators     |    95 |
// | KeyFrame animators       |    67 |
// | Reference parameters     |    95 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |    15 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |    29 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     3 |
// | CompositionSpriteShapes  |    18 |
// |--------------------------+-------|
// | Brushes                  |    18 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "pch.h"
#include "AnimatedVisuals.TwitterHeart.h"
#include "AnimatedVisuals.TwitterHeart.g.cpp"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#ifdef BUILD_WINDOWS
namespace ABI
{
#include <Windows.Graphics.Effects.Interop.h>
}
#else
#include <Windows.Graphics.Effects.Interop.h>
#endif
#include <winrt/Windows.Graphics.Effects.h>

using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::AnimatedVisuals::implementation
{
    class CanvasGeometry : public winrt::implements<CanvasGeometry,
        IGeometrySource2D,
        ::ABI::Windows::Graphics::IGeometrySource2DInterop>
    {
        winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

    public:
        CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
            : _geometry{ geometry }
        { }

        // IGeometrySource2D.
        winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
        {
            _geometry.copy_to(value);
            return S_OK;
        }

        // IGeometrySource2DInterop.
        IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
        {
            return E_NOTIMPL;
        }
    };
    class TwitterHeart_AnimatedVisual : public winrt::implements<TwitterHeart_AnimatedVisual,
            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
            IClosable>
    {
        winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
        static constexpr int64_t c_durationTicks{ 19333333L };
        Compositor const _c{ nullptr };
        ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
        CompositionPath _path{ nullptr };
        CompositionPathGeometry _pathGeometry_00{ nullptr };
        ContainerVisual _root{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
        CubicBezierEasingFunction _cubicBezierEasingFunction_1{ nullptr };
        ExpressionAnimation _rootProgress{ nullptr };
        ScalarKeyFrameAnimation _scalarAnimation_0p04_to_0p4{ nullptr };
        ScalarKeyFrameAnimation _strokeThicknessScalarAnimation_5_to_0_0{ nullptr };
        ScalarKeyFrameAnimation _strokeThicknessScalarAnimation_5_to_0_1{ nullptr };
        ScalarKeyFrameAnimation _tEndScalarAnimation_0p45_to_0p01{ nullptr };
        ScalarKeyFrameAnimation _tEndScalarAnimation_0p48_to_0p1{ nullptr };
        ScalarKeyFrameAnimation _tStartScalarAnimation_0p44_to_0{ nullptr };
        ScalarKeyFrameAnimation _tStartScalarAnimation_0p47_to_0p09{ nullptr };
        StepEasingFunction _holdThenStepEasingFunction{ nullptr };
        StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

        static void StartProgressBoundAnimation(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            CompositionAnimation animation,
            ExpressionAnimation controllerProgressExpression)
        {
            target.StartAnimation(animatedPropertyName, animation);
            const auto controller = target.TryGetAnimationController(animatedPropertyName);
            controller.Pause();
            controller.StartAnimation(L"Progress", controllerProgressExpression);
        }

        void BindProperty(
            CompositionObject target,
            winrt::hstring animatedPropertyName,
            winrt::hstring expression,
            winrt::hstring referenceParameterName,
            CompositionObject referencedObject)
        {
            _reusableExpressionAnimation.ClearAllParameters();
            _reusableExpressionAnimation.Expression(expression);
            _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
            target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
        }

        ColorKeyFrameAnimation CreateColorKeyFrameAnimation(float initialProgress, Color initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateColorKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InterpolationColorSpace(CompositionColorSpace::Rgb);
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateScalarKeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, float2 initialValue, CompositionEasingFunction initialEasingFunction)
        {
            const auto result = _c.CreateVector2KeyFrameAnimation();
            result.Duration(TimeSpan{ c_durationTicks });
            result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            return result;
        }

        CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, float3x2 transformMatrix, CompositionBrush fillBrush)
        {
            const auto result = _c.CreateSpriteShape(geometry);
            result.TransformMatrix(transformMatrix);
            result.FillBrush(fillBrush);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_0()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -4.58300018F, -10.1669998F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddBezier({ { -9.41600037F, -10.1669998F }, { -11.25F, -5.58300018F }, { -11.25F, -2.25F } });
            sink->AddBezier({ { -11.25F, 5.41699982F }, { -0.416999996F, 16.0830002F }, { 2.83299994F, 16.0830002F } });
            sink->AddBezier({ { 6.08300018F, 16.0830002F }, { 17.1669998F, 6.0F }, { 17.1669998F, -2.33299994F } });
            sink->AddBezier({ { 17.1669998F, -6.83300018F }, { 14.0839996F, -10.0F }, { 10.1669998F, -10.0F } });
            sink->AddBezier({ { 6.25F, -10.0F }, { 2.91700006F, -5.91699982F }, { 2.91700006F, -5.91699982F } });
            sink->AddBezier({ { 2.91700006F, -5.91699982F }, { 0.25F, -10.1669998F }, { -4.58300018F, -10.1669998F } });
            sink->EndFigure(D2D1_FIGURE_END_CLOSED);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        winrt::com_ptr<CanvasGeometry> Geometry_1()
        {
            winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
            winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
            winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
            winrt::check_hresult(path->Open(sink.put()));
            sink->BeginFigure({ -37.5F, -40.5F }, D2D1_FIGURE_BEGIN_FILLED);
            sink->AddLine({ -1.0F, 0.5F });
            sink->EndFigure(D2D1_FIGURE_END_OPEN);
            winrt::check_hresult(sink->Close());
            auto result = winrt::make_self<CanvasGeometry>(path);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: C1
        // - ShapeGroup: Ellipse 1
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostCrimson_FFFF0042_to_AlmostPlum_FFCE8EF7()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xFF, 0x00, 0x42 }, _stepThenHoldEasingFunction);
            // AlmostCrimson_FFFF0042
            result.InsertKeyFrame(0.284482747F, { 0xFF, 0xFF, 0x00, 0x42 }, _holdThenStepEasingFunction);
            // AlmostPlum_FFCE8EF7
            result.InsertKeyFrame(0.336206883F, { 0xFF, 0xCE, 0x8E, 0xF7 }, CubicBezierEasingFunction_1());
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-13.399999618530273, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightBlue_FF9BE2C9_to_AlmostRosyBrown_FFA0829E()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0x9B, 0xE2, 0xC9 }, _stepThenHoldEasingFunction);
            // AlmostLightBlue_FF9BE2C9
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0x9B, 0xE2, 0xC9 }, _holdThenStepEasingFunction);
            // AlmostRosyBrown_FFA0829E
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xA0, 0x82, 0x9E }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-220.3000030517578, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightBlue_FF9BE2C9_to_AlmostTan_FFC9BC99()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0x9B, 0xE2, 0xC9 }, _stepThenHoldEasingFunction);
            // AlmostLightBlue_FF9BE2C9
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0x9B, 0xE2, 0xC9 }, _holdThenStepEasingFunction);
            // AlmostTan_FFC9BC99
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xC9, 0xBC, 0x99 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-117.0999984741211, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightBlue_FF9ED1F4_to_AlmostSilver_FFB2D6A8()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0x9E, 0xD1, 0xF4 }, _stepThenHoldEasingFunction);
            // AlmostLightBlue_FF9ED1F4
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0x9E, 0xD1, 0xF4 }, _holdThenStepEasingFunction);
            // AlmostSilver_FFB2D6A8
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xB2, 0xD6, 0xA8 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightBlue_FF9EE0C6_to_AlmostDarkOrchid_FF8C44B5_0()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0x9E, 0xE0, 0xC6 }, _stepThenHoldEasingFunction);
            // AlmostLightBlue_FF9EE0C6
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0x9E, 0xE0, 0xC6 }, _holdThenStepEasingFunction);
            // AlmostOrchid_FFCC84C1
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xCC, 0x84, 0xC1 }, _cubicBezierEasingFunction_1);
            // AlmostDarkOrchid_FF8C44B5
            result.InsertKeyFrame(0.568965495F, { 0xFF, 0x8C, 0x44, 0xB5 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-206.89999389648438, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightBlue_FF9EE0C6_to_AlmostDarkOrchid_FF8C44B5_1()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0x9E, 0xE0, 0xC6 }, _stepThenHoldEasingFunction);
            // AlmostLightBlue_FF9EE0C6
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0x9E, 0xE0, 0xC6 }, _holdThenStepEasingFunction);
            // AlmostTan_FFC9BC99
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xC9, 0xBC, 0x99 }, _cubicBezierEasingFunction_1);
            // AlmostDarkOrchid_FF8C44B5
            result.InsertKeyFrame(0.568965495F, { 0xFF, 0x8C, 0x44, 0xB5 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-320, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightBlue_FFA0CEEF_to_AlmostPlum_FFD1A5E8()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xA0, 0xCE, 0xEF }, _stepThenHoldEasingFunction);
            // AlmostLightBlue_FFA0CEEF
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0xA0, 0xCE, 0xEF }, _holdThenStepEasingFunction);
            // AlmostPlum_FFD1A5E8
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xD1, 0xA5, 0xE8 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-55.900001525878906, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightBlue_FFA3CEF7_to_AlmostDarkOrchid_FF8C44B5()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xA3, 0xCE, 0xF7 }, _stepThenHoldEasingFunction);
            // AlmostLightBlue_FFA3CEF7
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0xA3, 0xCE, 0xF7 }, _holdThenStepEasingFunction);
            // AlmostSilver_FFB2D8A8
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xB2, 0xD8, 0xA8 }, _cubicBezierEasingFunction_1);
            // AlmostDarkOrchid_FF8C44B5
            result.InsertKeyFrame(0.568965495F, { 0xFF, 0x8C, 0x44, 0xB5 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-306.6000061035156, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightBlue_FFA8CCF7_to_AlmostPlum_FFD1A5E8()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xA8, 0xCC, 0xF7 }, _stepThenHoldEasingFunction);
            // AlmostLightBlue_FFA8CCF7
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0xA8, 0xCC, 0xF7 }, _holdThenStepEasingFunction);
            // AlmostPlum_FFD1A5E8
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xD1, 0xA5, 0xE8 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-103.69999694824219, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightBlue_FFB7D8F2_to_AlmostDarkOrchid_FF8C44B5()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xB7, 0xD8, 0xF2 }, _stepThenHoldEasingFunction);
            // AlmostLightBlue_FFB7D8F2
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0xB7, 0xD8, 0xF2 }, _holdThenStepEasingFunction);
            // AlmostSilver_FFB2D6AA
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xB2, 0xD6, 0xAA }, _cubicBezierEasingFunction_1);
            // AlmostDarkOrchid_FF8C44B5
            result.InsertKeyFrame(0.568965495F, { 0xFF, 0x8C, 0x44, 0xB5 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-154.8000030517578, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostLightPink_FFE299AF_to_AlmostDarkOrchid_FF8C44B5()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xE2, 0x99, 0xAF }, _stepThenHoldEasingFunction);
            // AlmostLightPink_FFE299AF
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0xE2, 0x99, 0xAF }, _holdThenStepEasingFunction);
            // AlmostSteelBlue_FF5499CC
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0x54, 0x99, 0xCC }, _cubicBezierEasingFunction_1);
            // AlmostDarkOrchid_FF8C44B5
            result.InsertKeyFrame(0.568965495F, { 0xFF, 0x8C, 0x44, 0xB5 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-271.70001220703125, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostPlum_FFC696E5_to_AlmostKhaki_FFE2D193()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xC6, 0x96, 0xE5 }, _stepThenHoldEasingFunction);
            // AlmostPlum_FFC696E5
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0xC6, 0x96, 0xE5 }, _holdThenStepEasingFunction);
            // AlmostKhaki_FFE2D193
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xE2, 0xD1, 0x93 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-258.29998779296875, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostPlum_FFC69EE2_to_AlmostDarkOrchid_FF8C44B5()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xC6, 0x9E, 0xE2 }, _stepThenHoldEasingFunction);
            // AlmostPlum_FFC69EE2
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0xC6, 0x9E, 0xE2 }, _holdThenStepEasingFunction);
            // AlmostSandyBrown_FFEABF54
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xEA, 0xBF, 0x54 }, _cubicBezierEasingFunction_1);
            // AlmostDarkOrchid_FF8C44B5
            result.InsertKeyFrame(0.568965495F, { 0xFF, 0x8C, 0x44, 0xB5 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-69.30000305175781, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostPlum_FFCC93ED_to_AlmostSilver_FFB2D8A8()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xCC, 0x93, 0xED }, _stepThenHoldEasingFunction);
            // AlmostPlum_FFCC93ED
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0xCC, 0x93, 0xED }, _holdThenStepEasingFunction);
            // AlmostSilver_FFB2D8A8
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0xB2, 0xD8, 0xA8 }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - - Layer aggregator
        // - - Layer: Dot1
        // -  Scale:0.4,0.4, RotationDegrees:-168.1999969482422, Offset:<50, 50>
        // Color
        ColorKeyFrameAnimation ColorAnimation_AlmostTan_FFDB9EAD_to_AlmostSteelBlue_FF5499CC()
        {
            const auto result = CreateColorKeyFrameAnimation(0.0F, { 0xFF, 0xDB, 0x9E, 0xAD }, _stepThenHoldEasingFunction);
            // AlmostTan_FFDB9EAD
            result.InsertKeyFrame(0.37931034F, { 0xFF, 0xDB, 0x9E, 0xAD }, _holdThenStepEasingFunction);
            // AlmostSteelBlue_FF5499CC
            result.InsertKeyFrame(0.482758611F, { 0xFF, 0x54, 0x99, 0xCC }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C1
        // ShapeGroup: Ellipse 1
        CompositionColorBrush AnimatedColorBrush_AlmostCrimson_FFFF0042_to_AlmostPlum_FFCE8EF7()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostCrimson_FFFF0042_to_AlmostPlum_FFCE8EF7(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-13.399999618530273, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightBlue_FF9BE2C9_to_AlmostRosyBrown_FFA0829E()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightBlue_FF9BE2C9_to_AlmostRosyBrown_FFA0829E(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-220.3000030517578, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightBlue_FF9BE2C9_to_AlmostTan_FFC9BC99()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightBlue_FF9BE2C9_to_AlmostTan_FFC9BC99(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-117.0999984741211, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightBlue_FF9ED1F4_to_AlmostSilver_FFB2D6A8()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightBlue_FF9ED1F4_to_AlmostSilver_FFB2D6A8(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightBlue_FF9EE0C6_to_AlmostDarkOrchid_FF8C44B5_0()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightBlue_FF9EE0C6_to_AlmostDarkOrchid_FF8C44B5_0(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-206.89999389648438, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightBlue_FF9EE0C6_to_AlmostDarkOrchid_FF8C44B5_1()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightBlue_FF9EE0C6_to_AlmostDarkOrchid_FF8C44B5_1(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-320, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightBlue_FFA0CEEF_to_AlmostPlum_FFD1A5E8()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightBlue_FFA0CEEF_to_AlmostPlum_FFD1A5E8(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-55.900001525878906, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightBlue_FFA3CEF7_to_AlmostDarkOrchid_FF8C44B5()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightBlue_FFA3CEF7_to_AlmostDarkOrchid_FF8C44B5(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-306.6000061035156, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightBlue_FFA8CCF7_to_AlmostPlum_FFD1A5E8()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightBlue_FFA8CCF7_to_AlmostPlum_FFD1A5E8(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-103.69999694824219, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightBlue_FFB7D8F2_to_AlmostDarkOrchid_FF8C44B5()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightBlue_FFB7D8F2_to_AlmostDarkOrchid_FF8C44B5(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-154.8000030517578, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostLightPink_FFE299AF_to_AlmostDarkOrchid_FF8C44B5()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostLightPink_FFE299AF_to_AlmostDarkOrchid_FF8C44B5(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-271.70001220703125, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostPlum_FFC696E5_to_AlmostKhaki_FFE2D193()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostPlum_FFC696E5_to_AlmostKhaki_FFE2D193(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-258.29998779296875, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostPlum_FFC69EE2_to_AlmostDarkOrchid_FF8C44B5()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostPlum_FFC69EE2_to_AlmostDarkOrchid_FF8C44B5(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-69.30000305175781, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostPlum_FFCC93ED_to_AlmostSilver_FFB2D8A8()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostPlum_FFCC93ED_to_AlmostSilver_FFB2D8A8(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: Dot1
        // Scale:0.4,0.4, RotationDegrees:-168.1999969482422, Offset:<50, 50>
        CompositionColorBrush AnimatedColorBrush_AlmostTan_FFDB9EAD_to_AlmostSteelBlue_FF5499CC()
        {
            const auto result = _c.CreateColorBrush();
            StartProgressBoundAnimation(result, L"Color", ColorAnimation_AlmostTan_FFDB9EAD_to_AlmostSteelBlue_FF5499CC(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: H2
        // ShapeGroup: Shape 1
        CompositionColorBrush ColorBrush_AlmostCrimson_FFD62D51()
        {
            return _c.CreateColorBrush({ 0xFF, 0xD6, 0x2D, 0x51 });
        }

        // - Layer aggregator
        // Layer: C2
        CompositionColorBrush ColorBrush_AlmostPlum_FFCE93F4()
        {
            return _c.CreateColorBrush({ 0xFF, 0xCE, 0x93, 0xF4 });
        }

        // - Layer aggregator
        // Layer: H1
        CompositionColorBrush ColorBrush_AlmostSilver_FFAABAC1()
        {
            return _c.CreateColorBrush({ 0xFF, 0xAA, 0xBA, 0xC1 });
        }

        // Layer aggregator
        // Layer: H2
        CompositionContainerShape ContainerShape_0()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Shape 1
            result.Shapes().Append(SpriteShape_01());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_1(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: C1
        CompositionContainerShape ContainerShape_1()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            // ShapeGroup: Ellipse 1
            result.Shapes().Append(SpriteShape_02());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_2(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Layer: Dot1
        CompositionContainerShape ContainerShape_2()
        {
            const auto result = _c.CreateContainerShape();
            result.Scale({ 0.0F, 0.0F });
            const auto shapes = result.Shapes();
            // Scale:0.4,0.4, Offset:<50, 50>
            shapes.Append(SpriteShape_04());
            // Scale:0.4,0.4, RotationDegrees:-13.399999618530273, Offset:<50, 50>
            shapes.Append(SpriteShape_05());
            // Scale:0.4,0.4, RotationDegrees:-55.900001525878906, Offset:<50, 50>
            shapes.Append(SpriteShape_06());
            // Scale:0.4,0.4, RotationDegrees:-69.30000305175781, Offset:<50, 50>
            shapes.Append(SpriteShape_07());
            // Scale:0.4,0.4, RotationDegrees:-103.69999694824219, Offset:<50, 50>
            shapes.Append(SpriteShape_08());
            // Scale:0.4,0.4, RotationDegrees:-117.0999984741211, Offset:<50, 50>
            shapes.Append(SpriteShape_09());
            // Scale:0.4,0.4, RotationDegrees:-154.8000030517578, Offset:<50, 50>
            shapes.Append(SpriteShape_10());
            // Scale:0.4,0.4, RotationDegrees:-168.1999969482422, Offset:<50, 50>
            shapes.Append(SpriteShape_11());
            // Scale:0.4,0.4, RotationDegrees:-206.89999389648438, Offset:<50, 50>
            shapes.Append(SpriteShape_12());
            // Scale:0.4,0.4, RotationDegrees:-220.3000030517578, Offset:<50, 50>
            shapes.Append(SpriteShape_13());
            // Scale:0.4,0.4, RotationDegrees:-258.29998779296875, Offset:<50, 50>
            shapes.Append(SpriteShape_14());
            // Scale:0.4,0.4, RotationDegrees:-271.70001220703125, Offset:<50, 50>
            shapes.Append(SpriteShape_15());
            // Scale:0.4,0.4, RotationDegrees:-306.6000061035156, Offset:<50, 50>
            shapes.Append(SpriteShape_16());
            // Scale:0.4,0.4, RotationDegrees:-320, Offset:<50, 50>
            shapes.Append(SpriteShape_17());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_4(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: C2
        // Ellipse Path 1.EllipseGeometry
        CompositionEllipseGeometry Ellipse_0()
        {
            const auto result = _c.CreateEllipseGeometry();
            result.Radius({ 0.0F, 0.0F });
            StartProgressBoundAnimation(result, L"Radius", RadiusVector2Animation(), _rootProgress);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C1
        // ShapeGroup: Ellipse 1
        // Ellipse Path 1.EllipseGeometry
        CompositionEllipseGeometry Ellipse_28p672()
        {
            const auto result = _c.CreateEllipseGeometry();
            result.Radius({ 28.6720009F, 28.6720009F });
            return result;
        }

        CompositionPath Path()
        {
            const auto result = _path = CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_1()));
            return result;
        }

        CompositionPathGeometry PathGeometry_00()
        {
            return _pathGeometry_00 = _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_0())));
        }

        CompositionPathGeometry PathGeometry_01()
        {
            const auto result = _c.CreatePathGeometry(Path());
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.449999988F);
            propertySet.InsertScalar(L"TStart", 0.439999998F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_0p44_to_0(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_0p45_to_0p01(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_02()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.479999989F);
            propertySet.InsertScalar(L"TStart", 0.469999999F);
            StartProgressBoundAnimation(result, L"TStart", TStartScalarAnimation_0p47_to_0p09(), _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", TEndScalarAnimation_0p48_to_0p1(), _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_03()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.449999988F);
            propertySet.InsertScalar(L"TStart", 0.439999998F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p44_to_0, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p45_to_0p01, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_04()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.479999989F);
            propertySet.InsertScalar(L"TStart", 0.469999999F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p47_to_0p09, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p48_to_0p1, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_05()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.449999988F);
            propertySet.InsertScalar(L"TStart", 0.439999998F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p44_to_0, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p45_to_0p01, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_06()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.479999989F);
            propertySet.InsertScalar(L"TStart", 0.469999999F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p47_to_0p09, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p48_to_0p1, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_07()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.449999988F);
            propertySet.InsertScalar(L"TStart", 0.439999998F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p44_to_0, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p45_to_0p01, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_08()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.479999989F);
            propertySet.InsertScalar(L"TStart", 0.469999999F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p47_to_0p09, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p48_to_0p1, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_09()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.449999988F);
            propertySet.InsertScalar(L"TStart", 0.439999998F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p44_to_0, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p45_to_0p01, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_10()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.479999989F);
            propertySet.InsertScalar(L"TStart", 0.469999999F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p47_to_0p09, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p48_to_0p1, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_11()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.449999988F);
            propertySet.InsertScalar(L"TStart", 0.439999998F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p44_to_0, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p45_to_0p01, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_12()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.479999989F);
            propertySet.InsertScalar(L"TStart", 0.469999999F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p47_to_0p09, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p48_to_0p1, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_13()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.449999988F);
            propertySet.InsertScalar(L"TStart", 0.439999998F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p44_to_0, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p45_to_0p01, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        CompositionPathGeometry PathGeometry_14()
        {
            const auto result = _c.CreatePathGeometry(_path);
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"TEnd", 0.479999989F);
            propertySet.InsertScalar(L"TStart", 0.469999999F);
            StartProgressBoundAnimation(result, L"TStart", _tStartScalarAnimation_0p47_to_0p09, _rootProgress);
            BindProperty(result, L"TrimStart", L"Min(my.TStart,my.TEnd)", L"my", result);
            StartProgressBoundAnimation(result, L"TEnd", _tEndScalarAnimation_0p48_to_0p1, _rootProgress);
            BindProperty(result, L"TrimEnd", L"Max(my.TStart,my.TEnd)", L"my", result);
            return result;
        }

        // Layer aggregator
        // Path 1
        CompositionSpriteShape SpriteShape_00()
        {
            // Offset:<49.0338, 49.666798>, Rotation:-0.011598425070025746 degrees,
            // Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_00(), { 0.400000006F, 0.0F, 0.0F, 0.400000006F, 49.0337982F, 49.6667976F }, ColorBrush_AlmostSilver_FFAABAC1());
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_0(), RootProgress());
            return result;
        }

        // - Layer aggregator
        // Layer: H2
        // Path 1
        CompositionSpriteShape SpriteShape_01()
        {
            const auto result = _c.CreateSpriteShape(_pathGeometry_00);
            result.CenterPoint({ 2.95799994F, 2.95799994F });
            result.Offset({ 47.2589989F, 47.8919983F });
            result.FillBrush(ColorBrush_AlmostCrimson_FFD62D51());
            StartProgressBoundAnimation(result, L"Scale.X", ScalarAnimation_0p04_to_0p4(), _rootProgress);
            StartProgressBoundAnimation(result, L"Scale.Y", _scalarAnimation_0p04_to_0p4, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: C1
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_02()
        {
            const auto result = _c.CreateSpriteShape(Ellipse_28p672());
            result.Offset({ 50.0F, 50.0F });
            result.FillBrush(AnimatedColorBrush_AlmostCrimson_FFFF0042_to_AlmostPlum_FFCE8EF7());
            StartProgressBoundAnimation(result, L"Scale", ScaleVector2Animation(), _rootProgress);
            return result;
        }

        // Layer aggregator
        // Ellipse Path 1
        CompositionSpriteShape SpriteShape_03()
        {
            // Offset:<50, 50>, Rotation:-0.011598425070025746 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(Ellipse_0(), { 0.400000006F, 0.0F, 0.0F, 0.400000006F, 50.0F, 50.0F });
            result.Scale({ 0.0F, 0.0F });
            result.StrokeBrush(ColorBrush_AlmostPlum_FFCE93F4());
            StartProgressBoundAnimation(result, L"StrokeThickness", StrokeThicknessScalarAnimation_23p3_to_1(), _rootProgress);
            StartProgressBoundAnimation(result, L"Scale", ShapeVisibilityAnimation_3(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_04()
        {
            // Offset:<50, 50>, Rotation:-0.011598425070025746 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_01(), { 0.400000006F, 0.0F, 0.0F, 0.400000006F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightBlue_FF9EE0C6_to_AlmostDarkOrchid_FF8C44B5_0());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", StrokeThicknessScalarAnimation_5_to_0_0(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_05()
        {
            // Offset:<50, 50>, Rotation:-13.399994045276207 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_02(), { 0.389110357F, -0.0926991627F, 0.0926991627F, 0.389110357F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightBlue_FF9BE2C9_to_AlmostRosyBrown_FFA0829E());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", StrokeThicknessScalarAnimation_5_to_0_1(), _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_06()
        {
            // Offset:<50, 50>, Rotation:-55.90000425077693 degrees,
            // Scale:<0.40000004, 0.40000004>
            const auto result = CreateSpriteShape(PathGeometry_03(), { 0.224255592F, -0.331224173F, 0.331224173F, 0.224255592F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightBlue_FFA3CEF7_to_AlmostDarkOrchid_FF8C44B5());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_0, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_07()
        {
            // Offset:<50, 50>, Rotation:-69.30000096572653 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_04(), { 0.141389936F, -0.374177635F, 0.374177635F, 0.141389936F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostPlum_FFCC93ED_to_AlmostSilver_FFB2D8A8());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_1, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_08()
        {
            // Offset:<50, 50>, Rotation:-103.69999560023328 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_05(), { -0.0947352275F, -0.388619661F, 0.388619661F, -0.0947352275F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightBlue_FFB7D8F2_to_AlmostDarkOrchid_FF8C44B5());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_0, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_09()
        {
            // Offset:<50, 50>, Rotation:-117.10000018476832 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_06(), { -0.18221797F, -0.356085122F, 0.356085122F, -0.18221797F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightBlue_FF9ED1F4_to_AlmostSilver_FFB2D6A8());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_1, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_10()
        {
            // Offset:<50, 50>, Rotation:-154.80001016869872 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_07(), { -0.361930847F, -0.170311674F, 0.170311674F, -0.361930847F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightPink_FFE299AF_to_AlmostDarkOrchid_FF8C44B5());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_0, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_11()
        {
            // Offset:<50, 50>, Rotation:-168.19998859264902 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_08(), { -0.391546935F, -0.0817984715F, 0.0817984715F, -0.391546935F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostTan_FFDB9EAD_to_AlmostSteelBlue_FF5499CC());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_1, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_12()
        {
            // Offset:<50, 50>, Rotation:153.10001651591406 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_09(), { -0.356719077F, 0.180973798F, -0.180973798F, -0.356719077F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightBlue_FF9EE0C6_to_AlmostDarkOrchid_FF8C44B5_1());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_0, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_13()
        {
            // Offset:<50, 50>, Rotation:139.70000392574133 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_10(), { -0.30506736F, 0.258715898F, -0.258715898F, -0.30506736F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightBlue_FF9BE2C9_to_AlmostTan_FFC9BC99());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_1, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_14()
        {
            // Offset:<50, 50>, Rotation:101.700013173948 degrees, Scale:<0.40000004, 0.40000004>
            const auto result = CreateSpriteShape(PathGeometry_11(), { -0.0811150149F, 0.391689122F, -0.391689122F, -0.0811150149F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostPlum_FFC69EE2_to_AlmostDarkOrchid_FF8C44B5());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_0, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_15()
        {
            // Offset:<50, 50>, Rotation:88.30000270458414 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_12(), { 0.0118664792F, 0.399823964F, -0.399823964F, 0.0118664792F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostPlum_FFC696E5_to_AlmostKhaki_FFE2D193());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_1, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_16()
        {
            // Offset:<50, 50>, Rotation:53.4000051330807 degrees, Scale:<0.40000004, 0.40000004>
            const auto result = CreateSpriteShape(PathGeometry_13(), { 0.238489941F, 0.321127027F, -0.321127027F, 0.238489941F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightBlue_FFA8CCF7_to_AlmostPlum_FFD1A5E8());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_0, _rootProgress);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        // Path 1
        CompositionSpriteShape SpriteShape_17()
        {
            // Offset:<50, 50>, Rotation:40.00002228340395 degrees, Scale:<0.4, 0.4>
            const auto result = CreateSpriteShape(PathGeometry_14(), { 0.306417674F, 0.257115155F, -0.257115155F, 0.306417674F, 50.0F, 50.0F });
            result.StrokeBrush(AnimatedColorBrush_AlmostLightBlue_FFA0CEEF_to_AlmostPlum_FFD1A5E8());
            result.StrokeDashCap(CompositionStrokeCap::Round);
            result.StrokeStartCap(CompositionStrokeCap::Round);
            result.StrokeEndCap(CompositionStrokeCap::Round);
            result.StrokeMiterLimit(2.0F);
            StartProgressBoundAnimation(result, L"StrokeThickness", _strokeThicknessScalarAnimation_5_to_0_1, _rootProgress);
            return result;
        }

        // The root of the composition.
        ContainerVisual Root()
        {
            const auto result = _root = _c.CreateContainerVisual();
            const auto propertySet = result.Properties();
            propertySet.InsertScalar(L"Progress", 0.0F);
            // Layer aggregator
            result.Children().InsertAtTop(ShapeVisual_0());
            return result;
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_0()
        {
            return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.680000007F, 0.0F }, { 0.319999993F, 1.0F });
        }

        CubicBezierEasingFunction CubicBezierEasingFunction_1()
        {
            return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
        }

        ExpressionAnimation RootProgress()
        {
            const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
            result.SetReferenceParameter(L"_", _root);
            return result;
        }

        // Scale
        ScalarKeyFrameAnimation ScalarAnimation_0p04_to_0p4()
        {
            const auto result = _scalarAnimation_0p04_to_0p4 = CreateScalarKeyFrameAnimation(0.0F, 0.0399999991F, StepThenHoldEasingFunction());
            result.InsertKeyFrame(0.37068966F, 0.0399999991F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.465517253F, 0.484400004F, CubicBezierEasingFunction_0());
            result.InsertKeyFrame(0.603448272F, 0.370400012F, _cubicBezierEasingFunction_0);
            result.InsertKeyFrame(0.784482777F, 0.400000006F, _cubicBezierEasingFunction_0);
            return result;
        }

        // StrokeThickness
        ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_5_to_0_0()
        {
            const auto result = _strokeThicknessScalarAnimation_5_to_0_0 = CreateScalarKeyFrameAnimation(0.0F, 5.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.482758611F, 5.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.767241359F, 0.0F, _cubicBezierEasingFunction_1);
            return result;
        }

        // StrokeThickness
        ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_5_to_0_1()
        {
            const auto result = _strokeThicknessScalarAnimation_5_to_0_1 = CreateScalarKeyFrameAnimation(0.0F, 5.0F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.37931034F, 5.0F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.482758611F, 2.0F, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.603448272F, 0.0F, _cubicBezierEasingFunction_1);
            return result;
        }

        // - Layer aggregator
        // Layer: C2
        // StrokeThickness
        ScalarKeyFrameAnimation StrokeThicknessScalarAnimation_23p3_to_1()
        {
            const auto result = CreateScalarKeyFrameAnimation(0.0F, 23.2999992F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.327586204F, 23.2999992F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.387931049F, 1.0F, _cubicBezierEasingFunction_1);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_0p45_to_0p01()
        {
            const auto result = _tEndScalarAnimation_0p45_to_0p01 = CreateScalarKeyFrameAnimation(0.0F, 0.449999988F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.37931034F, 0.449999988F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.482758611F, 0.200000003F, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.767241359F, 0.00999999978F, _cubicBezierEasingFunction_1);
            return result;
        }

        // TEnd
        ScalarKeyFrameAnimation TEndScalarAnimation_0p48_to_0p1()
        {
            const auto result = _tEndScalarAnimation_0p48_to_0p1 = CreateScalarKeyFrameAnimation(0.0F, 0.479999989F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.37931034F, 0.479999989F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.482758611F, 0.300000012F, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.672413766F, 0.100000001F, _cubicBezierEasingFunction_1);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_0p44_to_0()
        {
            const auto result = _tStartScalarAnimation_0p44_to_0 = CreateScalarKeyFrameAnimation(0.0F, 0.439999998F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.37931034F, 0.439999998F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.482758611F, 0.189999998F, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.767241359F, 0.0F, _cubicBezierEasingFunction_1);
            return result;
        }

        // TStart
        ScalarKeyFrameAnimation TStartScalarAnimation_0p47_to_0p09()
        {
            const auto result = _tStartScalarAnimation_0p47_to_0p09 = CreateScalarKeyFrameAnimation(0.0F, 0.469999999F, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.37931034F, 0.469999999F, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.482758611F, 0.289999992F, _cubicBezierEasingFunction_1);
            result.InsertKeyFrame(0.672413766F, 0.0900000036F, _cubicBezierEasingFunction_1);
            return result;
        }

        // Layer aggregator
        ShapeVisual ShapeVisual_0()
        {
            const auto result = _c.CreateShapeVisual();
            result.Size({ 100.0F, 100.0F });
            const auto shapes = result.Shapes();
            // Layer: H1
            shapes.Append(SpriteShape_00());
            // Layer: H2
            shapes.Append(ContainerShape_0());
            // Layer: C1
            shapes.Append(ContainerShape_1());
            // Layer: C2
            shapes.Append(SpriteShape_03());
            // Layer: Dot1
            shapes.Append(ContainerShape_2());
            return result;
        }

        StepEasingFunction HoldThenStepEasingFunction()
        {
            const auto result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
            result.IsFinalStepSingleFrame(true);
            return result;
        }

        StepEasingFunction StepThenHoldEasingFunction()
        {
            const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
            result.IsInitialStepSingleFrame(true);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C2
        // Ellipse Path 1.EllipseGeometry
        // Radius
        Vector2KeyFrameAnimation RadiusVector2Animation()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 12.8719997F, 12.8719997F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.327586204F, { 12.8719997F, 12.8719997F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.387931049F, { 30.3719997F, 30.3719997F }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - - Layer aggregator
        // - Layer: C1
        // ShapeGroup: Ellipse 1
        // Scale
        Vector2KeyFrameAnimation ScaleVector2Animation()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.0F, { 0.0399999991F, 0.0399999991F }, _stepThenHoldEasingFunction);
            result.InsertKeyFrame(0.284482747F, { 0.0399999991F, 0.0399999991F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.336206883F, { 0.400000006F, 0.400000006F }, _cubicBezierEasingFunction_1);
            return result;
        }

        // - Layer aggregator
        // Layer: H1
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_0()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.284482747F, { 0.0F, 0.0F }, HoldThenStepEasingFunction());
            return result;
        }

        // - Layer aggregator
        // Layer: H2
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_1()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.37068966F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: C1
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_2()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.284482747F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.336206883F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: C2
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_3()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.327586204F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.396551728F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        // - Layer aggregator
        // Layer: Dot1
        Vector2KeyFrameAnimation ShapeVisibilityAnimation_4()
        {
            const auto result = CreateVector2KeyFrameAnimation(0.37931034F, { 1.0F, 1.0F }, _holdThenStepEasingFunction);
            result.InsertKeyFrame(0.775862098F, { 0.0F, 0.0F }, _holdThenStepEasingFunction);
            return result;
        }

        static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
        {
            return geo.as<IGeometrySource2D>();
        }

    public:
        TwitterHeart_AnimatedVisual(Compositor compositor)
            : _c{compositor}
            , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
        {
            winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
            const auto _ = Root();
        }

        void Close()
        {
            if (_root)
            {
                _root.Close();
            }
        }

        TimeSpan Duration() const
        {
            return TimeSpan{ c_durationTicks };
        }

        Visual RootVisual() const
        {
            return _root;
        }

        float2 Size() const
        {
            return { 100.0F, 100.0F };
        }

        static bool IsRuntimeCompatible()
        {
            return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
        }
    };

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TwitterHeart::TryCreateAnimatedVisual(
        Compositor const& compositor,
        IInspectable& diagnostics)
    {
        diagnostics = nullptr;

        if (TwitterHeart_AnimatedVisual::IsRuntimeCompatible())
        {
            return winrt::make<TwitterHeart_AnimatedVisual>(compositor);
        }

        return nullptr;
    }

    double TwitterHeart::FrameToProgress(double frameNumber)
    {
        return frameNumber / 116.0;
    }

    winrt::Windows::Foundation::Collections::IMapView<hstring, double> TwitterHeart::Markers()
    {
        return winrt::single_threaded_map<winrt::hstring, double>(
            std::map<winrt::hstring, double>
            {
            }
        ).GetView();
    }

    void TwitterHeart::SetColorProperty(hstring const&, Color)
    {
    }

    void TwitterHeart::SetScalarProperty(hstring const&, double)
    {
    }
} // end namespace
