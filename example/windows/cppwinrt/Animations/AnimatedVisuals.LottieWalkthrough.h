#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.90+ga9eb6fa111
//       
//       Command:
//           LottieGen -InterfaceBaseName Microsoft.UI.Xaml.Controls.IAnimatedVisual -Language Cppwinrt -WinUIVersion 2.4 -InputFile LottieWalkthrough.json
//       
//       Input file:
//           LottieWalkthrough.json (33249 bytes created 20:50-08:00 Dec 28 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "AnimatedVisuals.LottieWalkthrough.g.h"

namespace winrt::AnimatedVisuals
{
    // Frame rate:  30 fps
    // Frame count: 181
    // Duration:    6033.3 mS
    namespace implementation
    {
        class LottieWalkthrough
            : public LottieWalkthroughT<LottieWalkthrough>
        {
        public:
            // Animation duration: 6.033 seconds.
            static constexpr int64_t c_durationTicks{ 60333333L };

            winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
                winrt::Windows::UI::Composition::Compositor const& compositor,
                winrt::Windows::Foundation::IInspectable& diagnostics);

            // Converts a frame number to the corresponding progress value.
            double FrameToProgress(double frameNumber);

            // Returns a map from marker names to corresponding progress values.
            winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

            // Sets the color property with the given name, or does nothing if no such property
            // exists.
            void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

            // Sets the scalar property with the given name, or does nothing if no such property
            // exists.
            void SetScalarProperty(hstring const& propertyName, double value);
        };
    }

    namespace factory_implementation
    {
        struct LottieWalkthrough : LottieWalkthroughT<LottieWalkthrough, implementation::LottieWalkthrough>
        {
        };
    }
}
